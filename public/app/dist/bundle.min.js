function saveLocal(n,t){localStorage[n]=JSON.stringify(t)}function getJSONLocal(n){var t=null;try{var e=localStorage[n];void 0!==e&&(t=JSON.parse(e))}catch(o){}return t}function deleteLocal(n){localStorage.removeItem(n)}function ClosureMessage(n){return function(t){return function(){t(n)}}}function emptyOrUndefined(n){return void 0==n||""===n}function RandPosition(n){var t=n||{min:0,max:100},e=chance.floating(t),o=chance.floating(t),r=chance.floating(t);return[e,o,r]}function RandColor(n){var t=n||{min:0,max:1,fixed:2},e=chance.floating(t),o=chance.floating(t),r=chance.floating(t);return[e,o,r,1]}function RandSize(n){var t=n||{min:.1,max:2,fixed:1},e=chance.floating(t);return[e,e,e]}function RandRotation(n){var t=Number(chance.bool()),e=Number(chance.bool()),o=Number(chance.bool());return{angle:chance.integer({min:0,max:360}),axis:[t,e,o]}}function generate(n){return function(){var t=chance.integer({min:0,max:100});return Array.apply(0,Array(t)).map(n)}}var app=angular.module("Application",["ui.router","ngResource","ngAnimate","ngMaterial"]);!function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/main.html",'\n<md-toolbar class="md-accent md-whiteframe-1dp">\n    <div class="md-toolbar-tools">\n\n\n        <md-menu flex="5">\n            <md-button aria-label="Type Stats" class="md-icon-button" ng-click="openMenu($mdOpenMenu, $event)">\n                <md-icon md-menu-origin md-font-icon="mdi-chart-areaspline" class="mdi"></md-icon>\n            </md-button>\n            <md-menu-content width="4">\n                <md-menu-item>\n                    <md-button ui-sref="app.normal">\n                        <md-icon md-font-icon="mdi-chart-bubble" class="mdi"></md-icon>\n                        Normal\n                    </md-button>\n                </md-menu-item>\n                <md-menu-item>\n                    <md-button  ui-sref="app.slider">\n                        <md-icon md-font-icon="mdi-clock-start" class="mdi"></md-icon>\n                        Slider\n                    </md-button>\n                </md-menu-item>\n                <md-menu-divider></md-menu-divider>\n                <md-menu-item>\n                    <md-button  ui-sref="app.player">\n                        <md-icon md-font-icon="mdi-play-box-outline" class="mdi"></md-icon>\n                        Player\n                    </md-button>\n                </md-menu-item>\n            </md-menu-content>\n        </md-menu>\n\n        <h2>\n            <span>Pickyourday 3D</span>\n        </h2>\n        <span flex></span>\n        <md-button aria-label="logout" class="md-icon-button" style="margin-right: 0px;" ng-click="logout()">\n            <md-icon md-font-icon="mdi-power" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<div ui-view="content"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/login/main.html",'<div layout="column" layout-align="center center">\n\n\n\n    <md-card>\n        <md-card-title>\n            <md-card-title-text>\n                <span class="md-headline">Pickyourday 3D</span>\n\n            </md-card-title-text>\n\n        </md-card-title>\n        <md-card-content layout="column">\n\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Email</label>\n                <input ng-model="user.email" type="email">\n            </md-input-container>\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Password</label>\n                <input ng-model="user.password" type="password">\n            </md-input-container>\n        </md-card-content>\n        <md-card-actions layout="row" layout-align="center center">\n            <md-button class="md-primary  md-raised md-hue-2" ng-click="login()">Login</md-button>\n\n        </md-card-actions>\n    </md-card>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/normal/main.html","<div>Normal</div>")}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/player/main.html","<div>Player</div>")}])}(),function(n){try{n=angular.module("Application")}catch(t){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/slider/main.html","<div>Slider</div>")}])}(),angular.module("Application").run(["$rootScope","$mdToast","$state",function(n,t,e){n.showToast=function(n){t.show(t.simple().textContent(n).theme("pick-theme").hideDelay(3e3))},n.go=function(n,t){e.go(n,t)}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,t,e,o){n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getJSONLocal("user")&&n.go("app.normal")}],templateUrl:"/views/login/main.html",controller:"LoginCtrl"}).state("app",{url:"/",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],templateUrl:"/views/main.html",controller:"AppCtrl","abstract":!0}).state("app.normal",{url:"normal",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/normal/main.html",controller:"NormalCtrl"}}}).state("app.slider",{url:"slider",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/slider/main.html",controller:"SliderCtrl"}}}).state("app.player",{url:"player",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/player/main.html",controller:"PlayerCtrl"}}}),t.otherwise("/login"),e.interceptors.push("AuthInterceptor"),o.theme("default").backgroundPalette("teal",{"default":"500","hue-1":"100","hue-2":"600","hue-3":"A100"}).primaryPalette("lime",{"default":"400","hue-1":"100","hue-2":"600","hue-3":"A100"}).accentPalette("teal",{"default":"500"})}]),angular.module("Application").controller("AppCtrl",["$rootScope","$scope","OauthService",function(n,t,e){t.openMenu=function(n,t){originatorEv=t,n(t)},t.logout=function(){e.logout().Session(function(){deleteLocal("user"),n.go("login")},function(){})}}]),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OauthService","RequestService",function(n,t,e,o){t.user={email:"",password:""},t.login=function(){async.waterfall([function(n){var e=emptyOrUndefined(t.user.email),o=emptyOrUndefined(t.user.password);e||o?e?n("Email Empty"):o&&n("Password Empty"):n()},function(n){e.login().Session(t.user,function(t){return t.error?n(t.error):void n(null,t.data)},o.ServerNotFound(n))},function(n,t){e.role().check({role:n.role},function(e){return e.error?t(e.error):void(2==e.data?t(null,n):o.NoRoleAuthorized(t)())},o.ServerNotFound(t))}],function(t,e){return t?n.showToast(t):(saveLocal("user",e),void n.go("app.normal"))})}}]),angular.module("Application").controller("NormalCtrl",function(){}),angular.module("Application").controller("PlayerCtrl",function(){}),angular.module("Application").controller("SliderCtrl",function(){}),angular.module("Application").factory("ApiService",["$resource","$location",function(n,t){return{env:"prod",prod:{protocol:"https",host:"pickyourday.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5000",root:"api"},getApiPath:function(n){var t=this[this.env];return t.protocol+"://"+t.host+(""!==t.port?":"+t.port:"")+"/"+t.root+"/"+n},rest:function(t,e,o){var r=n(this.getApiPath(t),o||{},e||{});return r}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,t){return{request:function(n){n.headers=n.headers||{};var t=getJSONLocal("user"),t=getJSONLocal("user");return!n.headers.Authorization&&t&&(n.headers.Authorization=t.token),n},requestError:function(t){return n.reject(t)},response:function(t){return"ERROR"===t.data.status?n.reject(t):t||n.when(t)},responseError:function(e){return 403===e.status?(console.error("Error de acceso"),localStorage.user="",void t.path("/")):n.reject(e)}}}]),angular.module("Application").factory("OauthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base,{Session:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{Session:{method:"GET",params:{}}})},role:function(){return n.rest(this.base+"/role/:role",{check:{method:"GET",params:{role:"@role"}}})}}}]),angular.module("Application").factory("RequestService",function(){return{ServerNotFound:ClosureMessage("Server Not Found"),NoRoleAuthorized:ClosureMessage("No Role Authorized")}});
//# sourceMappingURL=data:application/json;base64,
