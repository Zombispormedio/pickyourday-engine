function saveLocal(n,e){localStorage[n]=JSON.stringify(e)}function getJSONLocal(n){var e=null;try{var t=localStorage[n];void 0!==t&&(e=JSON.parse(t))}catch(o){}return e}function deleteLocal(n){localStorage.removeItem(n)}function ClosureMessage(n){return function(e){return function(){e(n)}}}function emptyOrUndefined(n){return void 0==n||""===n}function RandPosition(n){var e=n||{min:0,max:100},t=chance.floating(e),o=chance.floating(e),a=chance.floating(e);return[t,o,a]}function RandColor(n){var e=n||{min:0,max:1,fixed:2},t=chance.floating(e),o=chance.floating(e),a=chance.floating(e);return[t,o,a,1]}function RandSize(n){var e=n||{min:.1,max:2,fixed:1},t=chance.floating(e);return[t,t,t]}function RandRotation(n){var e=Number(chance.bool()),t=Number(chance.bool()),o=Number(chance.bool());return{angle:chance.integer({min:0,max:360}),axis:[e,t,o]}}function generate(n){return function(){var e=chance.integer({min:0,max:100});return Array.apply(0,Array(e)).map(n)}}var app=angular.module("Application",["ui.router","ngResource","ngAnimate","ngMaterial","alexandra"]);!function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/main.html",'\n<md-toolbar class="md-accent md-whiteframe-1dp">\n    <div class="md-toolbar-tools">\n\n\n        <md-menu flex="5">\n            <md-button aria-label="Type Stats" class="md-icon-button button-stats" ng-click="openMenu($mdOpenMenu, $event)">\n                <md-icon md-menu-origin md-font-icon="mdi-chart-areaspline" class="mdi"></md-icon>\n            </md-button>\n            <md-menu-content width="4">\n                <md-menu-item>\n                    <md-button ui-sref="app.normal">\n                        <md-icon md-font-icon="mdi-chart-bubble" class="mdi"></md-icon>\n                        Normal\n                    </md-button>\n                </md-menu-item>\n                <md-menu-item>\n                    <md-button  ui-sref="app.slider">\n                        <md-icon md-font-icon="mdi-clock-start" class="mdi"></md-icon>\n                        Slider\n                    </md-button>\n                </md-menu-item>\n                <md-menu-divider></md-menu-divider>\n                <md-menu-item>\n                    <md-button  ui-sref="app.player">\n                        <md-icon md-font-icon="mdi-play-box-outline" class="mdi"></md-icon>\n                        Player\n                    </md-button>\n                </md-menu-item>\n            </md-menu-content>\n        </md-menu>\n\n        <h2>\n            <span>Pickyourday 3D</span>\n        </h2>\n        <span flex></span>\n        <md-button aria-label="logout" class="md-icon-button button-power" style="margin-right: 0px;" ng-click="logout()">\n            <md-icon md-font-icon="mdi-power" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<div ui-view="content"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/login/main.html",'<div layout="column" layout-align="center center">\n\n\n\n    <md-card>\n        <md-card-title>\n            <md-card-title-text>\n                <span class="md-headline">Pickyourday 3D</span>\n\n            </md-card-title-text>\n\n        </md-card-title>\n        <md-card-content layout="column">\n\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Email</label>\n                <input ng-model="user.email" type="email">\n            </md-input-container>\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Password</label>\n                <input ng-model="user.password" type="password">\n            </md-input-container>\n        </md-card-content>\n        <md-card-actions layout="row" layout-align="center center">\n            <md-button class="md-primary  md-raised md-hue-2" ng-click="login()">Login</md-button>\n\n        </md-card-actions>\n    </md-card>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/normal/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n<div class="player-content" layout="row">\n<canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="600"></canvas>\n  <div flex="35" layout="column" layout-align="center center">\n	<p>X: {{selectedInfo[0]||\'N/A\'}}</p>\n	<p>Y: {{selectedInfo[1] || \'0\'}}</p>\n	<p>Z: {{selectedInfo[2]||\'N/A\'}}</p>\n  </div>\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/player/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n<div class="player-content" layout="row">\n    <canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="600"></canvas>\n    <div flex="35" layout="column" layout-align="center strech">\n        <div flex layout="row" layout-align="center center">\n            <md-button ng-click="play()" ng-if="!loading">\n                <md-icon md-font-icon="mdi-play" class="mdi"></md-icon>\n                Play\n            </md-button>\n        </div>\n\n        <div flex>\n            <div ng-repeat="vm in data">\n                {{vm.position}}\n\n            </div>\n        </div>\n\n        <div>\n            <md-slider-container>\n               <span class="md-body-1">{{values.index}}</span>\n                <md-slider class="md-primary" md-discrete step="1" min="1" max="30" aria-label="rating" ng-show="!loading" ng-model="values.index" ng-disabled="true">\n                </md-slider>\n            </md-slider-container>\n        </div>\n\n\n\n\n    </div>\n\n</div>\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/slider/main.html","<div>Slider</div>\n{{coords.x}}, {{coords.y}}, {{coords.z}}")}])}(),angular.module("Application").run(["$rootScope","$mdToast","$state",function(n,e,t){n.showToast=function(n){e.show(e.simple().textContent(n).theme("pick-theme").hideDelay(3e3))},n.go=function(n,e){t.go(n,e)}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,e,t,o){n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getJSONLocal("user")&&n.go("app.player")}],templateUrl:"/views/login/main.html",controller:"LoginCtrl"}).state("app",{url:"/",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],templateUrl:"/views/main.html",controller:"AppCtrl","abstract":!0}).state("app.normal",{url:"normal",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/normal/main.html",controller:"NormalCtrl"}}}).state("app.slider",{url:"slider",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/slider/main.html",controller:"SliderCtrl"}}}).state("app.player",{url:"player",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/player/main.html",controller:"PlayerCtrl"}}}),e.otherwise("/login"),t.interceptors.push("AuthInterceptor"),o.theme("default").backgroundPalette("teal",{"default":"500","hue-1":"100","hue-2":"600","hue-3":"A100"}).primaryPalette("lime",{"default":"400","hue-1":"100","hue-2":"600","hue-3":"A100"}).accentPalette("teal",{"default":"500"})}]),angular.module("Application").controller("AppCtrl",["$rootScope","$scope","OauthService",function(n,e,t){e.openMenu=function(n,e){originatorEv=e,n(e)},e.logout=function(){t.logout().Session(function(){deleteLocal("user"),n.go("login")},function(){})}}]),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OauthService","RequestService",function(n,e,t,o){e.user={email:"",password:""},e.login=function(){async.waterfall([function(n){var t=emptyOrUndefined(e.user.email),o=emptyOrUndefined(e.user.password);t||o?t?n("Email Empty"):o&&n("Password Empty"):n()},function(n){t.login().Session(e.user,function(e){return e.error?n(e.error):void n(null,e.data)},o.ServerNotFound(n))},function(n,e){t.role().check({role:n.role},function(t){return t.error?e(t.error):void(2==t.data?e(null,n):o.NoRoleAuthorized(e)())},o.ServerNotFound(e))}],function(e,t){return e?n.showToast(e):(saveLocal("user",t),void n.go("app.normal"))})}}]),angular.module("Application").controller("NormalCtrl",["$scope","CompanyService",function(n,e){n.loading=!0,n.data=[],n.selectedInfo={};var t=[];n.config={colortype:"variable",axis:!0,axisLength:500,streaming:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500},selector:!0,onSelected:function(e){e&&(n.selectedInfo=e)}};var o=function(){e.Pick().stats(function(e){t=Immutable.List(e.data),n.data=_.clone(t.get(0)),n.loading=!1})};o()}]),angular.module("Application").controller("PlayerCtrl",["$scope","CompanyService","$timeout",function(n,e,t){function o(e,o,a,l){var c=o.reduce(function(n,e,t){var o=e.position,r=a[t].position;return _.isEqual(o,r)||(n.length++,n.current["x_"+t]=o[0],n.current["y_"+t]=o[1],n.current["z_"+t]=o[2],n.next["x_"+t]=r[0],n.next["y_"+t]=r[1],n.next["z_"+t]=r[2]),n},{current:{},next:{},length:0});if(n.values.index=e+1,console.log(c),c.length>0){new TWEEN.Tween(c.current).to(c.next,r).onUpdate(function(){var e=this;n.$$phase||n.$apply(function(){var t=Object.keys(e).reduce(function(n,t){var o=e[t],a=t.split("_"),r=a[0],i=a[1];return console.log(a),n[i]=n[i]||{},n[i][r]=o,n},{});console.log(t);var o=_.clone(n.data);Object.keys(t).forEach(function(n){var e=t[n];o[n].position=[e.x,e.y,e.z]}),n.data=o})}).onComplete(function(){l()}).interpolation(TWEEN.Interpolation.Bezier).easing(TWEEN.Easing.Linear.None).delay(250).start()}else t(l,i)}function a(n){requestAnimationFrame(a),TWEEN.update(n)}var r=2e3,i=500;n.loading=!0,n.data=[];var l=[];n.values={index:1},n.config={colortype:"variable",axis:!0,axisLength:500,streaming:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500}},e.Pick().stats(function(e){l=Immutable.List(e.data),n.data=_.clone(l.get(0)),n.loading=!1}),n.play=function(){function e(t){if(console.log(t),t<l.count()-1){var a=_.clone(l.get(t)),r=_.clone(l.get(t+1));o(t,a,r,function(){e(t+1)})}else n.values.index=l.count()}e(0)},requestAnimationFrame(a)}]),angular.module("Application").controller("SliderCtrl",["$scope",function(n){function e(n){requestAnimationFrame(e),TWEEN.update(n)}var t={x:0,y:0,z:0};new TWEEN.Tween(t).to({x:100,y:50,z:70},1e4).onUpdate(function(){var e=this;n.$apply(function(){n.coords={x:e.x,y:e.y,z:e.z},console.log(n.coords)})}).start();requestAnimationFrame(e)}]),angular.module("Application").factory("ApiService",["$resource","$location",function(n,e){return{env:"prod",prod:{protocol:"https",host:"pickyourday.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5000",root:"api"},getApiPath:function(n){var e=this[this.env];return e.protocol+"://"+e.host+(""!==e.port?":"+e.port:"")+"/"+e.root+"/"+n},rest:function(e,t,o){var a=n(this.getApiPath(e),o||{},t||{});return a}}}]),angular.module("Application").factory("CompanyService",["ApiService",function(n){return{base:"company",Pick:function(){return n.rest(this.base+"/statsPicks",{stats:{method:"GET",params:{}}})}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,e){return{request:function(n){n.headers=n.headers||{};var e=getJSONLocal("user"),e=getJSONLocal("user");return!n.headers.Authorization&&e&&(n.headers.Authorization=e.token),n},requestError:function(e){return n.reject(e)},response:function(e){return"ERROR"===e.data.status?n.reject(e):e||n.when(e)},responseError:function(t){return 403===t.status?(console.error("Error de acceso"),localStorage.user="",void e.path("/")):n.reject(t)}}}]),angular.module("Application").factory("OauthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base,{Session:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{Session:{method:"GET",params:{}}})},role:function(){return n.rest(this.base+"/role/:role",{check:{method:"GET",params:{role:"@role"}}})}}}]),angular.module("Application").factory("RequestService",function(){return{ServerNotFound:ClosureMessage("Server Not Found"),NoRoleAuthorized:ClosureMessage("No Role Authorized")}});
//# sourceMappingURL=data:application/json;base64,
