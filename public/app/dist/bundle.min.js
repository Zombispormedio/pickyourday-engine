function saveLocal(n,e){localStorage[n]=JSON.stringify(e)}function getJSONLocal(n){var e=null;try{var o=localStorage[n];void 0!==o&&(e=JSON.parse(o))}catch(t){}return e}function deleteLocal(n){localStorage.removeItem(n)}function ClosureMessage(n){return function(e){return function(){e(n)}}}function emptyOrUndefined(n){return void 0==n||""===n}function RandPosition(n){var e=n||{min:0,max:100},o=chance.floating(e),t=chance.floating(e),a=chance.floating(e);return[o,t,a]}function RandColor(n){var e=n||{min:0,max:1,fixed:2},o=chance.floating(e),t=chance.floating(e),a=chance.floating(e);return[o,t,a,1]}function RandSize(n){var e=n||{min:.1,max:2,fixed:1},o=chance.floating(e);return[o,o,o]}function RandRotation(n){var e=Number(chance.bool()),o=Number(chance.bool()),t=Number(chance.bool());return{angle:chance.integer({min:0,max:360}),axis:[e,o,t]}}function generate(n){return function(){var e=chance.integer({min:0,max:100});return Array.apply(0,Array(e)).map(n)}}var app=angular.module("Application",["ui.router","ngResource","ngAnimate","ngMaterial","alexandra"]);!function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/main.html",'\n<md-toolbar class="md-accent md-whiteframe-1dp">\n    <div class="md-toolbar-tools">\n        <md-menu flex="5">\n            <md-button aria-label="Type Stats" class="md-icon-button button-stats" ng-click="openMenu($mdOpenMenu, $event)">\n                <md-icon md-menu-origin md-font-icon="mdi-chart-areaspline" class="mdi"></md-icon>\n            </md-button>\n            <md-menu-content width="4">\n                <md-menu-item>\n                    <md-button ui-sref="app.normal">\n                        <md-icon md-font-icon="mdi-chart-bubble" class="mdi"></md-icon>\n                        Normal\n                    </md-button>\n                </md-menu-item>\n                <md-menu-item>\n                    <md-button  ui-sref="app.slider">\n                        <md-icon md-font-icon="mdi-clock-start" class="mdi"></md-icon>\n                        Slider\n                    </md-button>\n                </md-menu-item>\n                <md-menu-divider></md-menu-divider>\n                <md-menu-item>\n                    <md-button  ui-sref="app.player">\n                        <md-icon md-font-icon="mdi-play-box-outline" class="mdi"></md-icon>\n                        Player\n                    </md-button>\n                </md-menu-item>\n                <md-menu-item>\n                    <md-button  ui-sref="app.heightmap">\n                        <md-icon md-font-icon="mdi-airplane-landing" class="mdi"></md-icon>\n                        Height Map\n                    </md-button>\n                </md-menu-item>\n                 <md-menu-item>\n                    <md-button  ui-sref="app.special">\n                        <md-icon md-font-icon="mdi-castle" class="mdi"></md-icon>\n                        Special\n                    </md-button>\n                </md-menu-item>\n            </md-menu-content>\n        </md-menu>\n        \n        <h2>\n            <span>Pickyourday 3D</span>\n        </h2>\n        <span flex></span>\n        <md-button aria-label="logout" class="md-icon-button button-power" style="margin-right: 0px;" ng-click="logout()">\n            <md-icon md-font-icon="mdi-power" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<div ui-view="content"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/height-map/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n<div class="player-content" layout="row">\n    <canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="600"></canvas>\n    <div flex="35" layout="column" layout-align="center strech">\n        <div>\n            <md-slider-container>\n               \n                <md-slider class="md-primary" md-discrete step="1" min="1" max="30" aria-label="rating" ng-show="!loading" ng-model="index" ng-change="select()">\n                </md-slider>\n            </md-slider-container>\n        </div>\n    </div>\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/login/main.html",'<div layout="column" layout-align="center center">\n\n\n\n    <md-card>\n        <md-card-title>\n            <md-card-title-text>\n                <span class="md-headline">Pickyourday 3D</span>\n\n            </md-card-title-text>\n\n        </md-card-title>\n        <md-card-content layout="column">\n\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Email</label>\n                <input ng-model="user.email" type="email">\n            </md-input-container>\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Password</label>\n                <input ng-model="user.password" type="password">\n            </md-input-container>\n        </md-card-content>\n        <md-card-actions layout="row" layout-align="center center">\n            <md-button class="md-primary  md-raised md-hue-2" ng-click="login()">Login</md-button>\n\n        </md-card-actions>\n    </md-card>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/normal/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n\n<canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="500"></canvas>\n<div layout="row">\n\n    <md-select flex="20" ng-model="selected.statType"  flex-offset="5" placeholder="Selecciona x/y/z" ng-change="changeStatType()">\n\n        <md-option value="pick">Estado de Pick/Cantidad/Servicio</md-option>\n\n        <md-option value="score">Valoraci√≥n/Cantidad/Servicio</md-option>\n        <md-option value="money">Empleado/Dinero/Servicio</md-option>\n        <md-option value="work">Empleado/Tiempo Trabajado/Servicio</md-option>\n    </md-select>\n    \n     <md-select flex="20" style="margin-right:5%;" ng-model="config.engine"  flex-offset="5" placeholder="Selecciona engine">\n\n        <md-option value="phong">Phong</md-option>\n\n        <md-option value="phong_positional">Phong Positional</md-option>\n        <md-option value="toon">Toon</md-option>\n        <md-option value="phong_lights">Phong Several Lights</md-option>\n    </md-select>\n     <md-checkbox flex ng-model="config.selector" aria-label="Selector">\n            Use Selector\n          </md-checkbox>\n     <md-select flex="20" style="margin-right:5%;" ng-model="config.effect"  ng-if="!config.selector" flex-offset="5" placeholder="Selecciona effect">\n\n        <md-option value="no">No Effect</md-option>\n\n        <md-option value="invert">Negative</md-option>\n        <md-option value="grey">Greyscale</md-option>\n        <md-option value="blur">Blur</md-option>\n        <md-option value="film">Film</md-option>\n        <md-option value="wavy">Wavy</md-option>\n         <md-option value="all">Random</md-option>\n    </md-select>\n\n\n</div>\n\n\n <div ng-if="statsTime" layout="row" style="position: fixed;\n    top: 50px;\n    left: 30px;\n    width: 410px;\n    background-color: white;\n    padding-left: 27px;\n    box-shadow: 0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);">\n        <p flex="20">X: {{selectedInfo[0]||\'N/A\'}}</p>\n        <p flex="10">Y: {{selectedInfo[1] || \'0\'}}</p>\n        <p flex>Z: {{selectedInfo[2]||\'N/A\'}}</p>\n    </div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/player/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n<div class="player-content" layout="row">\n    <canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="600"></canvas>\n    <div flex="35" layout="column" layout-align="center strech">\n        <div flex layout="row" layout-align="center center">\n            <md-button ng-click="play()" ng-if="!loading&&!playing">\n                <md-icon md-font-icon="mdi-play" class="mdi"></md-icon>\n                Play\n            </md-button>\n            \n            <md-button ng-click="stop()" ng-if="playing">\n                <md-icon md-font-icon="mdi-stop" class="mdi"></md-icon>\n                Stop\n            </md-button>\n        </div>\n\n        <div>\n            <md-slider-container>\n               <span class="md-body-1">{{values.index}}</span>\n                <md-slider class="md-primary" md-discrete step="1" min="1" max="30" aria-label="rating" ng-show="!loading" ng-model="values.index" ng-disabled="true">\n                </md-slider>\n            </md-slider-container>\n        </div>\n    </div>\n\n</div>\n\n\n')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/slider/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n<div class="player-content" layout="row">\n    <canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="600"></canvas>\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/special/main.html","")}])}(),angular.module("Application").run(["$rootScope","$mdToast","$state",function(n,e,o){n.showToast=function(n){e.show(e.simple().textContent(n).theme("pick-theme").hideDelay(3e3))},n.go=function(n,e){o.go(n,e)}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,e,o,t){n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getJSONLocal("user")&&n.go("app.player")}],templateUrl:"/views/login/main.html",controller:"LoginCtrl"}).state("app",{url:"/",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],templateUrl:"/views/main.html",controller:"AppCtrl","abstract":!0}).state("app.normal",{url:"normal",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/normal/main.html",controller:"NormalCtrl"}}}).state("app.slider",{url:"slider",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/slider/main.html",controller:"SliderCtrl"}}}).state("app.player",{url:"player",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/player/main.html",controller:"PlayerCtrl"}}}).state("app.heightmap",{url:"height-map",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/height-map/main.html",controller:"HeightMapCtrl"}}}).state("app.special",{url:"special",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/special/main.html",controller:"SpecialCtrl"}}}),e.otherwise("/login"),o.interceptors.push("AuthInterceptor"),t.theme("default").backgroundPalette("teal",{"default":"500","hue-1":"100","hue-2":"600","hue-3":"A100"}).primaryPalette("lime",{"default":"400","hue-1":"100","hue-2":"600","hue-3":"A100"}).accentPalette("teal",{"default":"500"})}]),angular.module("Application").controller("AppCtrl",["$rootScope","$scope","OauthService",function(n,e,o){e.openMenu=function(n,e){originatorEv=e,n(e)},e.logout=function(){o.logout().Session(function(){deleteLocal("user"),n.go("login")},function(){})}}]),angular.module("Application").controller("HeightMapCtrl",["$scope","CompanyService","$alexandraModel",function(n,e,o){n.loading=!0,n.config={type:"custom",engine:"phong_positional",axis:!0,axisLength:500,streaming:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500},light:{direction:[-1,-1,-1]},colortype:"variable"};var t={};n.index=1,e.Pick().stats(function(e){n.loading=!1,t=e.data.plane,i()}),n.select=function(){i()};var a=RandColor(),i=function(){var e=t.vertices,i=n.index-1,r=e[i];n.data={mesh:o.Plane({height:t.height,width:t.width,w_s:t.vWidth,h_s:t.vHeight},function(n,e,o){var t=e.x,a=e.z,i=e.y,l=_.find(r,function(n){return n.key==o});return l&&(a=l.y),n.push(t),n.push(a),n.push(i),n}),position:[50,0,50],color:a}}}]),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OauthService","RequestService",function(n,e,o,t){e.user={email:"",password:""},e.login=function(){async.waterfall([function(n){var o=emptyOrUndefined(e.user.email),t=emptyOrUndefined(e.user.password);o||t?o?n("Email Empty"):t&&n("Password Empty"):n()},function(n){o.login().Session(e.user,function(e){return e.error?n(e.error):void n(null,e.data)},t.ServerNotFound(n))},function(n,e){o.role().check({role:n.role},function(o){return o.error?e(o.error):void(2==o.data?e(null,n):t.NoRoleAuthorized(e)())},t.ServerNotFound(e))}],function(e,o){return e?n.showToast(e):(saveLocal("user",o),void n.go("app.normal"))})}}]),angular.module("Application").controller("NormalCtrl",["$scope","CompanyService","StatsService","$alexandraModel","$alexandraStore","$alexandraForest",function(n,e,o,t,a,i){n.loading=!0,n.data=[],n.selectedInfo={},n.selected={statType:"no",engine:"phong"},n.statsTime=!1;var r=[];n.config={colortype:"variable",type:"custom",axis:!0,axisLength:500,streaming:!0,fullWidth:!0,permitEffects:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500},selector:!0,onSelected:function(e){e&&(n.selectedInfo=e)},LabelXConfig:{offset:15},LabelYConfig:{offset:15},LabelZConfig:{offset:15},lightSequence:[a.lights.blue,a.lights.green,a.lights.red]};var l=function(e){var o=t.Text(e,{size:10,height:.1});n.data={mesh:o,position:[50,50,150],rotation:{angle:45,axis:[0,1,0]},color:RandColor()}},c=function(){e.Profile().get(function(e){return e.error?console.log(e.error):(profile=e.data,n.loading=!1,void l(profile.name))})};c();var d=function(e){r=Immutable.List(e.stats),n.data=_.clone(r.get(0)),n.loading=!1,n.config.LabelX=e.legend.x,n.config.LabelY=e.legend.y,n.config.LabelZ=e.legend.z,console.log(i.getTree("view_1"))};n.changeStatType=function(){switch(n.config.type="sphere",n.loading=!0,n.statsTime=!0,n.selected.statType){case"pick":o.Picks(d);break;case"score":o.ScoreServices(d);break;case"money":o.MoneyResources(d);break;case"work":o.WorkResources(d);break;case"origin":o.OriginPicks(d)}}}]),angular.module("Application").controller("PlayerCtrl",["$scope","CompanyService","$timeout",function(n,e,o){function t(e,t,a,l){var d=t.reduce(function(n,e,o){var t=e.position,i=a[o].position;return _.isEqual(t,i)||(n.length++,n.current["x_"+o]=t[0],n.current["y_"+o]=t[1],n.current["z_"+o]=t[2],n.next["x_"+o]=i[0],n.next["y_"+o]=i[1],n.next["z_"+o]=i[2]),n},{current:{},next:{},length:0});n.values.index=e+1,d.length>0?c=new TWEEN.Tween(d.current).to(d.next,i).onUpdate(function(){var e=this;n.$$phase||n.$apply(function(){if(0==n.playing)return void c.stop();var o=Object.keys(e).reduce(function(n,o){var t=e[o],a=o.split("_"),i=a[0],r=a[1];return n[r]=n[r]||{},n[r][i]=t,n},{}),t=_.cloneDeep(n.data);Object.keys(o).forEach(function(n){var e=o[n];t[n].position=[e.x,e.y,e.z]}),n.data=t})}).onComplete(function(){l()}).onStop(function(){console.log("hello"),l()}).interpolation(TWEEN.Interpolation.Bezier).easing(TWEEN.Easing.Linear.None).delay(250).start():o(l,r)}function a(n){requestAnimationFrame(a),TWEEN.update(n)}var i=2e3,r=500;n.loading=!0,n.playing=!1,n.data=[];var l=[],c=null;n.values={index:1},n.config={colortype:"variable",engine:"phong_positional",axis:!0,axisLength:500,streaming:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500}},e.Pick().stats(function(e){return n.loading=!1,e.error?console.log(e.error):(l=Immutable.List(e.data.stats),void(n.data=_.cloneDeep(l.get(0))))}),n.play=function(){function e(o){if(o<l.count()-1&&n.playing){var a=_.cloneDeep(l.get(o)),i=_.cloneDeep(l.get(o+1));t(o,a,i,function(){e(o+1)})}else n.playing=!1,n.values.index=1,n.data=[],n.data=_.cloneDeep(l.get(0))}n.playing=!0,e(0)},n.stop=function(){n.playing=!1},requestAnimationFrame(a)}]),angular.module("Application").controller("SliderCtrl",["$scope","CompanyService","$alexandraModel",function(n,e,o){var t;n.loading=!0,n.config={type:"custom",engine:"phong_positional",colortype:"variable",axis:!0,axisLength:500,streaming:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500}};var a=RandColor(),i=function(e){var t=o.Text(e,{size:10,height:.5,curveSegments:30,bevelEnabled:!0,bevelThickness:1.5,bevelSize:.5});n.data={mesh:t,position:[50,50,150],rotation:{angle:45,axis:[0,1,0]},color:a}},r=function(){e.Profile().get(function(e){return e.error?console.log(e.error):(t=e.data,n.loading=!1,void i(t.name))})};r()}]),angular.module("Application").controller("SpecialCtrl",["$scope","$alexandraModel",function(n,e){}]),angular.module("Application").factory("ApiService",["$resource","$location",function(n,e){return{env:"prod",prod:{protocol:"https",host:"pickyourday.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5000",root:"api"},getApiPath:function(n){var e=this[this.env];return e.protocol+"://"+e.host+(""!==e.port?":"+e.port:"")+"/"+e.root+"/"+n},rest:function(e,o,t){var a=n(this.getApiPath(e),t||{},o||{});return a}}}]),angular.module("Application").factory("CompanyService",["ApiService",function(n){return{base:"company",Pick:function(){return n.rest(this.base+"/statsPicks",{stats:{method:"GET",params:{}}})},OriginPick:function(){return n.rest(this.base+"/originPicks",{stats:{method:"GET",params:{}}})},ScoreService:function(){return n.rest(this.base+"/scoreService",{stats:{method:"GET",params:{}}})},MoneyResource:function(){return n.rest(this.base+"/moneyResources",{stats:{method:"GET",params:{}}})},WorkResource:function(){return n.rest(this.base+"/workResources",{stats:{method:"GET",params:{}}})},Profile:function(){return n.rest(this.base+"/profile",{get:{method:"GET",params:{}}})}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,e){return{request:function(n){n.headers=n.headers||{};var e=getJSONLocal("user"),e=getJSONLocal("user");return!n.headers.Authorization&&e&&(n.headers.Authorization=e.token),n},requestError:function(e){return n.reject(e)},response:function(e){return"ERROR"===e.data.status?n.reject(e):e||n.when(e)},responseError:function(o){return 403===o.status?(console.error("Error de acceso"),localStorage.user="",void e.path("/")):n.reject(o)}}}]),angular.module("Application").factory("OauthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base,{Session:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{Session:{method:"GET",params:{}}})},role:function(){return n.rest(this.base+"/role/:role",{check:{method:"GET",params:{role:"@role"}}})}}}]),angular.module("Application").factory("RequestService",function(){return{ServerNotFound:ClosureMessage("Server Not Found"),NoRoleAuthorized:ClosureMessage("No Role Authorized")}}),angular.module("Application").factory("StatsService",["CompanyService",function(n){function e(n,e){return function(o){return o.error?e(o.error):o.data?void n(o.data):e("No Data")}}function o(n){return function(){return n?n("Server Not Found"):void console.log("Server Not Found")}}return{Picks:function(t,a){n.Pick().stats(e(t,a),o(a))},OriginPicks:function(t,a){n.OriginPick().stats(e(t,a),o(a))},ScoreServices:function(t,a){n.ScoreService().stats(e(t,a),o(a))},MoneyResources:function(t,a){n.MoneyResource().stats(e(t,a),o(a))},WorkResources:function(t,a){n.WorkResource().stats(e(t,a),o(a))}}}]);
//# sourceMappingURL=data:application/json;base64,
