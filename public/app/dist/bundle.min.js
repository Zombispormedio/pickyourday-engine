function saveLocal(e,n){localStorage[e]=JSON.stringify(n)}function getJSONLocal(e){var n=null;try{var o=localStorage[e];void 0!==o&&(n=JSON.parse(o))}catch(t){}return n}function deleteLocal(e){localStorage.removeItem(e)}function ClosureMessage(e){return function(n){return function(){n(e)}}}function emptyOrUndefined(e){return void 0==e||""===e}function RandPosition(e){var n=e||{min:0,max:100},o=chance.floating(n),t=chance.floating(n),i=chance.floating(n);return[o,t,i]}function RandColor(e){var n=e||{min:0,max:1,fixed:2},o=chance.floating(n),t=chance.floating(n),i=chance.floating(n);return[o,t,i,1]}function RandSize(e){var n=e||{min:.1,max:2,fixed:1},o=chance.floating(n);return[o,o,o]}function RandRotation(e){var n=Number(chance.bool()),o=Number(chance.bool()),t=Number(chance.bool());return{angle:chance.integer({min:0,max:360}),axis:[n,o,t]}}function generate(e){return function(){var n=chance.integer({min:0,max:100});return Array.apply(0,Array(n)).map(e)}}var app=angular.module("Application",["ui.router","ngResource","ngAnimate","ngMaterial","alexandra"]);!function(e){try{e=angular.module("Application")}catch(n){e=angular.module("Application",[])}e.run(["$templateCache",function(e){e.put("/views/main.html",'\n<md-toolbar class="md-accent md-whiteframe-1dp" style=" height:35px;min-height: 35px!important;">\n    <div class="md-toolbar-tools">\n        <md-menu flex="5" style="margin: 0">\n            <md-button aria-label="Type Stats" class="md-icon-button button-stats" ng-click="openMenu($mdOpenMenu, $event)">\n                <md-icon md-menu-origin md-font-icon="mdi-chart-areaspline" class="mdi" style="color: white; font-size: 2em; margin-top: -5.3%"></md-icon>\n            </md-button>\n            <md-menu-content width="4" style="background-color: white">\n                <md-menu-item>\n                    <md-button ui-sref="app.normal">\n                        <md-icon md-font-icon="mdi-chart-bubble" class="mdi" style=" color: black; font-size: 2em"></md-icon>\n                        Normal\n                    </md-button>\n                </md-menu-item>\n                <md-menu-item>\n                    <md-button  ui-sref="app.slider">\n                        <md-icon md-font-icon="mdi-clock-start" class="mdi" style=" color: black; font-size: 2em"></md-icon>\n                        Slider\n                    </md-button>\n                </md-menu-item>\n                <md-menu-divider></md-menu-divider>\n                <md-menu-item>\n                    <md-button  ui-sref="app.player">\n                        <md-icon md-font-icon="mdi-play-box-outline" class="mdi" style=" color: black; font-size: 2em"></md-icon>\n                        Player\n                    </md-button>\n                </md-menu-item>\n                <md-menu-item>\n                    <md-button  ui-sref="app.heightmap">\n                        <md-icon md-font-icon="mdi-airplane-landing" class="mdi" style=" color: black; font-size: 2em"></md-icon>\n                        Height Map\n                    </md-button>\n                </md-menu-item>\n            </md-menu-content>\n        </md-menu>\n        \n        <h2>\n            <span>Pickyourday 3D</span>\n        </h2>\n        <span flex></span>\n        <md-button aria-label="logout" class="md-icon-buttonr" style="margin-right: 0px;  margin-top: -0.5%;" ng-click="logout()">\n            <md-icon md-font-icon="mdi-power" class="mdi" style=" color: white; font-size: 2em"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<div ui-view="content"></div>')}])}(),function(e){try{e=angular.module("Application")}catch(n){e=angular.module("Application",[])}e.run(["$templateCache",function(e){e.put("/views/height-map/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n<canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="500"></canvas>\n\n\n<div layout="row">\n    <div flex="30"  flex-offset="5"  ng-show="statsTime">\n        <md-slider-container>\n            <label>Día del mes</label>\n            <md-slider class="md-primary" md-discrete step="1" min="1" max="30" aria-label="rating" ng-model="index" ng-change="select()">\n            </md-slider>\n        </md-slider-container>\n    </div>\n\n    <md-select flex="20" ng-model="selected.statType"  flex-offset="5" placeholder="Selecciona x/y/z" ng-change="changeStatType()">\n\n        <md-option value="pick">Estado de Pick/Cantidad/Servicio</md-option>\n\n        <md-option value="score">Valoración/Cantidad/Servicio</md-option>\n        <md-option value="money">Empleado/Dinero/Servicio</md-option>\n        <md-option value="work">Empleado/Tiempo Trabajado/Servicio</md-option>\n    </md-select>\n    \n    <md-select flex="20" style="margin-right:5%;" ng-model="config.engine"  flex-offset="5" placeholder="Selecciona engine">\n\n        <md-option value="phong">Phong</md-option>\n\n        <md-option value="phong_positional">Phong Positional</md-option>\n        <md-option value="toon">Toon</md-option>\n        <md-option value="phong_lights">Phong Several Lights</md-option>\n    </md-select>\n  \n     <md-select flex="20" style="margin-right:5%;" ng-model="config.effect"  ng-if="!config.selector" flex-offset="5" placeholder="Selecciona effect">\n\n        <md-option value="no">No Effect</md-option>\n\n        <md-option value="invert">Negative</md-option>\n        <md-option value="grey">Greyscale</md-option>\n        <md-option value="blur">Blur</md-option>\n        <md-option value="film">Film</md-option>\n        <md-option value="wavy">Wavy</md-option>\n         <md-option value="all">Random</md-option>\n    </md-select>\n</div>\n')}])}(),function(e){try{e=angular.module("Application")}catch(n){e=angular.module("Application",[])}e.run(["$templateCache",function(e){e.put("/views/login/main.html",'<div layout="column" layout-align="center center">\n\n\n\n    <md-card>\n        <md-card-title>\n            <md-card-title-text>\n                <span class="md-headline">Pickyourday 3D</span>\n\n            </md-card-title-text>\n\n        </md-card-title>\n        <md-card-content layout="column">\n\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Email</label>\n                <input ng-model="user.email" type="email">\n            </md-input-container>\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Password</label>\n                <input ng-model="user.password" type="password">\n            </md-input-container>\n        </md-card-content>\n        <md-card-actions layout="row" layout-align="center center">\n            <md-button class="md-primary  md-raised md-hue-2" ng-click="login()">Login</md-button>\n\n        </md-card-actions>\n    </md-card>\n\n\n</div>')}])}(),function(e){try{e=angular.module("Application")}catch(n){e=angular.module("Application",[])}e.run(["$templateCache",function(e){e.put("/views/normal/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n\n<canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="500"></canvas>\n<div layout="row">\n\n    <md-select flex="20" ng-model="selected.statType"  flex-offset="5" placeholder="Selecciona x/y/z" ng-change="changeStatType()">\n\n        <md-option value="pick">Estado de Pick/Cantidad/Servicio</md-option>\n        <md-option value="origin">Origen/Cantidad/Servicio</md-option>\n        <md-option value="score">Valoración/Cantidad/Servicio</md-option>\n        <md-option value="money">Empleado/Dinero/Servicio</md-option>\n        <md-option value="work">Empleado/Tiempo Trabajado/Servicio</md-option>\n    </md-select>\n\n    <md-select flex="20" style="margin-right:5%;" ng-model="config.engine"  flex-offset="5" placeholder="Selecciona engine">\n\n        <md-option value="phong">Phong</md-option>\n\n        <md-option value="phong_positional">Phong Positional</md-option>\n        <md-option value="toon">Toon</md-option>\n        <md-option value="phong_lights">Phong Several Lights</md-option>\n    </md-select>\n    <md-checkbox flex ng-model="config.selector" aria-label="Selector">\n        Use Selector\n    </md-checkbox>\n    <md-select flex="20" style="margin-right:5%;" ng-model="config.effect"  ng-if="!config.selector" flex-offset="5" placeholder="Selecciona effect">\n\n        <md-option value="no">No Effect</md-option>\n\n        <md-option value="invert">Negative</md-option>\n        <md-option value="grey">Greyscale</md-option>\n        <md-option value="blur">Blur</md-option>\n        <md-option value="film">Film</md-option>\n        <md-option value="wavy">Wavy</md-option>\n        <md-option value="all">Random</md-option>\n    </md-select>\n\n\n</div>\n\n\n<div ng-if="statsTime" layout="row" style="position: fixed;\n                                           top: 50px;\n                                           left: 30px;\n                                           width: 410px;\n                                           background-color: white;\n                                           padding-left: 27px;\n                                           box-shadow: 0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);">\n    <p flex="30">X: {{selectedInfo[0]||\'N/A\'}}</p>\n    <p flex="10">Y: {{selectedInfo[1] || \'0\'}}</p>\n    <p flex>Z: {{selectedInfo[2]||\'N/A\'}}</p>\n</div>')}])}(),function(e){try{e=angular.module("Application")}catch(n){e=angular.module("Application",[])}e.run(["$templateCache",function(e){e.put("/views/player/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n\n<canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="500"></canvas>\n<div layout="row">\n    <div flex="20"  flex-offset="5"  ng-show="statsTime">\n        <md-slider-container>\n            <label>Día del mes</label>\n            <md-slider ng-disabled="true" class="md-primary" md-discrete step="1" min="1" max="30" aria-label="rating" ng-model="index">\n            </md-slider>\n        </md-slider-container>\n    </div>\n    <md-select flex="20" ng-model="selected.statType"  flex-offset="5" placeholder="Selecciona x/y/z" ng-change="changeStatType()">\n\n        <md-option value="pick">Estado de Pick/Cantidad/Servicio</md-option>\n\n        <md-option value="score">Valoración/Cantidad/Servicio</md-option>\n        <md-option value="money">Empleado/Dinero/Servicio</md-option>\n        <md-option value="work">Empleado/Tiempo Trabajado/Servicio</md-option>\n    </md-select>\n\n    <md-select flex="15" style="margin-right:5%;" ng-model="config.engine"  flex-offset="5" placeholder="Selecciona engine">\n\n        <md-option value="phong">Phong</md-option>\n\n        <md-option value="phong_positional">Phong Positional</md-option>\n        <md-option value="toon">Toon</md-option>\n        <md-option value="phong_lights">Phong Several Lights</md-option>\n    </md-select>\n    <md-checkbox flex="10" ng-model="config.selector" aria-label="Selector">\n        Use Selector\n    </md-checkbox>\n    <md-select flex="15" style="margin-right:5%;" ng-model="config.effect"  ng-if="!config.selector" flex-offset="5" placeholder="Selecciona effect">\n\n        <md-option value="no">No Effect</md-option>\n\n        <md-option value="invert">Negative</md-option>\n        <md-option value="grey">Greyscale</md-option>\n        <md-option value="blur">Blur</md-option>\n        <md-option value="film">Film</md-option>\n        <md-option value="wavy">Wavy</md-option>\n        <md-option value="all">Random</md-option>\n    </md-select>\n\n\n</div>\n\n\n<div ng-if="statsTime" layout="row" style="position: fixed;\n                                           top: 50px;\n                                           left: 30px;\n                                           width: 410px;\n                                           background-color: white;\n                                           padding-left: 27px;\n                                           box-shadow: 0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);">\n    <p flex="30">X: {{selectedInfo[0]||\'N/A\'}}</p>\n    <p flex="10">Y: {{selectedInfo[1] || \'0\'}}</p>\n    <p flex>Z: {{selectedInfo[2]||\'N/A\'}}</p>\n</div>\n\n<div ng-if="statsTime" style="position: fixed;\n            top: 75.7%;\n            background-color: rgba(1,1,1,0.6);\n            color: white;">\n    <md-button ng-click="play()" ng-if="!loading&&!playing">\n        <md-icon md-font-icon="mdi-play" class="mdi" style="color: white; font-size: 2em;"></md-icon>\n        Play\n    </md-button>\n\n    <md-button ng-click="stop()" ng-if="playing">\n        <md-icon md-font-icon="mdi-stop" class="mdi" style="color: white; font-size: 2em;"></md-icon>\n        Stop\n    </md-button>\n</div>\n')}])}(),function(e){try{e=angular.module("Application")}catch(n){e=angular.module("Application",[])}e.run(["$templateCache",function(e){e.put("/views/slider/main.html",'<md-progress-linear md-mode="indeterminate" ng-if="loading"></md-progress-linear>\n\n<canvas alexandra-view data-id="view_1" alexandra-config="config" alexandra-source="data" width="800" height="500"></canvas>\n<div layout="row">\n    <div flex="20"  flex-offset="5"  ng-show="statsTime">\n        <md-slider-container>\n            <label>Día del mes</label>\n            <md-slider class="md-primary" md-discrete step="1" min="1" max="30" aria-label="rating" ng-model="index" ng-change="select()">\n            </md-slider>\n        </md-slider-container>\n    </div>\n    <md-select flex="20" ng-model="selected.statType"  flex-offset="5" placeholder="Selecciona x/y/z" ng-change="changeStatType()">\n\n        <md-option value="pick">Estado de Pick/Cantidad/Servicio</md-option>\n\n        <md-option value="score">Valoración/Cantidad/Servicio</md-option>\n        <md-option value="money">Empleado/Dinero/Servicio</md-option>\n        <md-option value="work">Empleado/Tiempo Trabajado/Servicio</md-option>\n    </md-select>\n\n    <md-select flex="15" style="margin-right:5%;" ng-model="config.engine"  flex-offset="5" placeholder="Selecciona engine">\n\n        <md-option value="phong">Phong</md-option>\n\n        <md-option value="phong_positional">Phong Positional</md-option>\n        <md-option value="toon">Toon</md-option>\n        <md-option value="phong_lights">Phong Several Lights</md-option>\n    </md-select>\n    <md-checkbox flex="10" ng-model="config.selector" aria-label="Selector">\n        Use Selector\n    </md-checkbox>\n    <md-select flex="15" style="margin-right:5%;" ng-model="config.effect"  ng-if="!config.selector" flex-offset="5" placeholder="Selecciona effect">\n\n        <md-option value="no">No Effect</md-option>\n\n        <md-option value="invert">Negative</md-option>\n        <md-option value="grey">Greyscale</md-option>\n        <md-option value="blur">Blur</md-option>\n        <md-option value="film">Film</md-option>\n        <md-option value="wavy">Wavy</md-option>\n        <md-option value="all">Random</md-option>\n    </md-select>\n\n\n</div>\n\n\n<div ng-if="statsTime" layout="row" style="position: fixed;\n                                           top: 50px;\n                                           left: 30px;\n                                           width: 410px;\n                                           background-color: white;\n                                           padding-left: 27px;\n                                           box-shadow: 0 1px 3px 0 rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 2px 1px -1px rgba(0,0,0,.12);">\n    <p flex="30">X: {{selectedInfo[0]||\'N/A\'}}</p>\n    <p flex="10">Y: {{selectedInfo[1] || \'0\'}}</p>\n    <p flex>Z: {{selectedInfo[2]||\'N/A\'}}</p>\n</div>')}])}(),angular.module("Application").run(["$rootScope","$mdToast","$state",function(e,n,o){e.showToast=function(e){n.show(n.simple().textContent(e).theme("pick-theme").hideDelay(3e3))},e.go=function(e,n){o.go(e,n)}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(e,n,o,t){e.state("login",{url:"/login",onEnter:["$rootScope",function(e){getJSONLocal("user")&&e.go("app.player")}],templateUrl:"/views/login/main.html",controller:"LoginCtrl"}).state("app",{url:"/",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],templateUrl:"/views/main.html",controller:"AppCtrl","abstract":!0}).state("app.normal",{url:"normal",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],views:{content:{templateUrl:"/views/normal/main.html",controller:"NormalCtrl"}}}).state("app.slider",{url:"slider",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],views:{content:{templateUrl:"/views/slider/main.html",controller:"SliderCtrl"}}}).state("app.player",{url:"player",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],views:{content:{templateUrl:"/views/player/main.html",controller:"PlayerCtrl"}}}).state("app.heightmap",{url:"height-map",onEnter:["$rootScope",function(e){getJSONLocal("user")||e.go("login")}],views:{content:{templateUrl:"/views/height-map/main.html",controller:"HeightMapCtrl"}}}),n.otherwise("/login"),o.interceptors.push("AuthInterceptor"),t.theme("default").backgroundPalette("teal",{"default":"500","hue-1":"100","hue-2":"600","hue-3":"A100"}).primaryPalette("lime",{"default":"400","hue-1":"100","hue-2":"600","hue-3":"A100"}).accentPalette("teal",{"default":"500"})}]),angular.module("Application").controller("AppCtrl",["$rootScope","$scope","OauthService",function(e,n,o){n.openMenu=function(e,n){originatorEv=n,e(n)},n.logout=function(){o.logout().Session(function(){deleteLocal("user"),e.go("login")},function(){})}}]),angular.module("Application").controller("HeightMapCtrl",["$scope","CompanyService","CompanyService","StatsService","$alexandraModel","$alexandraStore",function(e,n,n,o,t,i){e.loading=!0,e.selected={statType:"no",engine:"phong"},e.config={type:"custom",engine:"phong_positional",axis:!0,fullWidth:!0,axisLength:500,streaming:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500},light:{direction:[-1,-1,-1]},colortype:"variable",permitEffects:!0,LabelXConfig:{offset:15},LabelYConfig:{offset:15},LabelZConfig:{offset:15},lightSequence:[i.lights.blue,i.lights.green,i.lights.red]};var a={};e.index=1,e.select=function(){l()};var r=RandColor(),l=function(){var n=a.vertices,o=e.index-1,i=n[o];e.data={mesh:t.Plane({height:a.height,width:a.width,w_s:a.vWidth,h_s:a.vHeight},function(e,n,o){var t=n.x,a=n.z,r=n.y,l=_.find(i,function(e){return e.key==o});return l&&(a=l.y),e.push(t),e.push(a),e.push(r),e}),position:[50,0,50],color:r}},c=function(n){var o=t.Text(n,{size:10,height:.1});e.data={mesh:o,position:[50,50,150],rotation:{angle:45,axis:[0,1,0]},color:RandColor()}},d=function(){n.Profile().get(function(n){return n.error?console.log(n.error):(profile=n.data,e.loading=!1,void c(profile.name))})};d();var s=function(n){e.loading=!1,a=n.plane,console.log(a),l(),e.config.LabelX=n.legend.x,e.config.LabelY=n.legend.y,e.config.LabelZ=n.legend.z};e.changeStatType=function(){switch(e.loading=!0,e.statsTime=!0,e.selected.statType){case"pick":o.Picks(s);break;case"score":o.ScoreServices(s);break;case"money":o.MoneyResources(s);break;case"work":o.WorkResources(s);break;case"origin":o.OriginPicks(s)}}}]),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OauthService","RequestService",function(e,n,o,t){n.user={email:"",password:""},n.login=function(){async.waterfall([function(e){var o=emptyOrUndefined(n.user.email),t=emptyOrUndefined(n.user.password);o||t?o?e("Email Empty"):t&&e("Password Empty"):e()},function(e){o.login().Session(n.user,function(n){return n.error?e(n.error):void e(null,n.data)},t.ServerNotFound(e))},function(e,n){o.role().check({role:e.role},function(o){return o.error?n(o.error):void(2==o.data?n(null,e):t.NoRoleAuthorized(n)())},t.ServerNotFound(n))}],function(n,o){return n?e.showToast(n):(saveLocal("user",o),void e.go("app.normal"))})}}]),angular.module("Application").controller("NormalCtrl",["$scope","CompanyService","StatsService","$alexandraModel","$alexandraStore","$alexandraForest",function(e,n,o,t,i,a){e.loading=!0,e.data=[],e.selectedInfo={},e.selected={statType:"no",engine:"phong"},e.statsTime=!1;var r=[];e.config={colortype:"variable",type:"custom",axis:!0,axisLength:500,streaming:!0,fullWidth:!0,permitEffects:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500},selector:!0,onSelected:function(n){n&&(e.selectedInfo=n)},LabelXConfig:{offset:15},LabelYConfig:{offset:15},LabelZConfig:{offset:15},lightSequence:[i.lights.blue,i.lights.green,i.lights.red]};var l=function(n){var o=t.Text(n,{size:10,height:.1});e.data={mesh:o,position:[50,50,150],rotation:{angle:45,axis:[0,1,0]},color:RandColor()}},c=function(){n.Profile().get(function(n){return n.error?console.log(n.error):(profile=n.data,e.loading=!1,void l(profile.name))})};c();var d=function(n){r=Immutable.List(n.stats),e.data=_.clone(r.get(0)),e.loading=!1,e.config.LabelX=n.legend.x,e.config.LabelY=n.legend.y,e.config.LabelZ=n.legend.z};e.changeStatType=function(){switch(e.config.type="sphere",e.loading=!0,e.statsTime=!0,e.selected.statType){case"pick":o.Picks(d);break;case"score":o.ScoreServices(d);break;case"money":o.MoneyResources(d);break;case"work":o.WorkResources(d);break;case"origin":o.OriginPicks(d)}}}]),angular.module("Application").controller("PlayerCtrl",["$scope","CompanyService","$timeout","StatsService","$alexandraModel","$alexandraStore","$alexandraForest",function(e,n,o,t,i,a,r){function l(n,t,i,a){var r=t.reduce(function(e,n,o){var t=n.position,a=i[o].position;return _.isEqual(t,a)||(e.length++,e.current["x_"+o]=t[0],e.current["y_"+o]=t[1],e.current["z_"+o]=t[2],e.next["x_"+o]=a[0],e.next["y_"+o]=a[1],e.next["z_"+o]=a[2]),e},{current:{},next:{},length:0});e.index=n+1,r.length>0?f=new TWEEN.Tween(r.current).to(r.next,u).onUpdate(function(){var n=this;e.$$phase||e.$apply(function(){if(0==e.playing)return void f.stop();var o=Object.keys(n).reduce(function(e,o){var t=n[o],i=o.split("_"),a=i[0],r=i[1];return e[r]=e[r]||{},e[r][a]=t,e},{}),t=_.cloneDeep(e.data);Object.keys(o).forEach(function(e){var n=o[e];t[e].position=[n.x,n.y,n.z]}),e.data=t})}).onComplete(function(){a()}).onStop(function(){console.log("hello"),a()}).interpolation(TWEEN.Interpolation.Bezier).easing(TWEEN.Easing.Linear.None).delay(250).start():o(a,g)}function c(e){requestAnimationFrame(c),TWEEN.update(e)}e.loading=!0,e.data=[],e.selectedInfo={},e.selected={statType:"no",engine:"phong"},e.index=1,e.statsTime=!1;var d=[];e.config={colortype:"variable",type:"custom",axis:!0,axisLength:500,streaming:!0,fullWidth:!0,permitEffects:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500},selector:!0,onSelected:function(n){n&&(e.selectedInfo=n)},LabelXConfig:{offset:15},LabelYConfig:{offset:15},LabelZConfig:{offset:15},lightSequence:[a.lights.blue,a.lights.green,a.lights.red]};var s=function(n){var o=i.Text(n,{size:10,height:.1});e.data={mesh:o,position:[50,50,150],rotation:{angle:45,axis:[0,1,0]},color:RandColor()}},m=function(){n.Profile().get(function(n){return n.error?console.log(n.error):(profile=n.data,e.loading=!1,void s(profile.name))})};m();var p=function(n){d=Immutable.List(n.stats),e.data=_.cloneDeep(d.get(e.index-1)),e.loading=!1,e.config.LabelX=n.legend.x,e.config.LabelY=n.legend.y,e.config.LabelZ=n.legend.z};e.changeStatType=function(){switch(e.config.type="sphere",e.loading=!0,e.statsTime=!0,e.selected.statType){case"pick":t.Picks(p);break;case"score":t.ScoreServices(p);break;case"money":t.MoneyResources(p);break;case"work":t.WorkResources(p);break;case"origin":t.OriginPicks(p)}};var u=2e3,g=500;e.playing=!1;var f=null;e.play=function(){function n(o){if(o<d.count()-1&&e.playing){var t=_.cloneDeep(d.get(o)),i=_.cloneDeep(d.get(o+1));l(o,t,i,function(){n(o+1)})}else e.playing=!1,e.index=1,e.data=[],e.data=_.cloneDeep(d.get(0))}e.playing=!0,n(0)},e.stop=function(){e.playing=!1},requestAnimationFrame(c)}]),angular.module("Application").controller("SliderCtrl",["$scope","CompanyService","StatsService","$alexandraModel","$alexandraStore","$alexandraForest",function(e,n,o,t,i,a){e.loading=!0,e.data=[],e.selectedInfo={},e.selected={statType:"no",engine:"phong"},e.index=1,e.statsTime=!1;var r=[];e.config={colortype:"variable",type:"custom",axis:!0,axisLength:500,streaming:!0,fullWidth:!0,permitEffects:!0,background:[.3,.3,.3],grid:!0,gridConfig:{lines:60,dim:500},selector:!0,onSelected:function(n){n&&(e.selectedInfo=n)},LabelXConfig:{offset:15},LabelYConfig:{offset:15},LabelZConfig:{offset:15},lightSequence:[i.lights.blue,i.lights.green,i.lights.red]};var l=function(n){var o=t.Text(n,{size:10,height:.1});e.data={mesh:o,position:[50,50,150],rotation:{angle:45,axis:[0,1,0]},color:RandColor()}},c=function(){n.Profile().get(function(n){return n.error?console.log(n.error):(profile=n.data,e.loading=!1,void l(profile.name))})};c();var d=function(n){r=Immutable.List(n.stats),e.data=r.get(e.index-1),e.loading=!1,e.config.LabelX=n.legend.x,e.config.LabelY=n.legend.y,e.config.LabelZ=n.legend.z};e.select=function(){var n=e.index-1;e.data=r.get(n)},e.changeStatType=function(){switch(e.config.type="sphere",e.loading=!0,e.statsTime=!0,e.selected.statType){case"pick":o.Picks(d);break;case"score":o.ScoreServices(d);break;case"money":o.MoneyResources(d);break;case"work":o.WorkResources(d);break;case"origin":o.OriginPicks(d)}}}]),angular.module("Application").factory("ApiService",["$resource","$location",function(e,n){return{env:"prod",prod:{protocol:"https",host:"pickyourday.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5000",root:"api"},getApiPath:function(e){var n=this[this.env];return n.protocol+"://"+n.host+(""!==n.port?":"+n.port:"")+"/"+n.root+"/"+e},rest:function(n,o,t){var i=e(this.getApiPath(n),t||{},o||{});return i}}}]),angular.module("Application").factory("CompanyService",["ApiService",function(e){return{base:"company",Pick:function(){return e.rest(this.base+"/statsPicks",{stats:{method:"GET",params:{}}})},OriginPick:function(){return e.rest(this.base+"/originPicks",{stats:{method:"GET",params:{}}})},ScoreService:function(){return e.rest(this.base+"/scoreService",{stats:{method:"GET",params:{}}})},MoneyResource:function(){return e.rest(this.base+"/moneyResources",{stats:{method:"GET",params:{}}})},WorkResource:function(){return e.rest(this.base+"/workResources",{stats:{method:"GET",params:{}}})},Profile:function(){return e.rest(this.base+"/profile",{get:{method:"GET",params:{}}})}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(e,n){return{request:function(e){e.headers=e.headers||{};var n=getJSONLocal("user"),n=getJSONLocal("user");return!e.headers.Authorization&&n&&(e.headers.Authorization=n.token),e},requestError:function(n){return e.reject(n)},response:function(n){return"ERROR"===n.data.status?e.reject(n):n||e.when(n)},responseError:function(o){return 403===o.status?(console.error("Error de acceso"),localStorage.user="",void n.path("/")):e.reject(o)}}}]),angular.module("Application").factory("OauthService",["ApiService",function(e){return{base:"oauth",login:function(){return e.rest(this.base,{Session:{method:"POST",params:{}}})},logout:function(){return e.rest(this.base+"/logout",{Session:{method:"GET",params:{}}})},role:function(){return e.rest(this.base+"/role/:role",{check:{method:"GET",params:{role:"@role"}}})}}}]),angular.module("Application").factory("RequestService",function(){return{ServerNotFound:ClosureMessage("Server Not Found"),NoRoleAuthorized:ClosureMessage("No Role Authorized")}}),angular.module("Application").factory("StatsService",["CompanyService",function(e){function n(e,n){return function(o){return o.error?n(o.error):o.data?void e(o.data):n("No Data")}}function o(e){return function(){return e?e("Server Not Found"):void console.log("Server Not Found")}}return{Picks:function(t,i){e.Pick().stats(n(t,i),o(i))},OriginPicks:function(t,i){e.OriginPick().stats(n(t,i),o(i))},ScoreServices:function(t,i){e.ScoreService().stats(n(t,i),o(i))},MoneyResources:function(t,i){e.MoneyResource().stats(n(t,i),o(i))},WorkResources:function(t,i){e.WorkResource().stats(n(t,i),o(i))}}}]);
//# sourceMappingURL=data:application/json;base64,
