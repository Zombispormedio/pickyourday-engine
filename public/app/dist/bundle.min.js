function saveLocal(n,e){localStorage[n]=JSON.stringify(e)}function getJSONLocal(n){var e=null;try{var t=localStorage[n];void 0!==t&&(e=JSON.parse(t))}catch(o){}return e}function deleteLocal(n){localStorage.removeItem(n)}function ClosureMessage(n){return function(e){return function(){e(n)}}}function emptyOrUndefined(n){return void 0==n||""===n}function RandPosition(n){var e=n||{min:0,max:100},t=chance.floating(e),o=chance.floating(e),r=chance.floating(e);return[t,o,r]}function RandColor(n){var e=n||{min:0,max:1,fixed:2},t=chance.floating(e),o=chance.floating(e),r=chance.floating(e);return[t,o,r,1]}function RandSize(n){var e=n||{min:.1,max:2,fixed:1},t=chance.floating(e);return[t,t,t]}function RandRotation(n){var e=Number(chance.bool()),t=Number(chance.bool()),o=Number(chance.bool());return{angle:chance.integer({min:0,max:360}),axis:[e,t,o]}}function generate(n){return function(){var e=chance.integer({min:0,max:100});return Array.apply(0,Array(e)).map(n)}}var app=angular.module("Application",["ui.router","ngResource","ngAnimate","ngMaterial"]);!function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/main.html",'\n<md-toolbar class="md-accent md-whiteframe-1dp">\n    <div class="md-toolbar-tools">\n\n\n        <md-menu flex="5">\n            <md-button aria-label="Type Stats" class="md-icon-button" ng-click="openMenu($mdOpenMenu, $event)">\n                <md-icon md-menu-origin md-font-icon="mdi-chart-areaspline" class="mdi"></md-icon>\n            </md-button>\n            <md-menu-content width="4">\n                <md-menu-item>\n                    <md-button ui-sref="app.normal">\n                        <md-icon md-font-icon="mdi-chart-bubble" class="mdi"></md-icon>\n                        Normal\n                    </md-button>\n                </md-menu-item>\n                <md-menu-item>\n                    <md-button  ui-sref="app.slider">\n                        <md-icon md-font-icon="mdi-clock-start" class="mdi"></md-icon>\n                        Slider\n                    </md-button>\n                </md-menu-item>\n                <md-menu-divider></md-menu-divider>\n                <md-menu-item>\n                    <md-button  ui-sref="app.player">\n                        <md-icon md-font-icon="mdi-play-box-outline" class="mdi"></md-icon>\n                        Player\n                    </md-button>\n                </md-menu-item>\n            </md-menu-content>\n        </md-menu>\n\n        <h2>\n            <span>Pickyourday 3D</span>\n        </h2>\n        <span flex></span>\n        <md-button aria-label="logout" class="md-icon-button" style="margin-right: 0px;" ng-click="logout()">\n            <md-icon md-font-icon="mdi-power" class="mdi"></md-icon>\n        </md-button>\n    </div>\n</md-toolbar>\n\n\n<div ui-view="content"></div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/login/main.html",'<div layout="column" layout-align="center center">\n\n\n\n    <md-card>\n        <md-card-title>\n            <md-card-title-text>\n                <span class="md-headline">Pickyourday 3D</span>\n\n            </md-card-title-text>\n\n        </md-card-title>\n        <md-card-content layout="column">\n\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Email</label>\n                <input ng-model="user.email" type="email">\n            </md-input-container>\n\n            <md-input-container class="md-primary md-raised md-hue-2">\n                <label>Password</label>\n                <input ng-model="user.password" type="password">\n            </md-input-container>\n        </md-card-content>\n        <md-card-actions layout="row" layout-align="center center">\n            <md-button class="md-primary  md-raised md-hue-2" ng-click="login()">Login</md-button>\n\n        </md-card-actions>\n    </md-card>\n\n\n</div>')}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/normal/main.html","<div>Normal</div>")}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/player/main.html","<div>Player</div>\n\n{{coords.x}}, {{coords.y}} ")}])}(),function(n){try{n=angular.module("Application")}catch(e){n=angular.module("Application",[])}n.run(["$templateCache",function(n){n.put("/views/slider/main.html","<div>Slider</div>\n\n")}])}(),angular.module("Application").run(["$rootScope","$mdToast","$state",function(n,e,t){n.showToast=function(n){e.show(e.simple().textContent(n).theme("pick-theme").hideDelay(3e3))},n.go=function(n,e){t.go(n,e)}}]),angular.module("Application").config(["$stateProvider","$urlRouterProvider","$httpProvider","$mdThemingProvider",function(n,e,t,o){n.state("login",{url:"/login",onEnter:["$rootScope",function(n){getJSONLocal("user")&&n.go("app.player")}],templateUrl:"/views/login/main.html",controller:"LoginCtrl"}).state("app",{url:"/",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],templateUrl:"/views/main.html",controller:"AppCtrl","abstract":!0}).state("app.normal",{url:"normal",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/normal/main.html",controller:"NormalCtrl"}}}).state("app.slider",{url:"slider",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/slider/main.html",controller:"SliderCtrl"}}}).state("app.player",{url:"player",onEnter:["$rootScope",function(n){getJSONLocal("user")||n.go("login")}],views:{content:{templateUrl:"/views/player/main.html",controller:"PlayerCtrl"}}}),e.otherwise("/login"),t.interceptors.push("AuthInterceptor"),o.theme("default").backgroundPalette("teal",{"default":"500","hue-1":"100","hue-2":"600","hue-3":"A100"}).primaryPalette("lime",{"default":"400","hue-1":"100","hue-2":"600","hue-3":"A100"}).accentPalette("teal",{"default":"500"})}]),angular.module("Application").controller("AppCtrl",["$rootScope","$scope","OauthService",function(n,e,t){e.openMenu=function(n,e){originatorEv=e,n(e)},e.logout=function(){t.logout().Session(function(){deleteLocal("user"),n.go("login")},function(){})}}]),angular.module("Application").controller("LoginCtrl",["$rootScope","$scope","OauthService","RequestService",function(n,e,t,o){e.user={email:"",password:""},e.login=function(){async.waterfall([function(n){var t=emptyOrUndefined(e.user.email),o=emptyOrUndefined(e.user.password);t||o?t?n("Email Empty"):o&&n("Password Empty"):n()},function(n){t.login().Session(e.user,function(e){return e.error?n(e.error):void n(null,e.data)},o.ServerNotFound(n))},function(n,e){t.role().check({role:n.role},function(t){return t.error?e(t.error):void(2==t.data?e(null,n):o.NoRoleAuthorized(e)())},o.ServerNotFound(e))}],function(e,t){return e?n.showToast(e):(saveLocal("user",t),void n.go("app.normal"))})}}]),angular.module("Application").controller("NormalCtrl",function(){}),angular.module("Application").controller("PlayerCtrl",["$scope","$interval",function(n,e){function t(n){o||(requestAnimationFrame(t),TWEEN.update(n))}var o=!1,r={x:0,y:0};new TWEEN.Tween(r).to({x:100,y:100},1e4).onUpdate(function(){var e=this;n.$apply(function(){n.coords={x:e.x,y:e.y},console.log(n.coords)}),console.log()}).onComplete(function(){o=!0}).start();requestAnimationFrame(t)}]),angular.module("Application").controller("SliderCtrl",function(){}),angular.module("Application").factory("ApiService",["$resource","$location",function(n,e){return{env:"prod",prod:{protocol:"https",host:"pickyourday.herokuapp.com",port:"",root:"api"},dev:{protocol:"http",host:"localhost",port:"5000",root:"api"},getApiPath:function(n){var e=this[this.env];return e.protocol+"://"+e.host+(""!==e.port?":"+e.port:"")+"/"+e.root+"/"+n},rest:function(e,t,o){var r=n(this.getApiPath(e),o||{},t||{});return r}}}]),angular.module("Application").factory("AuthInterceptor",["$q","$location",function(n,e){return{request:function(n){n.headers=n.headers||{};var e=getJSONLocal("user"),e=getJSONLocal("user");return!n.headers.Authorization&&e&&(n.headers.Authorization=e.token),n},requestError:function(e){return n.reject(e)},response:function(e){return"ERROR"===e.data.status?n.reject(e):e||n.when(e)},responseError:function(t){return 403===t.status?(console.error("Error de acceso"),localStorage.user="",void e.path("/")):n.reject(t)}}}]),angular.module("Application").factory("OauthService",["ApiService",function(n){return{base:"oauth",login:function(){return n.rest(this.base,{Session:{method:"POST",params:{}}})},logout:function(){return n.rest(this.base+"/logout",{Session:{method:"GET",params:{}}})},role:function(){return n.rest(this.base+"/role/:role",{check:{method:"GET",params:{role:"@role"}}})}}}]),angular.module("Application").factory("RequestService",function(){return{ServerNotFound:ClosureMessage("Server Not Found"),NoRoleAuthorized:ClosureMessage("No Role Authorized")}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvdXRpbHMuanMiLCJhcHBsaWNhdGlvbi5qcyIsInRlbXBsYXRlLWNhY2hlLmpzIiwiY29uZmlnL2Jvb3QuanMiLCJjb25maWcvZW52aXJvbm1lbnQuanMiLCJjb250cm9sbGVycy9hcHBsaWNhdGlvbl9jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvbG9naW5fY29udHJvbGxlci5qcyIsImNvbnRyb2xsZXJzL25vcm1hbF9jb250cm9sbGVyLmpzIiwiY29udHJvbGxlcnMvcGxheWVyX2NvbnRyb2xsZXIuanMiLCJjb250cm9sbGVycy9zbGlkZXJfY29udHJvbGxlci5qcyIsImNvbXBvbmVudHMvc2VydmljZXMvYXBpLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL3NlcnZpY2VzL2ludGVyY2VwdG9yX3NlcnZpY2UuanMiLCJjb21wb25lbnRzL3NlcnZpY2VzL29hdXRoLnNlcnZpY2UuanMiLCJjb21wb25lbnRzL3NlcnZpY2VzL3JlcXVlc3Rfc2VydmljZS5qcyJdLCJuYW1lcyI6WyJzYXZlTG9jYWwiLCJrZXkiLCJkYXRhIiwibG9jYWxTdG9yYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldEpTT05Mb2NhbCIsInJlc3VsdCIsInN0cl9qc29uIiwidW5kZWZpbmVkIiwicGFyc2UiLCJlIiwiZGVsZXRlTG9jYWwiLCJyZW1vdmVJdGVtIiwiQ2xvc3VyZU1lc3NhZ2UiLCJtZXNzYWdlIiwiZm4iLCJlbXB0eU9yVW5kZWZpbmVkIiwidmFsdWUiLCJSYW5kUG9zaXRpb24iLCJ2IiwicmFuZ2UiLCJtaW4iLCJtYXgiLCJ4IiwiY2hhbmNlIiwiZmxvYXRpbmciLCJ5IiwieiIsIlJhbmRDb2xvciIsInJhbmdlQ29sb3IiLCJmaXhlZCIsInIiLCJnIiwiYiIsIlJhbmRTaXplIiwic2l6ZSIsIlJhbmRSb3RhdGlvbiIsIk51bWJlciIsImJvb2wiLCJhbmdsZSIsImludGVnZXIiLCJheGlzIiwiZ2VuZXJhdGUiLCJjb3VudCIsIkFycmF5IiwiYXBwbHkiLCJtYXAiLCJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJHRlbXBsYXRlQ2FjaGUiLCJwdXQiLCIkcm9vdFNjb3BlIiwiJG1kVG9hc3QiLCIkc3RhdGUiLCJzaG93VG9hc3QiLCJtc2ciLCJzaG93Iiwic2ltcGxlIiwidGV4dENvbnRlbnQiLCJ0aGVtZSIsImhpZGVEZWxheSIsImdvIiwic3RhdGUiLCJwYXJhbXMiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIiRodHRwUHJvdmlkZXIiLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJ1cmwiLCJvbkVudGVyIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwiYWJzdHJhY3QiLCJ2aWV3cyIsImNvbnRlbnQiLCJvdGhlcndpc2UiLCJpbnRlcmNlcHRvcnMiLCJwdXNoIiwiYmFja2dyb3VuZFBhbGV0dGUiLCJkZWZhdWx0IiwiaHVlLTEiLCJodWUtMiIsImh1ZS0zIiwicHJpbWFyeVBhbGV0dGUiLCJhY2NlbnRQYWxldHRlIiwiJHNjb3BlIiwiT2F1dGhTZXJ2aWNlIiwib3Blbk1lbnUiLCIkbWRPcGVuTWVudSIsImV2Iiwib3JpZ2luYXRvckV2IiwibG9nb3V0IiwiU2Vzc2lvbiIsIlJlcXVlc3RTZXJ2aWNlIiwidXNlciIsImVtYWlsIiwicGFzc3dvcmQiLCJsb2dpbiIsImFzeW5jIiwid2F0ZXJmYWxsIiwibmV4dCIsImlzRW1haWwiLCJpc1Bhc3N3b3JkIiwicmVzIiwiZXJyb3IiLCJTZXJ2ZXJOb3RGb3VuZCIsInJvbGUiLCJjaGVjayIsIk5vUm9sZUF1dGhvcml6ZWQiLCJlcnIiLCIkaW50ZXJ2YWwiLCJhbmltYXRlIiwidGltZSIsImNvbXBsZXRlZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIlRXRUVOIiwidXBkYXRlIiwiY29vcmRzIiwiVHdlZW4iLCJ0byIsIm9uVXBkYXRlIiwic2VsZiIsInRoaXMiLCIkYXBwbHkiLCJjb25zb2xlIiwibG9nIiwib25Db21wbGV0ZSIsInN0YXJ0IiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsIiRsb2NhdGlvbiIsImVudiIsInByb2QiLCJwcm90b2NvbCIsImhvc3QiLCJwb3J0Iiwicm9vdCIsImRldiIsImdldEFwaVBhdGgiLCJwYXRoIiwiYXBpIiwicmVzdCIsIm1ldGhvZHMiLCJkZWZhdWx0UGFyYW1zIiwicmVzb3VyY2UiLCIkcSIsInJlcXVlc3QiLCJoZWFkZXJzIiwiQXV0aG9yaXphdGlvbiIsInRva2VuIiwicmVxdWVzdEVycm9yIiwicmVqZWN0aW9uIiwicmVqZWN0IiwicmVzcG9uc2UiLCJzdGF0dXMiLCJ3aGVuIiwicmVzcG9uc2VFcnJvciIsIkFwaVNlcnZpY2UiLCJiYXNlIiwibWV0aG9kIl0sIm1hcHBpbmdzIjoiQUFBQSxRQUFBQSxXQUFBQyxFQUFBQyxHQUNBQyxhQUFBRixHQUFBRyxLQUFBQyxVQUFBSCxHQUdBLFFBQUFJLGNBQUFMLEdBRUEsR0FBQU0sR0FBQSxJQUNBLEtBQ0EsR0FBQUMsR0FBQUwsYUFBQUYsRUFFQVEsVUFBQUQsSUFFQUQsRUFBQUgsS0FBQU0sTUFBQUYsSUFHQSxNQUFBRyxJQUlBLE1BQUFKLEdBR0EsUUFBQUssYUFBQVgsR0FDQUUsYUFBQVUsV0FBQVosR0FHQSxRQUFBYSxnQkFBQUMsR0FDQSxNQUFBLFVBQUFDLEdBQ0EsTUFBQSxZQUNBQSxFQUFBRCxLQUtBLFFBQUFFLGtCQUFBQyxHQUNBLE1BQUEsU0FBQUEsR0FBQSxLQUFBQSxFQUlBLFFBQUFDLGNBQUFDLEdBQ0EsR0FBQUMsR0FBQUQsSUFBQUUsSUFBQSxFQUFBQyxJQUFBLEtBQ0FDLEVBQUFDLE9BQUFDLFNBQUFMLEdBQ0FNLEVBQUFGLE9BQUFDLFNBQUFMLEdBQ0FPLEVBQUFILE9BQUFDLFNBQUFMLEVBQ0EsUUFBQUcsRUFBQUcsRUFBQUMsR0FHQSxRQUFBQyxXQUFBVCxHQUNBLEdBQUFVLEdBQUFWLElBQUFFLElBQUEsRUFBQUMsSUFBQSxFQUFBUSxNQUFBLEdBQ0FDLEVBQUFQLE9BQUFDLFNBQUFJLEdBQ0FHLEVBQUFSLE9BQUFDLFNBQUFJLEdB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TUFDQWxFLFNBQUFtRSxPQUFBLE9BQUFqRyxjQUdBNkIsT0FBQSxXQUNBLE1BQUFrRSxHQUFBaEIsS0FBQW5CLEtBQUFvQyxLQUFBLFdBQ0FsRSxTQUFBbUUsT0FBQSxNQUFBakcsY0FHQTRDLEtBQUEsV0FDQSxNQUFBbUQsR0FBQWhCLEtBQUFuQixLQUFBb0MsS0FBQSxlQUNBbkQsT0FBQW9ELE9BQUEsTUFBQWpHLFFBQUE0QyxLQUFBLGlCQ2xCQTdELFFBQUFDLE9BQUEsZUFDQWtGLFFBQUEsaUJBQUEsV0FFQSxPQUVBdkIsZUFBQS9GLGVBQUEsb0JBRUFrRyxpQkFBQWxHLGVBQUEiLCJmaWxlIjoiYnVuZGxlLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHNhdmVMb2NhbChrZXksIGRhdGEpIHtcclxuICAgIGxvY2FsU3RvcmFnZVtrZXldID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldEpTT05Mb2NhbChrZXkpIHtcclxuXHJcbiAgICB2YXIgcmVzdWx0ID0gbnVsbDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgdmFyIHN0cl9qc29uID0gbG9jYWxTdG9yYWdlW2tleV07XHJcblxyXG4gICAgICAgIGlmIChzdHJfanNvbiE9PXVuZGVmaW5lZCkge1xyXG5cclxuICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShzdHJfanNvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZnVuY3Rpb24gZGVsZXRlTG9jYWwoa2V5KSB7XHJcbiAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBDbG9zdXJlTWVzc2FnZShtZXNzYWdlKXtcclxuICAgIHJldHVybiBmdW5jdGlvbihmbil7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIGZuKG1lc3NhZ2UpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG59XHJcblxyXG5mdW5jdGlvbiBlbXB0eU9yVW5kZWZpbmVkKHZhbHVlKXtcclxuICAgIHJldHVybiB2YWx1ZT09dm9pZCAwIHx8IHZhbHVlPT09XCJcIjtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIFJhbmRQb3NpdGlvbih2KSB7XHJcbiAgICB2YXIgcmFuZ2UgPSB2IHx8IHsgbWluOiAwLCBtYXg6IDEwMCB9O1xyXG4gICAgdmFyIHggPSBjaGFuY2UuZmxvYXRpbmcocmFuZ2UpO1xyXG4gICAgdmFyIHkgPSBjaGFuY2UuZmxvYXRpbmcocmFuZ2UpO1xyXG4gICAgdmFyIHogPSBjaGFuY2UuZmxvYXRpbmcocmFuZ2UpO1xyXG4gICAgcmV0dXJuIFt4LCB5LCB6XTtcclxufVxyXG5cclxuZnVuY3Rpb24gUmFuZENvbG9yKHYpIHtcclxuICAgIHZhciByYW5nZUNvbG9yID0gdiB8fCB7IG1pbjogMCwgbWF4OiAxLCBmaXhlZDogMiB9O1xyXG4gICAgdmFyIHIgPSBjaGFuY2UuZmxvYXRpbmcocmFuZ2VDb2xvcik7XHJcbiAgICB2YXIgZyA9IGNoYW5jZS5mbG9hdGluZyhyYW5nZUNvbG9yKTtcclxuICAgIHZhciBiID0gY2hhbmNlLmZsb2F0aW5nKHJhbmdlQ29sb3IpO1xyXG4gICAgcmV0dXJuIFtyLCBnLCBiLCAxXTtcclxufVxyXG5cclxuZnVuY3Rpb24gUmFuZFNpemUodikge1xyXG4gICAgdmFyIHJhbmdlID0gdiB8fCB7IG1pbjogMC4xLCBtYXg6IDIsIGZpeGVkOiAxIH07XHJcbiAgICB2YXIgc2l6ZSA9IGNoYW5jZS5mbG9hdGluZyhyYW5nZSk7XHJcbiAgICByZXR1cm4gW3NpemUsIHNpemUsIHNpemVdO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gUmFuZFJvdGF0aW9uKHYpe1xyXG4gICAgdmFyIHJhbmdlID0gdiB8fCB7IG1pbjogMCwgbWF4OiAzNjB9O1xyXG4gICAgdmFyIHg9TnVtYmVyKGNoYW5jZS5ib29sKCkpO1xyXG4gICAgdmFyIHk9TnVtYmVyKGNoYW5jZS5ib29sKCkpO1xyXG4gICAgdmFyIHo9TnVtYmVyKGNoYW5jZS5ib29sKCkpO1xyXG4gICAgcmV0dXJuICB7XHJcbiAgICAgICAgYW5nbGU6Y2hhbmNlLmludGVnZXIoeyBtaW46IDAsIG1heDogMzYwfSksXHJcbiAgICAgICAgYXhpczpbeCx5LHpdXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBnZW5lcmF0ZShmbikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBjb3VudCA9IGNoYW5jZS5pbnRlZ2VyKHsgbWluOiAwLCBtYXg6IDEwMCB9KTtcclxuICAgICAgICByZXR1cm4gQXJyYXkuYXBwbHkoMCwgQXJyYXkoY291bnQpKS5tYXAoZm4pO1xyXG4gICAgfTtcclxufSIsInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nLCBbJ3VpLnJvdXRlcicsIFwibmdSZXNvdXJjZVwiLCduZ0FuaW1hdGUnLCAnbmdNYXRlcmlhbCddKTsiLCIoZnVuY3Rpb24obW9kdWxlKSB7XG50cnkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nKTtcbn0gY2F0Y2ggKGUpIHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJywgW10pO1xufVxubW9kdWxlLnJ1bihbJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJHRlbXBsYXRlQ2FjaGUpIHtcbiAgJHRlbXBsYXRlQ2FjaGUucHV0KCcvdmlld3MvbWFpbi5odG1sJyxcbiAgICAnXFxuJyArXG4gICAgJzxtZC10b29sYmFyIGNsYXNzPVwibWQtYWNjZW50IG1kLXdoaXRlZnJhbWUtMWRwXCI+XFxuJyArXG4gICAgJyAgICA8ZGl2IGNsYXNzPVwibWQtdG9vbGJhci10b29sc1wiPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPG1kLW1lbnUgZmxleD1cIjVcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWJ1dHRvbiBhcmlhLWxhYmVsPVwiVHlwZSBTdGF0c1wiIGNsYXNzPVwibWQtaWNvbi1idXR0b25cIiBuZy1jbGljaz1cIm9wZW5NZW51KCRtZE9wZW5NZW51LCAkZXZlbnQpXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bWQtaWNvbiBtZC1tZW51LW9yaWdpbiBtZC1mb250LWljb249XCJtZGktY2hhcnQtYXJlYXNwbGluZVwiIGNsYXNzPVwibWRpXCI+PC9tZC1pY29uPlxcbicgK1xuICAgICcgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLW1lbnUtY29udGVudCB3aWR0aD1cIjRcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxtZC1tZW51LWl0ZW0+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiB1aS1zcmVmPVwiYXBwLm5vcm1hbFwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgICAgICA8bWQtaWNvbiBtZC1mb250LWljb249XCJtZGktY2hhcnQtYnViYmxlXCIgY2xhc3M9XCJtZGlcIj48L21kLWljb24+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgICAgIE5vcm1hbFxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDwvbWQtYnV0dG9uPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPC9tZC1tZW51LWl0ZW0+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bWQtbWVudS1pdGVtPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgIDxtZC1idXR0b24gIHVpLXNyZWY9XCJhcHAuc2xpZGVyXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1pY29uIG1kLWZvbnQtaWNvbj1cIm1kaS1jbG9jay1zdGFydFwiIGNsYXNzPVwibWRpXCI+PC9tZC1pY29uPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgICAgICAgICBTbGlkZXJcXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICA8L21kLWJ1dHRvbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDwvbWQtbWVudS1pdGVtPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPG1kLW1lbnUtZGl2aWRlcj48L21kLW1lbnUtZGl2aWRlcj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxtZC1tZW51LWl0ZW0+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPG1kLWJ1dHRvbiAgdWktc3JlZj1cImFwcC5wbGF5ZXJcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgPG1kLWljb24gbWQtZm9udC1pY29uPVwibWRpLXBsYXktYm94LW91dGxpbmVcIiBjbGFzcz1cIm1kaVwiPjwvbWQtaWNvbj5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgICAgICAgICAgUGxheWVyXFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICAgICAgPC9tZC1idXR0b24+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8L21kLW1lbnUtaXRlbT5cXG4nICtcbiAgICAnICAgICAgICAgICAgPC9tZC1tZW51LWNvbnRlbnQ+XFxuJyArXG4gICAgJyAgICAgICAgPC9tZC1tZW51PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8aDI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxzcGFuPlBpY2t5b3VyZGF5IDNEPC9zcGFuPlxcbicgK1xuICAgICcgICAgICAgIDwvaDI+XFxuJyArXG4gICAgJyAgICAgICAgPHNwYW4gZmxleD48L3NwYW4+XFxuJyArXG4gICAgJyAgICAgICAgPG1kLWJ1dHRvbiBhcmlhLWxhYmVsPVwibG9nb3V0XCIgY2xhc3M9XCJtZC1pY29uLWJ1dHRvblwiIHN0eWxlPVwibWFyZ2luLXJpZ2h0OiAwcHg7XCIgbmctY2xpY2s9XCJsb2dvdXQoKVwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8bWQtaWNvbiBtZC1mb250LWljb249XCJtZGktcG93ZXJcIiBjbGFzcz1cIm1kaVwiPjwvbWQtaWNvbj5cXG4nICtcbiAgICAnICAgICAgICA8L21kLWJ1dHRvbj5cXG4nICtcbiAgICAnICAgIDwvZGl2PlxcbicgK1xuICAgICc8L21kLXRvb2xiYXI+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnPGRpdiB1aS12aWV3PVwiY29udGVudFwiPjwvZGl2PicpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnL3ZpZXdzL2xvZ2luL21haW4uaHRtbCcsXG4gICAgJzxkaXYgbGF5b3V0PVwiY29sdW1uXCIgbGF5b3V0LWFsaWduPVwiY2VudGVyIGNlbnRlclwiPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgPG1kLWNhcmQ+XFxuJyArXG4gICAgJyAgICAgICAgPG1kLWNhcmQtdGl0bGU+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1jYXJkLXRpdGxlLXRleHQ+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kLWhlYWRsaW5lXCI+UGlja3lvdXJkYXkgM0Q8L3NwYW4+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICcgICAgICAgICAgICA8L21kLWNhcmQtdGl0bGUtdGV4dD5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgPC9tZC1jYXJkLXRpdGxlPlxcbicgK1xuICAgICcgICAgICAgIDxtZC1jYXJkLWNvbnRlbnQgbGF5b3V0PVwiY29sdW1uXCI+XFxuJyArXG4gICAgJ1xcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz1cIm1kLXByaW1hcnkgbWQtcmFpc2VkIG1kLWh1ZS0yXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgICAgICA8bGFiZWw+RW1haWw8L2xhYmVsPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPGlucHV0IG5nLW1vZGVsPVwidXNlci5lbWFpbFwiIHR5cGU9XCJlbWFpbFwiPlxcbicgK1xuICAgICcgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9XCJtZC1wcmltYXJ5IG1kLXJhaXNlZCBtZC1odWUtMlwiPlxcbicgK1xuICAgICcgICAgICAgICAgICAgICAgPGxhYmVsPlBhc3N3b3JkPC9sYWJlbD5cXG4nICtcbiAgICAnICAgICAgICAgICAgICAgIDxpbnB1dCBuZy1tb2RlbD1cInVzZXIucGFzc3dvcmRcIiB0eXBlPVwicGFzc3dvcmRcIj5cXG4nICtcbiAgICAnICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+XFxuJyArXG4gICAgJyAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+XFxuJyArXG4gICAgJyAgICAgICAgPG1kLWNhcmQtYWN0aW9ucyBsYXlvdXQ9XCJyb3dcIiBsYXlvdXQtYWxpZ249XCJjZW50ZXIgY2VudGVyXCI+XFxuJyArXG4gICAgJyAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJtZC1wcmltYXJ5ICBtZC1yYWlzZWQgbWQtaHVlLTJcIiBuZy1jbGljaz1cImxvZ2luKClcIj5Mb2dpbjwvbWQtYnV0dG9uPlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnICAgICAgICA8L21kLWNhcmQtYWN0aW9ucz5cXG4nICtcbiAgICAnICAgIDwvbWQtY2FyZD5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ1xcbicgK1xuICAgICc8L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJy92aWV3cy9ub3JtYWwvbWFpbi5odG1sJyxcbiAgICAnPGRpdj5Ob3JtYWw8L2Rpdj4nKTtcbn1dKTtcbn0pKCk7XG5cbihmdW5jdGlvbihtb2R1bGUpIHtcbnRyeSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpO1xufSBjYXRjaCAoZSkge1xuICBtb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSgnQXBwbGljYXRpb24nLCBbXSk7XG59XG5tb2R1bGUucnVuKFsnJHRlbXBsYXRlQ2FjaGUnLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkge1xuICAkdGVtcGxhdGVDYWNoZS5wdXQoJy92aWV3cy9wbGF5ZXIvbWFpbi5odG1sJyxcbiAgICAnPGRpdj5QbGF5ZXI8L2Rpdj5cXG4nICtcbiAgICAnXFxuJyArXG4gICAgJ3t7Y29vcmRzLnh9fSwge3tjb29yZHMueX19ICcpO1xufV0pO1xufSkoKTtcblxuKGZ1bmN0aW9uKG1vZHVsZSkge1xudHJ5IHtcbiAgbW9kdWxlID0gYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJyk7XG59IGNhdGNoIChlKSB7XG4gIG1vZHVsZSA9IGFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicsIFtdKTtcbn1cbm1vZHVsZS5ydW4oWyckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7XG4gICR0ZW1wbGF0ZUNhY2hlLnB1dCgnL3ZpZXdzL3NsaWRlci9tYWluLmh0bWwnLFxuICAgICc8ZGl2PlNsaWRlcjwvZGl2PlxcbicgK1xuICAgICdcXG4nICtcbiAgICAnJyk7XG59XSk7XG59KSgpO1xuIiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5ydW4oZnVuY3Rpb24oJHJvb3RTY29wZSwgICRtZFRvYXN0LCAkc3RhdGUpe1xyXG5cclxuICAgICRyb290U2NvcGUuc2hvd1RvYXN0ID0gZnVuY3Rpb24obXNnKSB7XHJcbiAgICAgIFxyXG4gICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNpbXBsZSgpXHJcbiAgICAgICAgICAgIC50ZXh0Q29udGVudChtc2cpXHJcbiAgICAgICAgICAgIC50aGVtZShcInBpY2stdGhlbWVcIilcclxuICAgICAgICAgICAgLmhpZGVEZWxheSgzMDAwKVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG4gICAgXHJcbiAgICAgJHJvb3RTY29wZS5nbyA9IGZ1bmN0aW9uIChzdGF0ZSwgcGFyYW1zKSB7XHJcbiAgICAgICAgJHN0YXRlLmdvKHN0YXRlLCBwYXJhbXMpO1xyXG4gICAgfTtcclxuXHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsICRodHRwUHJvdmlkZXIsICAkbWRUaGVtaW5nUHJvdmlkZXIpe1xyXG5cclxuXHJcbiAgICAkc3RhdGVQcm92aWRlclxyXG4gICAgICAgIC5zdGF0ZShcImxvZ2luXCIsIHtcclxuICAgICAgICB1cmw6IFwiL2xvZ2luXCIsXHJcbiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKCRyb290U2NvcGUpIHtcclxuICAgICAgICAgICAgaWYgKGdldEpTT05Mb2NhbChcInVzZXJcIikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmdvKFwiYXBwLnBsYXllclwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvbG9naW4vbWFpbi5odG1sJyxcclxuICAgICAgICBjb250cm9sbGVyOiAnTG9naW5DdHJsJyAgICAgIFxyXG5cclxuICAgIH0pXHJcbiAgICAgICAgLnN0YXRlKFwiYXBwXCIsIHtcclxuICAgICAgICB1cmw6ICcvJyxcclxuICAgICAgICBvbkVudGVyOiBmdW5jdGlvbiAoJHJvb3RTY29wZSkge1xyXG4gICAgICAgICAgICBpZiAoIWdldEpTT05Mb2NhbChcInVzZXJcIikpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmdvKFwibG9naW5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3ZpZXdzL21haW4uaHRtbCcsXHJcbiAgICAgICAgY29udHJvbGxlcjogJ0FwcEN0cmwnLFxyXG4gICAgICAgIGFic3RyYWN0OnRydWVcclxuXHJcbiAgICB9KVxyXG4gICAgICAgIC5zdGF0ZShcImFwcC5ub3JtYWxcIiwge1xyXG4gICAgICAgIHVybDogJ25vcm1hbCcsXHJcbiAgICAgICAgb25FbnRlcjogZnVuY3Rpb24gKCRyb290U2NvcGUpIHtcclxuICAgICAgICAgICAgaWYgKCFnZXRKU09OTG9jYWwoXCJ1c2VyXCIpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5nbyhcImxvZ2luXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICB2aWV3czoge1xyXG4gICAgICAgICAgICBjb250ZW50OiB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9ub3JtYWwvbWFpbi5odG1sJyxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdOb3JtYWxDdHJsJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAgXHJcbiAgICB9KVxyXG4gICAgXHJcbiAgICAuc3RhdGUoXCJhcHAuc2xpZGVyXCIsIHtcclxuICAgICAgICB1cmw6ICdzbGlkZXInLFxyXG4gICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XHJcbiAgICAgICAgICAgIGlmICghZ2V0SlNPTkxvY2FsKFwidXNlclwiKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuZ28oXCJsb2dpblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3Mvc2xpZGVyL21haW4uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnU2xpZGVyQ3RybCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gIFxyXG4gICAgfSlcclxuICAgICAuc3RhdGUoXCJhcHAucGxheWVyXCIsIHtcclxuICAgICAgICB1cmw6ICdwbGF5ZXInLFxyXG4gICAgICAgIG9uRW50ZXI6IGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XHJcbiAgICAgICAgICAgIGlmICghZ2V0SlNPTkxvY2FsKFwidXNlclwiKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuZ28oXCJsb2dpblwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgY29udGVudDoge1xyXG4gICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvcGxheWVyL21haW4uaHRtbCcsXHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUGxheWVyQ3RybCdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gIFxyXG4gICAgfSlcclxuXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL2xvZ2luXCIpO1xyXG5cclxuICAgICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ0F1dGhJbnRlcmNlcHRvcicpO1xyXG5cclxuICAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcclxuICAgLmJhY2tncm91bmRQYWxldHRlKCd0ZWFsJywge1xyXG4gICAgICAnZGVmYXVsdCc6ICc1MDAnLCAvLyBieSBkZWZhdWx0IHVzZSBzaGFkZSA0MDAgZnJvbSB0aGUgcGluayBwYWxldHRlIGZvciBwcmltYXJ5IGludGVudGlvbnNcclxuICAgICAgJ2h1ZS0xJzogJzEwMCcsIC8vIHVzZSBzaGFkZSAxMDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMTwvY29kZT4gY2xhc3NcclxuICAgICAgJ2h1ZS0yJzogJzYwMCcsIC8vIHVzZSBzaGFkZSA2MDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMjwvY29kZT4gY2xhc3NcclxuICAgICAgJ2h1ZS0zJzogJ0ExMDAnIC8vIHVzZSBzaGFkZSBBMTAwIGZvciB0aGUgPGNvZGU+bWQtaHVlLTM8L2NvZGU+IGNsYXNzXHJcbiAgICB9KVxyXG4gICAgLnByaW1hcnlQYWxldHRlKCdsaW1lJywge1xyXG4gICAgICAnZGVmYXVsdCc6ICc0MDAnLCAvLyBieSBkZWZhdWx0IHVzZSBzaGFkZSA0MDAgZnJvbSB0aGUgcGluayBwYWxldHRlIGZvciBwcmltYXJ5IGludGVudGlvbnNcclxuICAgICAgJ2h1ZS0xJzogJzEwMCcsIC8vIHVzZSBzaGFkZSAxMDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMTwvY29kZT4gY2xhc3NcclxuICAgICAgJ2h1ZS0yJzogJzYwMCcsIC8vIHVzZSBzaGFkZSA2MDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMjwvY29kZT4gY2xhc3NcclxuICAgICAgJ2h1ZS0zJzogJ0ExMDAnIC8vIHVzZSBzaGFkZSBBMTAwIGZvciB0aGUgPGNvZGU+bWQtaHVlLTM8L2NvZGU+IGNsYXNzXHJcbiAgICB9KVxyXG4gICAgLy8gSWYgeW91IHNwZWNpZnkgbGVzcyB0aGFuIGFsbCBvZiB0aGUga2V5cywgaXQgd2lsbCBpbmhlcml0IGZyb20gdGhlXHJcbiAgICAvLyBkZWZhdWx0IHNoYWRlc1xyXG4gICAgLmFjY2VudFBhbGV0dGUoJ3RlYWwnLCB7XHJcbiAgICAgICdkZWZhdWx0JzogJzUwMCcgLy8gdXNlIHNoYWRlIDIwMCBmb3IgZGVmYXVsdCwgYW5kIGtlZXAgYWxsIG90aGVyIHNoYWRlcyB0aGUgc2FtZVxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbn0pO1xyXG5cclxuIiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdBcHBDdHJsJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCBPYXV0aFNlcnZpY2Upe1xyXG4gICAgXHJcbiAgICBcclxuICAgICRzY29wZS5vcGVuTWVudSA9IGZ1bmN0aW9uKCRtZE9wZW5NZW51LCBldikge1xyXG4gICAgICBvcmlnaW5hdG9yRXYgPSBldjtcclxuICAgICAgJG1kT3Blbk1lbnUoZXYpO1xyXG4gICAgfTtcclxuICAgIFxyXG4gICAgXHJcbiAgICAkc2NvcGUubG9nb3V0PWZ1bmN0aW9uKCl7XHJcbiAgICAgICAgT2F1dGhTZXJ2aWNlLiBsb2dvdXQoKS5TZXNzaW9uKGZ1bmN0aW9uKCl7XHJcblx0XHQgZGVsZXRlTG9jYWwoXCJ1c2VyXCIpO1xyXG4gICAgICAgICRyb290U2NvcGUuZ28oXCJsb2dpblwiKTsgICBcclxuXHR9LCBmdW5jdGlvbigpe30pO1xyXG4gICAgfVxyXG4gICAgXHJcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuY29udHJvbGxlcignTG9naW5DdHJsJywgZnVuY3Rpb24oJHJvb3RTY29wZSwgJHNjb3BlLCBPYXV0aFNlcnZpY2UsIFJlcXVlc3RTZXJ2aWNlKXtcclxuICAgIFxyXG5cclxuICAgIFxyXG4gICAgJHNjb3BlLnVzZXIgPSB7ZW1haWw6XCJcIiwgcGFzc3dvcmQ6XCJcIn07XHJcbiAgICAkc2NvcGUubG9naW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgYXN5bmMud2F0ZXJmYWxsKFtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlKG5leHQpe1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzRW1haWw9ZW1wdHlPclVuZGVmaW5lZCgkc2NvcGUudXNlci5lbWFpbCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNQYXNzd29yZD1lbXB0eU9yVW5kZWZpbmVkKCRzY29wZS51c2VyLnBhc3N3b3JkKTtcclxuICAgICAgICAgICAgICAgIGlmKGlzRW1haWwgfHwgaXNQYXNzd29yZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoaXNFbWFpbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoXCJFbWFpbCBFbXB0eVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXNQYXNzd29yZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoXCJQYXNzd29yZCBFbXB0eVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZnVuY3Rpb24gbG9naW4obmV4dCl7XHJcblxyXG4gICAgICAgICAgICAgICAgT2F1dGhTZXJ2aWNlLmxvZ2luKCkuU2Vzc2lvbigkc2NvcGUudXNlciwgZnVuY3Rpb24ocmVzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXMuZXJyb3IpcmV0dXJuIG5leHQocmVzLmVycm9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dChudWxsLCByZXMuZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSwgUmVxdWVzdFNlcnZpY2UuU2VydmVyTm90Rm91bmQobmV4dCkpO1xyXG5cclxuICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrUm9sZSh1c2VyLCBuZXh0KXtcclxuICAgICAgICAgICAgICAgIE9hdXRoU2VydmljZS5yb2xlKCkuY2hlY2soe3JvbGU6dXNlci5yb2xlfSwgZnVuY3Rpb24ocmVzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXMuZXJyb3IpcmV0dXJuIG5leHQocmVzLmVycm9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYocmVzLmRhdGE9PTIpe1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dChudWxsLCB1c2VyKTtcclxuICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVxdWVzdFNlcnZpY2UuTm9Sb2xlQXV0aG9yaXplZChuZXh0KSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9LCBSZXF1ZXN0U2VydmljZS5TZXJ2ZXJOb3RGb3VuZChuZXh0KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICBdLCBmdW5jdGlvbihlcnIsIHVzZXIpe1xyXG4gICAgICAgICAgICBpZihlcnIpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRyb290U2NvcGUuc2hvd1RvYXN0KGVycik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2F2ZUxvY2FsKFwidXNlclwiLCB1c2VyKTtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5nbyhcImFwcC5ub3JtYWxcIik7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgIH07XHJcblxyXG5cclxuICAgIFxyXG4gICAgXHJcbiAgICBcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdOb3JtYWxDdHJsJywgZnVuY3Rpb24oKXtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdQbGF5ZXJDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkaW50ZXJ2YWwpe1xyXG5cclxuXHJcbiAgICB2YXIgY29tcGxldGVkPWZhbHNlO1xyXG4gICAgXHJcbiAgICB2YXIgY29vcmRzID0geyB4OiAwLCB5OiAwIH07XHJcblxyXG4gICAgdmFyIHR3ZWVuID0gbmV3IFRXRUVOLlR3ZWVuKGNvb3JkcylcclxuICAgIC50byh7IHg6IDEwMCwgeTogMTAwIH0sIDEwMDAwKVxyXG4gICAgLm9uVXBkYXRlKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgIHZhciBzZWxmPXRoaXM7XHJcbiAgICAgICAgJHNjb3BlLiRhcHBseShmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgJHNjb3BlLmNvb3Jkcz17eDpzZWxmLngsIHk6c2VsZi55fTtcclxuICAgICAgICAgICAgICAgY29uc29sZS5sb2coICRzY29wZS5jb29yZHMpXHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZygpXHJcbiAgICB9KVxyXG4gICAgLm9uQ29tcGxldGUoZnVuY3Rpb24oKXtcclxuICAgICAgICBjb21wbGV0ZWQ9dHJ1ZTtcclxuICAgIH0pXHJcbiAgICAuc3RhcnQoKVxyXG5cclxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuXHJcbiAgICBmdW5jdGlvbiBhbmltYXRlKHRpbWUpIHtcclxuICAgICAgICBpZighY29tcGxldGVkKXtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xyXG4gICAgICAgICAgICBUV0VFTi51cGRhdGUodGltZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5jb250cm9sbGVyKCdTbGlkZXJDdHJsJywgZnVuY3Rpb24oKXtcclxufSk7IiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5mYWN0b3J5KFwiQXBpU2VydmljZVwiLCBmdW5jdGlvbigkcmVzb3VyY2UsICRsb2NhdGlvbil7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICAvL2VudjokbG9jYXRpb24uYWJzVXJsKCkuaW5kZXhPZihcImxvY2FsaG9zdFwiKT09LTE/XCJwcm9kXCI6XCJkZXZcIixcclxuICAgICAgICBlbnY6XCJwcm9kXCIsXHJcbiAgICAgICAgcHJvZDp7XHJcbiAgICAgICAgICAgIHByb3RvY29sOlwiaHR0cHNcIixcclxuICAgICAgICAgICAgaG9zdDpcInBpY2t5b3VyZGF5Lmhlcm9rdWFwcC5jb21cIixcclxuICAgICAgICAgICAgcG9ydDpcIlwiLFxyXG4gICAgICAgICAgICByb290OlwiYXBpXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRldjp7XHJcbiAgICAgICAgICAgIHByb3RvY29sOlwiaHR0cFwiLFxyXG4gICAgICAgICAgICBob3N0OlwibG9jYWxob3N0XCIsXHJcbiAgICAgICAgICAgIHBvcnQ6XCI1MDAwXCIsXHJcbiAgICAgICAgICAgIHJvb3Q6XCJhcGlcIlxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGdldEFwaVBhdGg6ZnVuY3Rpb24ocGF0aCl7XHJcbiAgICAgICAgICAgIHZhciBhcGk9dGhpc1t0aGlzLmVudl07XHJcbiAgICAgICAgICAgIHJldHVybiBhcGkucHJvdG9jb2wrXCI6Ly9cIithcGkuaG9zdCsoYXBpLnBvcnQhPT1cIlwiPyhcIjpcIithcGkucG9ydCk6XCJcIikrXCIvXCIrYXBpLnJvb3QrXCIvXCIrcGF0aDtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICByZXN0OmZ1bmN0aW9uKHBhdGgsIG1ldGhvZHMsIGRlZmF1bHRQYXJhbXMpe1xyXG4gICAgICAgICAgICB2YXIgcmVzb3VyY2U9JHJlc291cmNlKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRBcGlQYXRoKHBhdGgpLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdFBhcmFtcyB8fCB7fSxcclxuICAgICAgICAgICAgICAgIG1ldGhvZHMgfHwge31cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc291cmNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn0pO1xyXG5cclxuIiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5mYWN0b3J5KFwiQXV0aEludGVyY2VwdG9yXCIsIGZ1bmN0aW9uKCRxLCAkbG9jYXRpb24pe1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICByZXF1ZXN0OiBmdW5jdGlvbihjb25maWcpe1xyXG4gICAgICAgICAgICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHVzZXI9Z2V0SlNPTkxvY2FsKFwidXNlclwiKTtcclxuICAgICAgICAgICAgdmFyIHVzZXI9Z2V0SlNPTkxvY2FsKFwidXNlclwiKTtcclxuICAgICAgICAgICAgaWYgKCFjb25maWcuaGVhZGVycy5BdXRob3JpemF0aW9uICYmIHVzZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbmZpZy5oZWFkZXJzLkF1dGhvcml6YXRpb24gPSB1c2VyLnRva2VuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlcXVlc3RFcnJvcjogZnVuY3Rpb24ocmVqZWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVqZWN0aW9uKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3BvbnNlOiBmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgIGlmKHJlc3BvbnNlLmRhdGEuc3RhdHVzID09PSAnRVJST1InKSB7IC8vRm9yY2UgZXJyb3JcclxuICAgICAgICAgICAgICAgIHJldHVybiAkcS5yZWplY3QocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZSB8fCAkcS53aGVuKHJlc3BvbnNlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlc3BvbnNlRXJyb3I6IGZ1bmN0aW9uKHJlamVjdGlvbil7XHJcbiAgICAgICAgICAgIGlmKHJlamVjdGlvbi5zdGF0dXMgPT09IDQwMykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGUgYWNjZXNvJyk7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UudXNlciA9ICcnO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy8nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gJHEucmVqZWN0KHJlamVjdGlvbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIiwiYW5ndWxhci5tb2R1bGUoJ0FwcGxpY2F0aW9uJylcclxuICAgIC5mYWN0b3J5KFwiT2F1dGhTZXJ2aWNlXCIsIGZ1bmN0aW9uKEFwaVNlcnZpY2Upe1xyXG5cclxuICAgIHJldHVybiB7XHJcblxyXG4gICAgICAgIGJhc2U6XCJvYXV0aFwiLFxyXG4gICAgICAgIGxvZ2luOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLnJlc3QodGhpcy5iYXNlLHtcclxuICAgICAgICAgICAgICAgIFNlc3Npb246e21ldGhvZDpcIlBPU1RcIiwgcGFyYW1zOnt9fVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxvZ291dDpmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gQXBpU2VydmljZS5yZXN0KHRoaXMuYmFzZStcIi9sb2dvdXRcIiwge1xyXG4gICAgICAgICAgICAgICAgU2Vzc2lvbjp7bWV0aG9kOlwiR0VUXCIsIHBhcmFtczp7fX1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByb2xlOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBBcGlTZXJ2aWNlLnJlc3QodGhpcy5iYXNlK1wiL3JvbGUvOnJvbGVcIiwge1xyXG4gICAgICAgICAgICAgICAgICBjaGVjazp7bWV0aG9kOlwiR0VUXCIsIHBhcmFtczp7cm9sZTpcIkByb2xlXCJ9fSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH07XHJcbn0pO1xyXG5cclxuXHJcbiIsImFuZ3VsYXIubW9kdWxlKCdBcHBsaWNhdGlvbicpXHJcbiAgICAuZmFjdG9yeShcIlJlcXVlc3RTZXJ2aWNlXCIsIGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgIFxyXG4gICAgICAgIFNlcnZlck5vdEZvdW5kOiBDbG9zdXJlTWVzc2FnZShcIlNlcnZlciBOb3QgRm91bmRcIiksXHJcblxyXG4gICAgICAgIE5vUm9sZUF1dGhvcml6ZWQ6IENsb3N1cmVNZXNzYWdlKFwiTm8gUm9sZSBBdXRob3JpemVkXCIpLFxyXG4gICAgICAgIFxyXG4gICAgXHJcbiAgICB9O1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
