var __extends=this&&this.__extends||function(t,e){function i(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)},Blaze;!function(t){var e;!function(t){function e(t){for(var e=null,i=["webgl","experimental-webgl","webkit-3d","moz-webgl"],n=0;n<i.length;++n){try{e=t.getContext(i[n])}catch(r){}if(e)break}return null===e?(alert("Could not initialise WebGL"),null):(e.viewportWidth=t.width,e.viewportHeight=t.height,e)}function i(e,i,n,r){var o=e.createBuffer();switch(e.bindBuffer(e.ARRAY_BUFFER,o),r){case t.BUFFER_DRAW.STATIC:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STATIC_DRAW);break;case t.BUFFER_DRAW.DYNAMIC:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.DYNAMIC_DRAW);break;case t.BUFFER_DRAW.STREAM:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STREAM_DRAW);break;default:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STATIC_DRAW)}return e.bindBuffer(e.ARRAY_BUFFER,null),n?(o.itemSize=2,o.numItems=i.length/2):(o.itemSize=3,o.numItems=i.length/3),o}function n(e,i,n){var r=e.createBuffer(e.ELEMENT_ARRAY_BUFFER);switch(e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r),n){case t.BUFFER_DRAW.STATIC:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STATIC_DRAW);break;case t.BUFFER_DRAW.DYNAMIC:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.DYNAMIC_DRAW);break;case t.BUFFER_DRAW.STREAM:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STREAM_DRAW);break;default:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STATIC_DRAW)}return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),r.itemSize=1,r.numItems=i.length,r}function r(t,e){var i=t.createTexture();return t.bindTexture(t.TEXTURE_2D,i),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.bindTexture(t.TEXTURE_2D,null),i}function o(t,e,i){var n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS)?n:(console.log(t.getShaderInfoLog(n)),null)}function a(t,e){var i=o(t,t.FRAGMENT_SHADER,e.fragment),n=o(t,t.VERTEX_SHADER,e.vertex),r=t.createProgram();return t.attachShader(r,n),t.attachShader(r,i),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)||console.log(t.getProgramInfoLog(r)),t.useProgram(r),r}t.getGLContext=e,function(t){t[t.STATIC=0]="STATIC",t[t.STREAM=1]="STREAM",t[t.DYNAMIC=2]="DYNAMIC"}(t.BUFFER_DRAW||(t.BUFFER_DRAW={}));t.BUFFER_DRAW;t.createBuffer=i,t.createIndexBuffer=n,t.createTexture=r,t.createShader=o,t.createProgram=a}(e=t.WebGLUtils||(t.WebGLUtils={}));var i;!function(t){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}function i(t){var i=e()+e();return t?t+i:i}function n(t){return t.map(function(t){return Number.isNaN(t)&&(t=0),t})}function r(t,e){var i=new XMLHttpRequest;i.open("GET",t,!0),i.addEventListener("load",function(){e(i.responseText)}),i.send()}function o(t){var e=t.split(".");return e[e.length-1]}function a(){return(new Date).getTime()}function s(t){return t*Math.PI/180}function u(t,e){for(var i=0,n=1,r=2,o=[],a=0;a<t.length;a++)o[a]=0;for(var a=0;a<e.length;a+=3){var s=[],u=[],f=[];s[i]=t[3*e[a+1]+i]-t[3*e[a]+i],s[n]=t[3*e[a+1]+n]-t[3*e[a]+n],s[r]=t[3*e[a+1]+r]-t[3*e[a]+r],u[i]=t[3*e[a+2]+i]-t[3*e[a+1]+i],u[n]=t[3*e[a+2]+n]-t[3*e[a+1]+n],u[r]=t[3*e[a+2]+r]-t[3*e[a+1]+r],f[i]=s[n]*u[r]-s[r]*u[n],f[n]=s[r]*u[i]-s[i]*u[r],f[r]=s[i]*u[n]-s[n]*u[i];for(var c=0;3>c;c++)o[3*e[a+c]+i]=o[3*e[a+c]+i]+f[i],o[3*e[a+c]+n]=o[3*e[a+c]+n]+f[n],o[3*e[a+c]+r]=o[3*e[a+c]+r]+f[r]}for(var a=0;a<t.length;a+=3){var l=[];l[i]=o[a+i],l[n]=o[a+n],l[r]=o[a+r];var h=Math.sqrt(l[i]*l[i]+l[n]*l[n]+l[r]*l[r]);0==h&&(h=1e-5),l[i]=l[i]/h,l[n]=l[n]/h,l[r]=l[r]/h,o[a+i]=l[i],o[a+n]=l[n],o[a+r]=l[r]}return o}t.s4=e,t.uuid=i,t.normalizeNaN=n,t.load=r,t.getExtension=o,t.nowInMilliseconds=a,t.degToRad=s,t.calculateNormals=u}(i=t.utils||(t.utils={})),function(t){t[t.ORBITING=0]="ORBITING",t[t.TRACKING=1]="TRACKING"}(t.CAMERA_TYPE||(t.CAMERA_TYPE={}));var n=t.CAMERA_TYPE,r=function(){function t(){}return t.setCanvasToContext=function(i,n){var r=e.getGLContext(n);t.setContext(i,r)},t.setContext=function(e,i){t._views[e].context=i},t.getContext=function(e){return t._views[e].context},t.createProgram=function(i,n){var r=t.getContext(i),o=e.createProgram(r,n);t.setProgram(i,o)},t.setProgram=function(e,i){t._views[e].program=i},t.getProgram=function(e){return t._views[e].program},t.createView=function(e){t._views[e]={}},t.setAttributeLocations=function(e,i){var n=t._views[e],r=n.context,o=n.program;n.attribs=i.reduce(function(t,e){return t[e]=r.getAttribLocation(o,e),t},{})},t.getAttrib=function(e,i){return t._views[e].attribs[i]},t.getUniform=function(e,i){return t._views[e].uniforms[i]},t.setUniformLocations=function(e,i){var n=t._views[e],r=n.context,o=n.program;n.uniforms=i.reduce(function(t,e){return t[e]=r.getUniformLocation(o,e),t},{})},t.enableAttrib=function(e,i,n){var r=t.getAttrib(e,i),o=t.getContext(e);o.enableVertexAttribArray(r),n?o.vertexAttribPointer(r,n.size||3,o.FLOAT,n.normalized||!1,n.stride||0,n.offset||0):o.vertexAttribPointer(r,3,o.FLOAT,!1,0,0)},t.disableAttrib=function(e,i){var n=t.getAttrib(e,i),r=t.getContext(e);r.disableVertexAttribArray(n)},t.renderLoop=function(t){setInterval(t,30)},t.addTexture=function(e,i){var n=t._views[e];n.textures=n.textures||[],n.textures.push(i)},t.removeTexture=function(e,i){var n=t._views[e];n.textures=n.textures||[];var r=n.textures.indexOf(i);n.textures.splice(r,1),console.log(n.textures)},t.activeTexture=function(e,i,n){var r=t._views[e],o=r.context,a=(r.program,r.textures.indexOf(i));if(a>-1){o.activeTexture(0===a?o.TEXTURE0:o.TEXTURE0+a),o.bindTexture(o.TEXTURE_2D,n);var s=t.getUniform(e,"uSampler");o.uniform1i(s,a)}},t._views={},t}();t.Ketch=r;var o=function(){function t(t){this._graph_id=t}return Object.defineProperty(t.prototype,"graphID",{get:function(){return this._graph_id},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"gl",{get:function(){return r.getContext(this.graphID)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"program",{get:function(){return r.getProgram(this.graphID)},enumerable:!0,configurable:!0}),t.prototype.getUniform=function(t){return r.getUniform(this.graphID,t)},t}();t.Renderable=o;var a=function(t){function e(e){t.call(this,e)}return __extends(e,t),e.prototype.beginDraw=function(t){},e.prototype.endDraw=function(t){},e}(o);t.Entity=a;var s=function(t){function e(e){t.call(this,e),this._stack=[],this._mvMatrix=mat4.create(),this._pMatrix=mat4.create(),this._nMatrix=mat4.create()}return __extends(e,t),e.prototype.push=function(){var t=mat4.create();mat4.set(this._mvMatrix,t),this._stack.push(t)},e.prototype.pop=function(){if(0==this._stack.length)throw"invalid popMatrix";this._mvMatrix=this._stack.pop()},e.prototype.ModelView=function(){this._camera?this._mvMatrix=this._camera.modelView:mat4.identity(this._mvMatrix)},Object.defineProperty(e.prototype,"mvMatrix",{get:function(){return this._mvMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pMatrix",{get:function(){return this._pMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nMatrix",{get:function(){return this._nMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"MainCamera",{set:function(t){this._camera=t},enumerable:!0,configurable:!0}),e.prototype.Perspective=function(){var t=this.gl;mat4.identity(this._pMatrix),mat4.perspective(45,t.viewportWidth/t.viewportHeight,.1,1e3,this._pMatrix)},e.prototype.Normal=function(){mat4.identity(this._nMatrix),mat4.set(this._mvMatrix,this._nMatrix),mat4.inverse(this._nMatrix),mat4.transpose(this._nMatrix)},e.prototype.init=function(){this.ModelView(),this.Perspective(),this.Normal()},e.prototype.setUp=function(){var t=this.gl;this.Normal();var e=this.getUniform("uMVMatrix");e&&t.uniformMatrix4fv(e,!1,this._mvMatrix);var i=this.getUniform("uPMatrix");i&&t.uniformMatrix4fv(i,!1,this._pMatrix);var n=this.getUniform("uNMatrix");n&&t.uniformMatrix4fv(n,!1,this._nMatrix)},e}(o);t.MatrixStack=s;var u;!function(t){var n=function(t){function n(e){t.call(this,e)}return __extends(n,t),Object.defineProperty(n.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(t){var e=this,n=this,r=i.getExtension(t);i.load(t,function(t){var i;switch(r){case"obj":i=n.parseOBJ(t);break;case"json":i=n.parseJSON(t)}n.createBuffers(i),e._onload&&e._onload()})},enumerable:!0,configurable:!0}),n.prototype.parseJSON=function(t){var e={};try{e=JSON.parse(t)}catch(i){console.log(i)}return e},n.prototype.parseOBJ=function(t){var e={v:[],vn:[],vt:[],iv:[],"in":[],it:[]},i=t.split("\n"),n=i.filter(function(t){return"v"===t[0]}),r=i.filter(function(t){return"f"===t[0]});n.forEach(function(t){var i=t.replace("\r","").split(" "),n=i[0];e[n]=e[n].concat(i.slice(1).filter(function(t){return""!==t}))});var o=[];return r.forEach(function(t){var e=t.replace("\r","").replace("f","").split(" ");o=o.concat(e.slice(1).filter(function(t){return""!==t}))}),o.forEach(function(t){var i=t.split("/");e.iv.push(parseInt(i[0])-1),e["in"].push(parseInt(i[1])-1),e.it.push(parseInt(i[2])-1)}),e},n.prototype.createBuffers=function(t){function n(t){return e.createBuffer(o,t)}function r(t){return e.createIndexBuffer(o,t)}var o=this.gl;_.defaults(t,{v:[],vn:[],vt:[],iv:[],"in":[],it:[]}),t.v.length>0&&(this._vbo=n(t.v)),t.v.length>0&&t.iv.length>0&&(this._nbo=n(i.calculateNormals(t.v,t.iv))),t.vt.length>0&&(this._tbo=e.createBuffer(o,t.vt,!0)),t.iv.length>0&&(this._ivbo=r(t.iv)),t["in"].length>0&&(this._inbo=r(t["in"])),t.it.length>0&&(this._itbo=r(t.it))},Object.defineProperty(n.prototype,"vbo",{get:function(){return this._vbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"nbo",{get:function(){return this._nbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"tbo",{get:function(){return this._tbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"ivbo",{get:function(){return this._ivbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"inbo",{get:function(){return this._inbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"itbo",{get:function(){return this._itbo},enumerable:!0,configurable:!0}),n}(o);t.MeshBuffers=n;var a=function(t){function n(e){t.call(this,e),this._image=new Image,this._oid=i.uuid(this.constructor.name)}return __extends(n,t),Object.defineProperty(n.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(t){this._image.onload=this.loadTextureImage(this._onload),this._image.src=t},enumerable:!0,configurable:!0}),n.prototype.loadTextureImage=function(t){var i=this,n=this;return function(){i._texture=e.createTexture(n.gl,n._image),r.addTexture(n.graphID,n._oid),t&&t()}},Object.defineProperty(n.prototype,"content",{get:function(){return this._texture},enumerable:!0,configurable:!0}),n}(o);t.MeshTexture=a;var s=function(t){function e(e,i,n,r,o){t.call(this,e),this._ambient=i?vec4.create(i):vec4.create(),this._diffuse=n?vec4.create(n):void 0,this._specular=r?vec4.create(r):vec4.create(),this._shininess=o||200}return __extends(e,t),Object.defineProperty(e.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"src",{set:function(t){var e=this,n=this;i.load(t,function(t){var i=n.parse(t);e._ambient=i.Ka,e._diffuse=i.Kd,e._specular=i.Ks,e.shininess=i.Ns,e._onload&&e._onload()})},enumerable:!0,configurable:!0}),e.prototype.parse=function(t){var e={},i=["Ka","Kd","Ks","Ns"],n=t.split("\n");return n.forEach(function(t){var n=t.split(" "),r=n[0];if(i.indexOf(r)>-1)switch(r){case"Ns":e.Ns=Number(n[1]);break;default:var o=n.slice(1).map(function(t){return Number(t)});o.push(1),e[r]=o}}),e},Object.defineProperty(e.prototype,"ambient",{get:function(){return this._ambient},set:function(t){this._ambient=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"diffuse",{get:function(){return this._diffuse},set:function(t){this._diffuse=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"specular",{get:function(){return this._specular},set:function(t){this._specular=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"shininess",{get:function(){return this._shininess},set:function(t){this._shininess=t},enumerable:!0,configurable:!0}),e}(o);t.MeshMaterial=s}(u=t.Resources||(t.Resources={}));var f;!function(t){var e=function(){function t(){}return t.Particle="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform bool uWireframe;\nuniform vec4 uMaterialDiffuse;\nuniform sampler2D uSampler;\n\nbool isBlack(vec4 color){\nreturn color.r==0.0 &&color.g==0.0&&color.b==0.0;\n}\nvoid main(void) { \n     if(uWireframe){\n         gl_FragColor = uMaterialDiffuse;\n        }else{\n    gl_FragColor = texture2D(uSampler, gl_PointCoord);\n    if(gl_FragColor.a < 0.5 || isBlack(gl_FragColor)) discard;\n    }\n}",t.Phong="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform float uShininess;\nuniform vec3 uLightDirection;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\nuniform vec4 uLightSpecular;\n\nuniform bool uWireframe;\n\nuniform vec4 uMaterialAmbient;\nuniform vec4 uMaterialDiffuse;\nuniform vec4 uMaterialSpecular;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec4 vColor;\n\nvoid main(){\n\n\n        if(uWireframe){\n         gl_FragColor = vColor;\n        }else{\n        \n    	\n        vec3 L= normalize(uLightDirection);\n        vec3 N= normalize(vNormal);\n        float lambertTerm=dot(N, -L);\n        \n        vec4 Ia= uLightAmbient*uMaterialAmbient;\n        \n        vec4 Id=vec4(0.0,0.0,0.0,1.0);\n        \n        vec4 Is=vec4(0.0,0.0,0.0,1.0);\n        \n        if(lambertTerm>0.0)\n        {\n            Id=uLightDiffuse*uMaterialDiffuse*lambertTerm;\n            \n            vec3 E= normalize(vEyeVec);\n            vec3 R= reflect(L, N);\n            float specular=pow(max(dot(R,E),0.0), uShininess);\n            Is=uLightSpecular*uMaterialSpecular*specular;\n        }\n        \n        vec4 finalColor=Ia+Id+Is;\n        finalColor.a=1.0;\n    \n        gl_FragColor =finalColor;\n        }\n        \n}\n\n\n",t}();t.Fragment=e;var i=function(){function t(){}return t.Particle="attribute vec3 a_position;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform float uPointSize;\n\nvoid main(void) {\n    gl_Position = uPMatrix * uMVMatrix * vec4(a_position.xyz, 1.0);\n    gl_PointSize = uPointSize;\n}",t.Phong="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec4 vColor;\n\nvoid main(){\n\n    vec4 vertex = uMVMatrix * vec4(a_position, 1.0);\n	\n	\n	 if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }else{\n	\n	vNormal = vec3(uNMatrix * vec4(a_normal, 1.0));\n	vEyeVec=-vec3(vertex.xyz);  \n	\n	}\n	 \n	gl_Position =uPMatrix * vertex;\n\n}\n\n\n",t}();t.Vertex=i}(f=t.Shaders||(t.Shaders={}));var c=function(t){function e(e,i,n,r){t.call(this,e),this._frequency=i,this._interval_id=null,this._callback=r}return __extends(e,t),e.prototype.onFrame=function(){if(e.ElapseTime=i.nowInMilliseconds(),!(e.ElapseTime<5)){for(var t=Math.floor(e.ElapseTime/this._frequency);t>0&&e.Count!=this._times;)this._callback(),t--,e.Count++;e.Count===this._times&&this.stop()}},e.prototype.start=function(){this._intime=i.nowInMilliseconds(),this._interval_id=setInterval(this.onFrame,this._frequency/1e3)},e.prototype.stop=function(){this._interval_id&&clearInterval(this._interval_id)},e.prototype.beginDraw=function(){},e.prototype.endDraw=function(){},e.Count=0,e}(a);t.AnimationEntity=c;var l=function(t){function e(e,i,n,r){t.call(this,e),this._material=null,this._texture=null,this._buffers=null,this._meshfile=i||null,this._materialfile=n||null,this._texturefile=r||null}return __extends(e,t),e.prototype.loadBuffers=function(t,e){this._buffers=new u.MeshBuffers(this.graphID),this._buffers.onload=e,this._buffers.src=t},e.prototype.loadTexture=function(t,e){this._texture=new u.MeshTexture(this.graphID),this._texture.onload=e,this._texture.src=t},Object.defineProperty(e.prototype,"material",{set:function(t){this._material=t},enumerable:!0,configurable:!0}),e.prototype.loadMaterial=function(t,e){this._material=new u.MeshMaterial(this.graphID),this._material.onload=e,this._material.src=t},e.prototype.loadMesh=function(t){var e=this,i=this;async.waterfall([function(t){return i._meshfile?(console.log("Loading Buffers"),void i.loadBuffers(i._meshfile,function(){console.log("Loaded Buffers"),t()})):t()},function(t){return e._texturefile?(console.log("Loading Texture"),void i.loadTexture(i._texturefile,function(){console.log("Loaded Texture"),t()})):t()},function(t){return i._materialfile?(console.log("Loading Material"),void i.loadMaterial(i._materialfile,function(){console.log("Loaded Material"),t()})):t()}],function(e){return e?console.log(e):void(t&&t())})},e.prototype.loadMeshByObject=function(t){this._buffers=new u.MeshBuffers(this.graphID),this._buffers.createBuffers(t)},e.prototype.loadMaterialByObject=function(t){this._material=new u.MeshMaterial(this.graphID),t.ambient&&(this._material.ambient=t.ambient),t.specular&&(this._material.specular=t.specular),t.diffuse&&(this._material.diffuse=t.diffuse),t.shininess&&(this._material.shininess=t.shininess)},e.prototype.setMaterialUniforms=function(){if(this._material){var t=this.gl;if(this._material.ambient){var e=this.getUniform("uMaterialAmbient");e&&t.uniform4fv(e,this._material.ambient)}if(this._material.diffuse){var i=this.getUniform("uMaterialDiffuse");i&&t.uniform4fv(i,this._material.diffuse)}if(this._material.specular){var n=this.getUniform("uMaterialSpecular");n&&t.uniform4fv(n,this._material.specular)}if(this._material.shininess){var r=this.getUniform("uShininess");r&&t.uniform1f(r,this._material.shininess)}}},e.prototype.beginDraw=function(){var t=this.gl;this.setMaterialUniforms(),t.bindBuffer(t.ARRAY_BUFFER,this._buffers.vbo),r.enableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,this._buffers.nbo),r.enableAttrib(this.graphID,"a_normal");var e=this._buffers.ivbo;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e),t.drawElements(t.TRIANGLES,e.numItems,t.UNSIGNED_SHORT,0)},e.prototype.endDraw=function(){var t=this.gl;r.disableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},e}(a);t.MeshEntity=l;var h=function(t){function e(e,i,n,r){t.call(this,e),this._matrix=mat4.create(),this._position=i||vec3.create(),this._size=n||vec3.create([1,1,1]),this._rotation=r||{angle:0,axis:vec3.create()}}return __extends(e,t),e.prototype.identity=function(){mat4.identity(this._matrix)},e.prototype.setMatrix=function(t){this._matrix=t},e.prototype.transpose=function(){mat4.transpose(this._matrix,this._matrix)},Object.defineProperty(e.prototype,"position",{get:function(){return this._position},set:function(t){this._position=t},enumerable:!0,configurable:!0}),e.prototype.setAbsolutePosition=function(t,e,i){this._position=[t,e,i]},e.prototype.translate=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._position,r=vec3.create([t,e,i]);vec3.add(n,r,this._position)},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},set:function(t){this._size=t},enumerable:!0,configurable:!0}),e.prototype.setSize=function(t,e,i){this._size=[t,e,i]},e.prototype.scale=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._size,r=vec3.create([t,e,i]);vec3.add(n,r,this._size)},Object.defineProperty(e.prototype,"rotation",{get:function(){return this._rotation},set:function(t){this._rotation=t},enumerable:!0,configurable:!0}),e.prototype.setRotation=function(t,e){t&&(this._rotation.angle=t),e&&(this._rotation.axis=e)},e.prototype.setAngle=function(t){this._rotation.angle=t},e.prototype.setAxis=function(t){this._rotation.axis=t},e.prototype.rotateAngle=function(t){void 0===t&&(t=0),this._rotation.angle+=t},e.prototype.moveAxis=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._rotation.axis,r=vec3.create([t,e,i]);vec3.add(n,r,this._rotation.axis)},e.prototype.beginDraw=function(t){if(t.push(),t.ModelView(),this._matrix=t.mvMatrix,void 0!=this._position&&mat4.translate(this._matrix,this._position),void 0!=this._size&&mat4.scale(this._matrix,this._size),void 0!=this._rotation){var e=this._rotation.angle*Math.PI/180;mat4.rotate(this._matrix,e,this._rotation.axis)}t.setUp()},e.prototype.endDraw=function(t){t.pop()},e}(a);t.TransformEntity=h;var p=function(t){function e(e,i,n,r,o,a,s){t.call(this,e),this._ambient=i?vec4.create(i):null,this._diffuse=n?vec4.create(n):null,this._position=r?vec4.create(r):null,this._specular=o?vec4.create(o):null,this._direction=a?vec3.create(a):null,this._cutoff=s}return __extends(e,t),Object.defineProperty(e.prototype,"ambient",{get:function(){return this._ambient},set:function(t){this._ambient=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"diffuse",{get:function(){return this._diffuse},set:function(t){this._diffuse=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"specular",{get:function(){return this._specular},set:function(t){this._specular=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._diffuse},set:function(t){this._position=i.normalizeNaN(vec3.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"direction",{get:function(){return this._direction},set:function(t){this._direction=i.normalizeNaN(vec3.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cutOff",{get:function(){return this._cutoff},set:function(t){this._cutoff=t},enumerable:!0,configurable:!0}),e.prototype.beginDraw=function(){var t=this.gl;if(this._ambient){var e=this.getUniform("uLightAmbient");e&&t.uniform4fv(e,this._ambient)}if(this._diffuse){var i=this.getUniform("uLightDiffuse");i&&t.uniform4fv(i,this._diffuse)}if(this._specular){var n=this.getUniform("uLightSpecular");n&&t.uniform4fv(n,this._specular)}if(this._position){var r=this.getUniform("uLightPosition");r&&t.uniform3fv(r,this._position)}if(this._direction){var o=this.getUniform("uLightDirection");o&&t.uniform3fv(o,this._direction)}},e.prototype.endDraw=function(){},e}(a);t.LightEntity=p;var d=function(t){function e(e,i){t.call(this,e),this._value=i}return __extends(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t},enumerable:!0,configurable:!0}),e.prototype.beginDraw=function(){var t=this.gl,e=this.getUniform("uMaterialDiffuse");e&&t.uniform4fv(e,this._value)},e.prototype.endDraw=function(){},e}(a);t.DiffuseEntity=d;var v=function(t){function n(e,i){t.call(this,e),this._pointSize=i||1,this._buffer=null,this._texture_id=""}return __extends(n,t),n.prototype.configure=function(t,n){var o=this.gl;this._buffer=o.createBuffer(),o.bindBuffer(o.ARRAY_BUFFER,this._buffer),o.bufferData(o.ARRAY_BUFFER,new Float32Array(t),o.STATIC_DRAW),o.bindBuffer(o.ARRAY_BUFFER,null),this._numItems=t.length,this._texture_id=i.uuid("Texture"),this._texture=e.createTexture(o,n),r.addTexture(this.graphID,this._texture_id)},n.prototype.update=function(t){var e=this.gl;e.bindBuffer(e.ARRAY_BUFFER,this._buffer),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this._numItems=t.length},Object.defineProperty(n.prototype,"textureID",{get:function(){return this._texture_id},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"pointSize",{set:function(t){this._pointSize=t},enumerable:!0,configurable:!0}),n.prototype.beginDraw=function(){var t=this.gl,e=this.getUniform("uPointSize");e&&t.uniform1f(e,this._pointSize),t.bindBuffer(t.ARRAY_BUFFER,this._buffer),r.enableAttrib(this.graphID,"a_position"),r.activeTexture(this.graphID,this._texture_id,this._texture),t.drawArrays(t.POINTS,0,this._numItems/3)},n.prototype.endDraw=function(){var t=this.gl;r.disableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,null)},n}(a);t.ParticleEntity=v;var b=function(t){function e(e,i){t.call(this,e),this._type=i||n.ORBITING,this._cmatrix=mat4.create(),mat4.identity(this._cmatrix),this._up=vec3.create(),this._right=vec3.create(),this._normal=vec3.create(),this._position=vec3.create(),this._azimuth=0,this._elevation=0,this._steps=0}return __extends(e,t),Object.defineProperty(e.prototype,"type",{set:function(t){this._type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._position},set:function(t){this._position=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"azimuth",{get:function(){return this._azimuth},set:function(t){var e=t-this._azimuth;this.changeAzimuth(e)},enumerable:!0,configurable:!0}),e.prototype.changeAzimuth=function(t){this._azimuth+=t,(this._azimuth>360||this._azimuth<-360)&&(this._azimuth=this._azimuth%360)},Object.defineProperty(e.prototype,"elevation",{get:function(){return this._elevation},set:function(t){var e=t-this._elevation;this.changeElevation(e)},enumerable:!0,configurable:!0}),e.prototype.changeElevation=function(t){this._elevation+=t,(this._elevation>360||this._elevation<-360)&&(this._elevation=this._elevation%360)},Object.defineProperty(e.prototype,"zoom",{get:function(){return this._steps},set:function(t){var e=vec3.create(),i=vec3.create();e=this.position;var r=t-this._steps;vec3.normalize(this._normal,i);var o=vec3.create();this._type===n.TRACKING?(o[0]=e[0]-r*i[0],o[1]=e[1]-r*i[1],o[2]=e[2]-r*i[2]):(o[0]=e[0],o[1]=e[1],o[2]=e[2]-r),this.position=o,this._steps=t},enumerable:!0,configurable:!0}),e.prototype.calculateOrientation=function(){var t=this._cmatrix;mat4.multiplyVec4(t,[1,0,0,0],this._right),mat4.multiplyVec4(t,[0,1,0,0],this._up),mat4.multiplyVec4(t,[0,0,1,0],this._normal)},e.prototype.beginDraw=function(){mat4.identity(this._cmatrix),this.calculateOrientation(),this._type===n.TRACKING?(mat4.translate(this._cmatrix,this._position),mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180)):(mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180),mat4.translate(this._cmatrix,this._position)),this.calculateOrientation(),this._type===n.TRACKING&&mat4.multiplyVec4(m,[0,0,0,1],this._position)},Object.defineProperty(e.prototype,"modelView",{get:function(){var t=mat4.create();return mat4.inverse(this._cmatrix,t),t},enumerable:!0,configurable:!0}),e.prototype.endDraw=function(){},e}(a);t.CameraEntity=b;var g=function(t){function e(e,i){t.call(this,e),i=i||100,this._vertices=[0,0,0,i,0,0,0,0,0,0,i,0,0,0,0,0,0,i],this._indices=[0,1,2,3,4,5],this._colors=[1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1]}return __extends(e,t),e.prototype.init=function(){var t=this.gl;this._vbo=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,this._vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._vertices),t.STATIC_DRAW),this._ibo=t.createBuffer(),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this._ibo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),t.STATIC_DRAW),this._cbo=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,this._cbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._colors),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},e.prototype.beginDraw=function(){var t=this.gl,e=this.getUniform("uWireframe");e&&t.uniform1i(e,!0);var i=this.getUniform("uPerVertexColor");i&&t.uniform1i(i,!0),t.bindBuffer(t.ARRAY_BUFFER,this._vbo),r.enableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,this._cbo),r.enableAttrib(this.graphID,"a_color",{size:4}),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this._ibo),t.drawElements(t.LINES,this._indices.length,t.UNSIGNED_SHORT,0)},e.prototype.endDraw=function(){var t=this.gl,e=this.getUniform("uWireframe");e&&t.uniform1i(e,!1);var i=this.getUniform("uPerVertexColor");i&&t.uniform1i(i,!1),r.disableAttrib(this.graphID,"a_position"),r.disableAttrib(this.graphID,"a_color"),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},e}(a);t.AxisEntity=g;var y=function(t){function e(e,i,n){t.call(this,e),this._dimesions={dim:i||50,lines:n||50}}return __extends(e,t),e.prototype.init=function(){var t=this.gl;this.build(),this._vbo=t.createBuffer(),t.bindBuffer(t.ARRAY_BUFFER,this._vbo),t.bufferData(t.ARRAY_BUFFER,new Float32Array(this._vertices),t.STATIC_DRAW),this._ibo=t.createBuffer(),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this._ibo),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},e.prototype.build=function(){for(var t=2*this._dimesions.dim/this._dimesions.lines,e=[],i=[],n=0;n<=this._dimesions.lines;n++)e[6*n]=-this._dimesions.dim,e[6*n+1]=0,e[6*n+2]=-this._dimesions.dim+n*t,e[6*n+3]=this._dimesions.dim,e[6*n+4]=0,e[6*n+5]=-this._dimesions.dim+n*t,e[6*(this._dimesions.lines+1)+6*n]=-this._dimesions.dim+n*t,e[6*(this._dimesions.lines+1)+6*n+1]=0,e[6*(this._dimesions.lines+1)+6*n+2]=-this._dimesions.dim,e[6*(this._dimesions.lines+1)+6*n+3]=-this._dimesions.dim+n*t,e[6*(this._dimesions.lines+1)+6*n+4]=0,e[6*(this._dimesions.lines+1)+6*n+5]=this._dimesions.dim,i[2*n]=2*n,i[2*n+1]=2*n+1,i[2*(this._dimesions.lines+1)+2*n]=2*(this._dimesions.lines+1)+2*n,i[2*(this._dimesions.lines+1)+2*n+1]=2*(this._dimesions.lines+1)+2*n+1;this._vertices=e,this._indices=i},e.prototype.beginDraw=function(){var t=this.gl,e=this.getUniform("uWireframe");e&&t.uniform1i(e,!0);var i=this.getUniform("uMaterialDiffuse");i&&t.uniform4fv(i,[.7,.7,.7,1]),t.bindBuffer(t.ARRAY_BUFFER,this._vbo),r.enableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this._ibo),t.drawElements(t.LINES,this._indices.length,t.UNSIGNED_SHORT,0)},e.prototype.endDraw=function(){var t=this.gl,e=this.getUniform("uWireframe");e&&t.uniform1i(e,!1),r.disableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},e}(a);t.GridEntity=y;var R=function(){function t(t,e,n){this._parentNode=t,this._parentNode&&this._parentNode.addChildNode(this),this._childNodes=[],this._type=e,this._oid=i.uuid(this._type||this.constructor.name),this._entity=n}return Object.defineProperty(t.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return this._parentNode},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"entity",{get:function(){return this._entity},set:function(t){this._entity=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this._childNodes},enumerable:!0,configurable:!0}),t.prototype.addChildNode=function(t){this._childNodes.push(t)},t.prototype.removeChildNode=function(t){var e=this.indexOf(t);e>-1&&this._childNodes.splice(e,1)},t.prototype.getChildNodeByIndex=function(t){return this._childNodes[t]||void 0},t.prototype.existsChildNode=function(t){return void 0!==this._childNodes[t]},t.prototype["delete"]=function(){this._parentNode.removeChildNode(this)},t.prototype.createChildNode=function(e,i){
return new t(this,e,i)},t.prototype.isRoot=function(){return void 0===this._parentNode},t.prototype.indexOf=function(t){var e=t.oid;return _.findIndex(this._childNodes,function(t){return t.oid===e})},t.prototype.indexInParent=function(){var t=-1;return this.isRoot()||(t=this._parentNode.indexOf(this)),t},t.prototype.hasSibling=function(t){var e=!1;if(!this.isRoot()){var i=this._parentNode.indexOf(this);i>-1&&(t?this._parentNode.getChildNodeByIndex(i-1)&&(e=!0):this._parentNode.getChildNodeByIndex(i+1)&&(e=!0))}return e},t.prototype.nextSibling=function(){var t=null;if(!this.isRoot()&&this.hasSibling()){var e=this._parentNode.indexOf(this);t=this._parentNode.getChildNodeByIndex(e+1)}return t},t.prototype.previousSibling=function(){var t=null;if(!this.isRoot()&&this.hasSibling(!0)){var e=this._parentNode.indexOf(this);t=this._parentNode.getChildNodeByIndex(e-1)}return t},t.prototype.firstChild=function(){return this.getChildNodeByIndex(0)},t.prototype.lastChild=function(){return this.getChildNodeByIndex(this._childNodes.length-1)},t.prototype.removeChildNodes=function(){this._childNodes=[]},t.prototype.draw=function(t){this._entity&&this._entity.beginDraw(t);for(var e=0;e<this._childNodes.length;e++){var i=this._childNodes[e];i.draw(t)}this._entity&&this._entity.endDraw(t)},t}();t.NodeElement=R;var A=function(t){function e(){var e=i.uuid();t.call(this,e),this._oid=e,this._scene=new R(void 0,"Scene"),this._matrixStack=new s(this._oid),this._loaderBuffer=[],this._isDrawing=!1,r.createView(this._oid)}return __extends(e,t),Object.defineProperty(e.prototype,"scene",{get:function(){return this._scene},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isDrawing",{get:function(){return this._isDrawing},enumerable:!0,configurable:!0}),e.prototype.Environment=function(t){var e=this.gl;t=t||[],e.enable(e.DEPTH_TEST),e.depthFunc(e.LEQUAL),e.enable(e.BLEND),e.blendFunc(e.SRC_ALPHA,e.ONE_MINUS_SRC_ALPHA),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,!0),e.clearColor(t[0]||0,t[1]||0,t[2]||0,1),e.clearDepth(1)},e.prototype.draw=function(){var t=this.gl;this._isDrawing=!0,t.viewport(0,0,t.viewportWidth,t.viewportHeight),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),this._scene.draw(this._matrixStack),this._isDrawing=!1},e.prototype.createMainChildNode=function(t,e){return this._scene.createChildNode(t,e)},e.prototype.removeMainChildNode=function(t){this._scene.removeChildNode(t)},Object.defineProperty(e.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),e.prototype.setContext=function(t){r.setCanvasToContext(this.oid,t)},e.prototype.Program=function(t){t=t||"Phong",r.createProgram(this._oid,{fragment:f.Fragment[t],vertex:f.Vertex[t]})},e.prototype.createMesh=function(t){var e=new l(this.oid);return t.mesh&&e.loadMeshByObject(t.mesh),t.material&&e.loadMaterialByObject(t.material),e},e.prototype.createDiffuse=function(t){return new d(this.oid,t)},e.prototype.createMeshByLoader=function(t){var e=new l(this.oid,t.mesh,t.material,t.texture);return this._loaderBuffer.push(e),e},e.prototype.createTransform=function(t,e,i){return new h(this.oid,t,e,i)},e.prototype.createLight=function(t){return new p(this.oid,t.ambient,t.diffuse,t.position,t.specular,t.direction,t.cutoff)},e.prototype.createCamera=function(t){return new b(this.oid,t)},e.prototype.createParticle=function(t){return new v(this.oid,t)},e.prototype.createAxis=function(t){return new g(this.oid,t)},e.prototype.createGrid=function(t,e){return new y(this.oid,t,e)},Object.defineProperty(e.prototype,"MainCamera",{set:function(t){this._matrixStack.MainCamera=t},enumerable:!0,configurable:!0}),e.prototype.removeTexture=function(t){r.removeTexture(this.oid,t)},e.prototype.startLoader=function(t){async.eachSeries(this._loaderBuffer,function(t,e){t.loadMesh(function(){console.log(t),e()})},t)},e.prototype.configure=function(t){var i=this;t=t||{},i.Environment(t.background),i.Program(t.typeShader),r.setAttributeLocations(i._oid,e.ATTRIBUTES),r.setUniformLocations(i._oid,e.UNIFORMS),this._matrixStack.init()},e.prototype.configureWithLoader=function(t){var e=this;e.configure(),e.startLoader(t)},e.UNIFORMS=["uPMatrix","uMVMatrix","uNMatrix","uLightDirection","uLightAmbient","uMaterialAmbient","uLightDiffuse","uMaterialDiffuse","uLightSpecular","uMaterialSpecular","uShininess","uPointSize","uSampler","uWireframe","uPerVertexColor"],e.ATTRIBUTES=["a_position","a_normal","a_color"],e}(o);t.SceneGraph=A}(Blaze||(Blaze={}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsYXplLmpzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsInRoaXMiLCJkIiwiYiIsIl9fIiwiY29uc3RydWN0b3IiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJCbGF6ZSIsIldlYkdMVXRpbHMiLCJnZXRHTENvbnRleHQiLCJjYW52YXMiLCJjdHgiLCJuYW1lcyIsImkiLCJsZW5ndGgiLCJnZXRDb250ZXh0IiwiZSIsImFsZXJ0Iiwidmlld3BvcnRXaWR0aCIsIndpZHRoIiwidmlld3BvcnRIZWlnaHQiLCJoZWlnaHQiLCJjcmVhdGVCdWZmZXIiLCJnbCIsImRhdGEiLCJpczJEIiwidHlwZV9kcmF3IiwiYnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsIkJVRkZFUl9EUkFXIiwiU1RBVElDIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwiRFlOQU1JQyIsIkRZTkFNSUNfRFJBVyIsIlNUUkVBTSIsIlNUUkVBTV9EUkFXIiwiaXRlbVNpemUiLCJudW1JdGVtcyIsImNyZWF0ZUluZGV4QnVmZmVyIiwiaW5kZXhCdWZmZXIiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIlVpbnQxNkFycmF5IiwiY3JlYXRlVGV4dHVyZSIsInRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiTElORUFSIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiY3JlYXRlU2hhZGVyIiwidHlwZSIsInNoYWRlclNvdXJjZSIsInNoYWRlciIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImNvbnNvbGUiLCJsb2ciLCJnZXRTaGFkZXJJbmZvTG9nIiwiY3JlYXRlUHJvZ3JhbSIsInNoYWRlcnMiLCJmcmFnbWVudFNoYWRlciIsIkZSQUdNRU5UX1NIQURFUiIsImZyYWdtZW50IiwidmVydGV4U2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsInZlcnRleCIsInByb2dyYW0iLCJhdHRhY2hTaGFkZXIiLCJsaW5rUHJvZ3JhbSIsImdldFByb2dyYW1QYXJhbWV0ZXIiLCJMSU5LX1NUQVRVUyIsImdldFByb2dyYW1JbmZvTG9nIiwidXNlUHJvZ3JhbSIsInV0aWxzIiwiczQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInV1aWQiLCJuYW1lIiwiaWQiLCJub3JtYWxpemVOYU4iLCJ2ZWMiLCJtYXAiLCJhIiwiTnVtYmVyIiwiaXNOYU4iLCJsb2FkIiwidXJsIiwiY2FsbGJhY2siLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJnZXRFeHRlbnNpb24iLCJzdHIiLCJlbGVtcyIsInNwbGl0Iiwibm93SW5NaWxsaXNlY29uZHMiLCJEYXRlIiwiZ2V0VGltZSIsImRlZ1RvUmFkIiwiUEkiLCJjYWxjdWxhdGVOb3JtYWxzIiwidnMiLCJpbmQiLCJ4IiwieSIsInoiLCJucyIsInYxIiwidjIiLCJub3JtYWwiLCJqIiwibm4iLCJsZW4iLCJzcXJ0IiwiQ0FNRVJBX1RZUEUiLCJLZXRjaCIsInNldENhbnZhc1RvQ29udGV4dCIsImtleSIsImNvbnRleHQiLCJzZXRDb250ZXh0IiwiX3ZpZXdzIiwic2V0UHJvZ3JhbSIsImdldFByb2dyYW0iLCJjcmVhdGVWaWV3Iiwic2V0QXR0cmlidXRlTG9jYXRpb25zIiwiYXR0cmlic19uYW1lcyIsInZpZXciLCJwcmciLCJhdHRyaWJzIiwicmVkdWNlIiwicHJldiIsImF0dHIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImdldEF0dHJpYiIsInZpZXdfa2V5IiwiYXR0cl9rZXkiLCJnZXRVbmlmb3JtIiwidW5pZm9ybV9rZXkiLCJ1bmlmb3JtcyIsInNldFVuaWZvcm1Mb2NhdGlvbnMiLCJ1bmlmb3JtX25hbWVzIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiZW5hYmxlQXR0cmliIiwicG9pbnRlciIsImluZGV4IiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwic2l6ZSIsIkZMT0FUIiwibm9ybWFsaXplZCIsInN0cmlkZSIsIm9mZnNldCIsImRpc2FibGVBdHRyaWIiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJyZW5kZXJMb29wIiwiY2IiLCJzZXRJbnRlcnZhbCIsImFkZFRleHR1cmUiLCJ0ZXh0dXJlX2lkIiwidGV4dHVyZXMiLCJwdXNoIiwicmVtb3ZlVGV4dHVyZSIsImluZGV4T2YiLCJzcGxpY2UiLCJhY3RpdmVUZXh0dXJlIiwiVEVYVFVSRTAiLCJ1U2FtcGxlciIsInVuaWZvcm0xaSIsIlJlbmRlcmFibGUiLCJncmFwaF9pZCIsIl9ncmFwaF9pZCIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImdyYXBoSUQiLCJFbnRpdHkiLCJfc3VwZXIiLCJjYWxsIiwiYmVnaW5EcmF3IiwibWF0cml4U3RhY2siLCJlbmREcmF3IiwiTWF0cml4U3RhY2siLCJfc3RhY2siLCJfbXZNYXRyaXgiLCJtYXQ0IiwiX3BNYXRyaXgiLCJfbk1hdHJpeCIsImNvcHkiLCJzZXQiLCJwb3AiLCJNb2RlbFZpZXciLCJfY2FtZXJhIiwibW9kZWxWaWV3IiwiaWRlbnRpdHkiLCJjYW1lcmEiLCJQZXJzcGVjdGl2ZSIsInBlcnNwZWN0aXZlIiwiTm9ybWFsIiwiaW52ZXJzZSIsInRyYW5zcG9zZSIsImluaXQiLCJzZXRVcCIsIm12TWF0cml4IiwidW5pZm9ybU1hdHJpeDRmdiIsInBNYXRyaXgiLCJuTWF0cml4IiwiUmVzb3VyY2VzIiwiTWVzaEJ1ZmZlcnMiLCJfb25sb2FkIiwic3JjIiwiX3RoaXMiLCJzZWxmIiwiZXh0Iiwib2JqIiwicGFyc2VPQkoiLCJwYXJzZUpTT04iLCJjcmVhdGVCdWZmZXJzIiwiSlNPTiIsInBhcnNlIiwidiIsInZuIiwidnQiLCJpdiIsImluIiwiaXQiLCJsaW5lcyIsImZpbHRlciIsImZvckVhY2giLCJpdGVtIiwicmVwbGFjZSIsImNvbmNhdCIsInNsaWNlIiwidGVtcEluZGV4IiwicGFyc2VJbnQiLCJfIiwiZGVmYXVsdHMiLCJfdmJvIiwiX25ibyIsIl90Ym8iLCJfaXZibyIsIl9pbmJvIiwiX2l0Ym8iLCJNZXNoVGV4dHVyZSIsIl9pbWFnZSIsIkltYWdlIiwiX29pZCIsImZpbGVuYW1lIiwib25sb2FkIiwibG9hZFRleHR1cmVJbWFnZSIsIl90ZXh0dXJlIiwiTWVzaE1hdGVyaWFsIiwiYW1iaWVudCIsImRpZmZ1c2UiLCJzcGVjdWxhciIsInNoaW5pbmVzcyIsIl9hbWJpZW50IiwidmVjNCIsIl9kaWZmdXNlIiwiX3NwZWN1bGFyIiwiX3NoaW5pbmVzcyIsInRlbXAiLCJLYSIsIktkIiwiS3MiLCJOcyIsImtleXMiLCJsaW5lIiwiU2hhZGVycyIsIkZyYWdtZW50IiwiUGFydGljbGUiLCJQaG9uZyIsIlZlcnRleCIsIkFuaW1hdGlvbkVudGl0eSIsImZyZXF1ZW5jeSIsInRpbWVzIiwiX2ZyZXF1ZW5jeSIsIl9pbnRlcnZhbF9pZCIsIl9jYWxsYmFjayIsIm9uRnJhbWUiLCJFbGFwc2VUaW1lIiwic3RlcHMiLCJDb3VudCIsIl90aW1lcyIsInN0b3AiLCJzdGFydCIsIl9pbnRpbWUiLCJjbGVhckludGVydmFsIiwiTWVzaEVudGl0eSIsIm1lc2hmaWxlIiwibWF0ZXJpYWxmaWxlIiwidGV4dHVyZWZpbGUiLCJfbWF0ZXJpYWwiLCJfYnVmZmVycyIsIl9tZXNoZmlsZSIsIl9tYXRlcmlhbGZpbGUiLCJfdGV4dHVyZWZpbGUiLCJsb2FkQnVmZmVycyIsImxvYWRUZXh0dXJlIiwibG9hZE1hdGVyaWFsIiwibG9hZE1lc2giLCJhc3luYyIsIndhdGVyZmFsbCIsIm5leHQiLCJlcnIiLCJsb2FkTWVzaEJ5T2JqZWN0IiwibG9hZE1hdGVyaWFsQnlPYmplY3QiLCJzZXRNYXRlcmlhbFVuaWZvcm1zIiwidU1hdGVyaWFsQW1iaWVudCIsInVuaWZvcm00ZnYiLCJ1TWF0ZXJpYWxEaWZmdXNlIiwidU1hdGVyaWFsU3BlY3VsYXIiLCJ1U2hpbmluZXNzIiwidW5pZm9ybTFmIiwidmJvIiwibmJvIiwiaXZibyIsImRyYXdFbGVtZW50cyIsIlRSSUFOR0xFUyIsIlVOU0lHTkVEX1NIT1JUIiwiVHJhbnNmb3JtRW50aXR5IiwicG9zaXRpb24iLCJyb3RhdGlvbiIsIl9tYXRyaXgiLCJfcG9zaXRpb24iLCJ2ZWMzIiwiX3NpemUiLCJfcm90YXRpb24iLCJhbmdsZSIsImF4aXMiLCJzZXRNYXRyaXgiLCJuZXdfbWF0cml4Iiwic2V0QWJzb2x1dGVQb3NpdGlvbiIsInRyYW5zbGF0ZSIsIm9wZXJhbmQxIiwib3BlcmFuZDIiLCJhZGQiLCJzZXRTaXplIiwic2NhbGUiLCJzZXRSb3RhdGlvbiIsInNldEFuZ2xlIiwic2V0QXhpcyIsInJvdGF0ZUFuZ2xlIiwibW92ZUF4aXMiLCJyYWQiLCJyb3RhdGUiLCJMaWdodEVudGl0eSIsImRpcmVjdGlvbiIsImN1dG9mZiIsIl9kaXJlY3Rpb24iLCJfY3V0b2ZmIiwidUxpZ2h0QW1iaWVudCIsInVMaWdodERpZmZ1c2UiLCJ1TGlnaHRTcGVjdWxhciIsInVMaWdodFBvc2l0aW9uIiwidW5pZm9ybTNmdiIsInVEaXJlY3Rpb24iLCJEaWZmdXNlRW50aXR5IiwiX3ZhbHVlIiwiUGFydGljbGVFbnRpdHkiLCJwb2ludFNpemUiLCJfcG9pbnRTaXplIiwiX2J1ZmZlciIsIl90ZXh0dXJlX2lkIiwiY29uZmlndXJlIiwiZGF0YV9tZXNoIiwiZGF0YV90ZXh0dXJlIiwiX251bUl0ZW1zIiwidXBkYXRlIiwidVBvaW50U2l6ZSIsImRyYXdBcnJheXMiLCJQT0lOVFMiLCJDYW1lcmFFbnRpdHkiLCJfdHlwZSIsIk9SQklUSU5HIiwiX2NtYXRyaXgiLCJfdXAiLCJfcmlnaHQiLCJfbm9ybWFsIiwiX2F6aW11dGgiLCJfZWxldmF0aW9uIiwiX3N0ZXBzIiwicG9zIiwiYXoiLCJ0ZW1wX2F6IiwiY2hhbmdlQXppbXV0aCIsImVsIiwidGVtcF9lbCIsImNoYW5nZUVsZXZhdGlvbiIsIm4iLCJzdGVwIiwibm9ybWFsaXplIiwibmV3X3Bvc2l0aW9uIiwiVFJBQ0tJTkciLCJjYWxjdWxhdGVPcmllbnRhdGlvbiIsIm0iLCJtdWx0aXBseVZlYzQiLCJyb3RhdGVZIiwicm90YXRlWCIsIkF4aXNFbnRpdHkiLCJfdmVydGljZXMiLCJfaW5kaWNlcyIsIl9jb2xvcnMiLCJfaWJvIiwiX2NibyIsInVXaXJlZnJhbWUiLCJ1UGVyVmVydGV4Q29sb3IiLCJMSU5FUyIsIkdyaWRFbnRpdHkiLCJfZGltZXNpb25zIiwiZGltIiwiYnVpbGQiLCJpbmMiLCJsIiwiTm9kZUVsZW1lbnQiLCJwYXJlbnQiLCJlbnRpdHkiLCJfcGFyZW50Tm9kZSIsImFkZENoaWxkTm9kZSIsIl9jaGlsZE5vZGVzIiwiX2VudGl0eSIsImNoaWxkIiwicmVtb3ZlQ2hpbGROb2RlIiwiZ2V0Q2hpbGROb2RlQnlJbmRleCIsImV4aXN0c0NoaWxkTm9kZSIsImNyZWF0ZUNoaWxkTm9kZSIsImlzUm9vdCIsIm9pZCIsImZpbmRJbmRleCIsInMiLCJpbmRleEluUGFyZW50IiwiaGFzU2libGluZyIsIl9oYXZlIiwibmV4dFNpYmxpbmciLCJzaWJsaW5nIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsInJlbW92ZUNoaWxkTm9kZXMiLCJkcmF3IiwiU2NlbmVHcmFwaCIsIl9zY2VuZSIsIl9tYXRyaXhTdGFjayIsIl9sb2FkZXJCdWZmZXIiLCJfaXNEcmF3aW5nIiwiRW52aXJvbm1lbnQiLCJlbmFibGUiLCJERVBUSF9URVNUIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwiQkxFTkQiLCJibGVuZEZ1bmMiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiY2xlYXJDb2xvciIsImNsZWFyRGVwdGgiLCJ2aWV3cG9ydCIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsIkRFUFRIX0JVRkZFUl9CSVQiLCJjcmVhdGVNYWluQ2hpbGROb2RlIiwicmVtb3ZlTWFpbkNoaWxkTm9kZSIsIm5vZGUiLCJQcm9ncmFtIiwiY3JlYXRlTWVzaCIsImNvbmZpZyIsIm1lc2hFbnRpdHkiLCJtZXNoIiwibWF0ZXJpYWwiLCJjcmVhdGVEaWZmdXNlIiwiY3JlYXRlTWVzaEJ5TG9hZGVyIiwiY3JlYXRlVHJhbnNmb3JtIiwiY3JlYXRlTGlnaHQiLCJjcmVhdGVDYW1lcmEiLCJjcmVhdGVQYXJ0aWNsZSIsImNyZWF0ZUF4aXMiLCJjcmVhdGVHcmlkIiwiTWFpbkNhbWVyYSIsInN0YXJ0TG9hZGVyIiwiZWFjaFNlcmllcyIsImJhY2tncm91bmQiLCJ0eXBlU2hhZGVyIiwiQVRUUklCVVRFUyIsIlVOSUZPUk1TIiwiY29uZmlndXJlV2l0aExvYWRlciJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBSUEsV0FBYUMsTUFBUUEsS0FBS0QsV0FBYyxTQUFVRSxFQUFHQyxHQUVyRCxRQUFTQyxLQUFPSCxLQUFLSSxZQUFjSCxFQURuQyxJQUFLLEdBQUlJLEtBQUtILEdBQU9BLEVBQUVJLGVBQWVELEtBQUlKLEVBQUVJLEdBQUtILEVBQUVHLEdBRW5ESixHQUFFTSxVQUFrQixPQUFOTCxFQUFhTSxPQUFPQyxPQUFPUCxJQUFNQyxFQUFHSSxVQUFZTCxFQUFFSyxVQUFXLEdBQUlKLEtBRS9FTyxPQUNKLFNBQVdBLEdBQ1AsR0FBSUMsSUFDSixTQUFXQSxHQUNQLFFBQVNDLEdBQWFDLEdBR2xCLElBQUssR0FGREMsR0FBTSxLQUNOQyxHQUFTLFFBQVMscUJBQXNCLFlBQWEsYUFDaERDLEVBQUksRUFBR0EsRUFBSUQsRUFBTUUsU0FBVUQsRUFBRyxDQUNuQyxJQUNJRixFQUFNRCxFQUFPSyxXQUFXSCxFQUFNQyxJQUVsQyxNQUFPRyxJQUNQLEdBQUlMLEVBQ0EsTUFHUixNQUFZLFFBQVJBLEdBQ0FNLE1BQU0sOEJBQ0MsT0FHUE4sRUFB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LCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59O1xyXG52YXIgQmxhemU7XHJcbihmdW5jdGlvbiAoQmxhemUpIHtcclxuICAgIHZhciBXZWJHTFV0aWxzO1xyXG4gICAgKGZ1bmN0aW9uIChXZWJHTFV0aWxzKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0R0xDb250ZXh0KGNhbnZhcykge1xyXG4gICAgICAgICAgICB2YXIgY3R4ID0gbnVsbDtcclxuICAgICAgICAgICAgdmFyIG5hbWVzID0gW1wid2ViZ2xcIiwgXCJleHBlcmltZW50YWwtd2ViZ2xcIiwgXCJ3ZWJraXQtM2RcIiwgXCJtb3otd2ViZ2xcIl07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4ID0gY2FudmFzLmdldENvbnRleHQobmFtZXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGN0eCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdHggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KFwiQ291bGQgbm90IGluaXRpYWxpc2UgV2ViR0xcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN0eC52aWV3cG9ydFdpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgY3R4LnZpZXdwb3J0SGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjdHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViR0xVdGlscy5nZXRHTENvbnRleHQgPSBnZXRHTENvbnRleHQ7XHJcbiAgICAgICAgKGZ1bmN0aW9uIChCVUZGRVJfRFJBVykge1xyXG4gICAgICAgICAgICBCVUZGRVJfRFJBV1tCVUZGRVJfRFJBV1tcIlNUQVRJQ1wiXSA9IDBdID0gXCJTVEFUSUNcIjtcclxuICAgICAgICAgICAgQlVGRkVSX0RSQVdbQlVGRkVSX0RSQVdbXCJTVFJFQU1cIl0gPSAxXSA9IFwiU1RSRUFNXCI7XHJcbiAgICAgICAgICAgIEJVRkZFUl9EUkFXW0JVRkZFUl9EUkFXW1wiRFlOQU1JQ1wiXSA9IDJdID0gXCJEWU5BTUlDXCI7XHJcbiAgICAgICAgfSkoV2ViR0xVdGlscy5CVUZGRVJfRFJBVyB8fCAoV2ViR0xVdGlscy5CVUZGRVJfRFJBVyA9IHt9KSk7XHJcbiAgICAgICAgdmFyIEJVRkZFUl9EUkFXID0gV2ViR0xVdGlscy5CVUZGRVJfRFJBVztcclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVCdWZmZXIoZ2wsIGRhdGEsIGlzMkQsIHR5cGVfZHJhdykge1xyXG4gICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVfZHJhdykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXLlNUQVRJQzpcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShkYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXLkRZTkFNSUM6XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoZGF0YSksIGdsLkRZTkFNSUNfRFJBVyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFdlYkdMVXRpbHMuQlVGRkVSX0RSQVcuU1RSRUFNOlxyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KGRhdGEpLCBnbC5TVFJFQU1fRFJBVyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShkYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgaWYgKGlzMkQpIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5pdGVtU2l6ZSA9IDI7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIubnVtSXRlbXMgPSBkYXRhLmxlbmd0aCAvIDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIuaXRlbVNpemUgPSAzO1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyLm51bUl0ZW1zID0gZGF0YS5sZW5ndGggLyAzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBidWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdlYkdMVXRpbHMuY3JlYXRlQnVmZmVyID0gY3JlYXRlQnVmZmVyO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUluZGV4QnVmZmVyKGdsLCBkYXRhLCB0eXBlX2RyYXcpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4QnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgaW5kZXhCdWZmZXIpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVfZHJhdykge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXLlNUQVRJQzpcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkoZGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgV2ViR0xVdGlscy5CVUZGRVJfRFJBVy5EWU5BTUlDOlxyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheShkYXRhKSwgZ2wuRFlOQU1JQ19EUkFXKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgV2ViR0xVdGlscy5CVUZGRVJfRFJBVy5TVFJFQU06XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KGRhdGEpLCBnbC5TVFJFQU1fRFJBVyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkoZGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgaW5kZXhCdWZmZXIuaXRlbVNpemUgPSAxO1xyXG4gICAgICAgICAgICBpbmRleEJ1ZmZlci5udW1JdGVtcyA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhCdWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdlYkdMVXRpbHMuY3JlYXRlSW5kZXhCdWZmZXIgPSBjcmVhdGVJbmRleEJ1ZmZlcjtcclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVUZXh0dXJlKGdsLCBkYXRhKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcclxuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBkYXRhKTtcclxuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XHJcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdlYkdMVXRpbHMuY3JlYXRlVGV4dHVyZSA9IGNyZWF0ZVRleHR1cmU7XHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlU2hhZGVyKGdsLCB0eXBlLCBzaGFkZXJTb3VyY2UpIHtcclxuICAgICAgICAgICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgICAgICAgICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcclxuICAgICAgICAgICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG4gICAgICAgICAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzaGFkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdlYkdMVXRpbHMuY3JlYXRlU2hhZGVyID0gY3JlYXRlU2hhZGVyO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW0oZ2wsIHNoYWRlcnMpIHtcclxuICAgICAgICAgICAgdmFyIGZyYWdtZW50U2hhZGVyID0gY3JlYXRlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNoYWRlcnMuZnJhZ21lbnQpO1xyXG4gICAgICAgICAgICB2YXIgdmVydGV4U2hhZGVyID0gY3JlYXRlU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzaGFkZXJzLnZlcnRleCk7XHJcbiAgICAgICAgICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgICAgICAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcclxuICAgICAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICAgICAgICAgICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XHJcbiAgICAgICAgICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKSk7XHJcbiAgICAgICAgICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9ncmFtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBXZWJHTFV0aWxzLmNyZWF0ZVByb2dyYW0gPSBjcmVhdGVQcm9ncmFtO1xyXG4gICAgfSkoV2ViR0xVdGlscyA9IEJsYXplLldlYkdMVXRpbHMgfHwgKEJsYXplLldlYkdMVXRpbHMgPSB7fSkpO1xyXG4gICAgdmFyIHV0aWxzO1xyXG4gICAgKGZ1bmN0aW9uICh1dGlscykge1xyXG4gICAgICAgIGZ1bmN0aW9uIHM0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcclxuICAgICAgICAgICAgICAgIC50b1N0cmluZygxNilcclxuICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHV0aWxzLnM0ID0gczQ7XHJcbiAgICAgICAgZnVuY3Rpb24gdXVpZChuYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHM0KCkgKyBzNCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZSA/IG5hbWUgKyBpZCA6IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy51dWlkID0gdXVpZDtcclxuICAgICAgICBmdW5jdGlvbiBub3JtYWxpemVOYU4odmVjKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2ZWMubWFwKGZ1bmN0aW9uIChhKSB7IGlmIChOdW1iZXIuaXNOYU4oYSkpXHJcbiAgICAgICAgICAgICAgICBhID0gMDsgcmV0dXJuIGE7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5ub3JtYWxpemVOYU4gPSBub3JtYWxpemVOYU47XHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZCh1cmwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgdXJsLCB0cnVlKTtcclxuICAgICAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHV0aWxzLmxvYWQgPSBsb2FkO1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEV4dGVuc2lvbihzdHIpIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1zID0gc3RyLnNwbGl0KFwiLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1zW2VsZW1zLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5nZXRFeHRlbnNpb24gPSBnZXRFeHRlbnNpb247XHJcbiAgICAgICAgZnVuY3Rpb24gbm93SW5NaWxsaXNlY29uZHMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5ub3dJbk1pbGxpc2Vjb25kcyA9IG5vd0luTWlsbGlzZWNvbmRzO1xyXG4gICAgICAgIGZ1bmN0aW9uIGRlZ1RvUmFkKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5kZWdUb1JhZCA9IGRlZ1RvUmFkO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU5vcm1hbHModnMsIGluZCkge1xyXG4gICAgICAgICAgICB2YXIgeCA9IDA7XHJcbiAgICAgICAgICAgIHZhciB5ID0gMTtcclxuICAgICAgICAgICAgdmFyIHogPSAyO1xyXG4gICAgICAgICAgICB2YXIgbnMgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbnNbaV0gPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmQubGVuZ3RoOyBpID0gaSArIDMpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2MSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHYyID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsID0gW107XHJcbiAgICAgICAgICAgICAgICAvL3AxIC0gcDBcclxuICAgICAgICAgICAgICAgIHYxW3hdID0gdnNbMyAqIGluZFtpICsgMV0gKyB4XSAtIHZzWzMgKiBpbmRbaV0gKyB4XTtcclxuICAgICAgICAgICAgICAgIHYxW3ldID0gdnNbMyAqIGluZFtpICsgMV0gKyB5XSAtIHZzWzMgKiBpbmRbaV0gKyB5XTtcclxuICAgICAgICAgICAgICAgIHYxW3pdID0gdnNbMyAqIGluZFtpICsgMV0gKyB6XSAtIHZzWzMgKiBpbmRbaV0gKyB6XTtcclxuICAgICAgICAgICAgICAgIC8vIHAwIC0gcDFcclxuICAgICAgICAgICAgICAgIHYyW3hdID0gdnNbMyAqIGluZFtpICsgMl0gKyB4XSAtIHZzWzMgKiBpbmRbaSArIDFdICsgeF07XHJcbiAgICAgICAgICAgICAgICB2Mlt5XSA9IHZzWzMgKiBpbmRbaSArIDJdICsgeV0gLSB2c1szICogaW5kW2kgKyAxXSArIHldO1xyXG4gICAgICAgICAgICAgICAgdjJbel0gPSB2c1szICogaW5kW2kgKyAyXSArIHpdIC0gdnNbMyAqIGluZFtpICsgMV0gKyB6XTtcclxuICAgICAgICAgICAgICAgIC8vcDIgLSBwMVxyXG4gICAgICAgICAgICAgICAgLy8gdjFbeF0gPSB2c1szKmluZFtpKzJdK3hdIC0gdnNbMyppbmRbaSsxXSt4XTtcclxuICAgICAgICAgICAgICAgIC8vIHYxW3ldID0gdnNbMyppbmRbaSsyXSt5XSAtIHZzWzMqaW5kW2krMV0reV07XHJcbiAgICAgICAgICAgICAgICAvLyB2MVt6XSA9IHZzWzMqaW5kW2krMl0rel0gLSB2c1szKmluZFtpKzFdK3pdO1xyXG4gICAgICAgICAgICAgICAgLy8gcDAgLSBwMVxyXG4gICAgICAgICAgICAgICAgLy8gdjJbeF0gPSB2c1szKmluZFtpXSt4XSAtIHZzWzMqaW5kW2krMV0reF07XHJcbiAgICAgICAgICAgICAgICAvLyB2Mlt5XSA9IHZzWzMqaW5kW2ldK3ldIC0gdnNbMyppbmRbaSsxXSt5XTtcclxuICAgICAgICAgICAgICAgIC8vIHYyW3pdID0gdnNbMyppbmRbaV0rel0gLSB2c1szKmluZFtpKzFdK3pdO1xyXG4gICAgICAgICAgICAgICAgLy9jcm9zcyBwcm9kdWN0IGJ5IFNhcnJ1cyBSdWxlXHJcbiAgICAgICAgICAgICAgICBub3JtYWxbeF0gPSB2MVt5XSAqIHYyW3pdIC0gdjFbel0gKiB2Mlt5XTtcclxuICAgICAgICAgICAgICAgIG5vcm1hbFt5XSA9IHYxW3pdICogdjJbeF0gLSB2MVt4XSAqIHYyW3pdO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsW3pdID0gdjFbeF0gKiB2Mlt5XSAtIHYxW3ldICogdjJbeF07XHJcbiAgICAgICAgICAgICAgICAvLyBuc1szKmluZFtpXSt4XSArPSBub3JtYWxbeF07XHJcbiAgICAgICAgICAgICAgICAvLyBuc1szKmluZFtpXSt5XSArPSBub3JtYWxbeV07XHJcbiAgICAgICAgICAgICAgICAvLyBuc1szKmluZFtpXSt6XSArPSBub3JtYWxbel07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDM7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zWzMgKiBpbmRbaSArIGpdICsgeF0gPSBuc1szICogaW5kW2kgKyBqXSArIHhdICsgbm9ybWFsW3hdO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zWzMgKiBpbmRbaSArIGpdICsgeV0gPSBuc1szICogaW5kW2kgKyBqXSArIHldICsgbm9ybWFsW3ldO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zWzMgKiBpbmRbaSArIGpdICsgel0gPSBuc1szICogaW5kW2kgKyBqXSArIHpdICsgbm9ybWFsW3pdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vbm9ybWFsaXplIHRoZSByZXN1bHRcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2cy5sZW5ndGg7IGkgPSBpICsgMykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5uID0gW107XHJcbiAgICAgICAgICAgICAgICBublt4XSA9IG5zW2kgKyB4XTtcclxuICAgICAgICAgICAgICAgIG5uW3ldID0gbnNbaSArIHldO1xyXG4gICAgICAgICAgICAgICAgbm5bel0gPSBuc1tpICsgel07XHJcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gTWF0aC5zcXJ0KChublt4XSAqIG5uW3hdKSArIChublt5XSAqIG5uW3ldKSArIChublt6XSAqIG5uW3pdKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgbGVuID0gMC4wMDAwMTtcclxuICAgICAgICAgICAgICAgIG5uW3hdID0gbm5beF0gLyBsZW47XHJcbiAgICAgICAgICAgICAgICBublt5XSA9IG5uW3ldIC8gbGVuO1xyXG4gICAgICAgICAgICAgICAgbm5bel0gPSBublt6XSAvIGxlbjtcclxuICAgICAgICAgICAgICAgIG5zW2kgKyB4XSA9IG5uW3hdO1xyXG4gICAgICAgICAgICAgICAgbnNbaSArIHldID0gbm5beV07XHJcbiAgICAgICAgICAgICAgICBuc1tpICsgel0gPSBublt6XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHV0aWxzLmNhbGN1bGF0ZU5vcm1hbHMgPSBjYWxjdWxhdGVOb3JtYWxzO1xyXG4gICAgfSkodXRpbHMgPSBCbGF6ZS51dGlscyB8fCAoQmxhemUudXRpbHMgPSB7fSkpO1xyXG4gICAgKGZ1bmN0aW9uIChDQU1FUkFfVFlQRSkge1xyXG4gICAgICAgIENBTUVSQV9UWVBFW0NBTUVSQV9UWVBFW1wiT1JCSVRJTkdcIl0gPSAwXSA9IFwiT1JCSVRJTkdcIjtcclxuICAgICAgICBDQU1FUkFfVFlQRVtDQU1FUkFfVFlQRVtcIlRSQUNLSU5HXCJdID0gMV0gPSBcIlRSQUNLSU5HXCI7XHJcbiAgICB9KShCbGF6ZS5DQU1FUkFfVFlQRSB8fCAoQmxhemUuQ0FNRVJBX1RZUEUgPSB7fSkpO1xyXG4gICAgdmFyIENBTUVSQV9UWVBFID0gQmxhemUuQ0FNRVJBX1RZUEU7XHJcbiAgICB2YXIgS2V0Y2ggPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIEtldGNoKCkge1xyXG4gICAgICAgIH1cclxuICAgICAgICBLZXRjaC5zZXRDYW52YXNUb0NvbnRleHQgPSBmdW5jdGlvbiAoa2V5LCBjYW52YXMpIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBXZWJHTFV0aWxzLmdldEdMQ29udGV4dChjYW52YXMpO1xyXG4gICAgICAgICAgICBLZXRjaC5zZXRDb250ZXh0KGtleSwgY29udGV4dCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKGtleSwgY29udGV4dCkge1xyXG4gICAgICAgICAgICBLZXRjaC5fdmlld3Nba2V5XS5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmdldENvbnRleHQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5fdmlld3Nba2V5XS5jb250ZXh0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guY3JlYXRlUHJvZ3JhbSA9IGZ1bmN0aW9uIChrZXksIHNoYWRlcnMpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gS2V0Y2guZ2V0Q29udGV4dChrZXkpO1xyXG4gICAgICAgICAgICB2YXIgcHJvZ3JhbSA9IFdlYkdMVXRpbHMuY3JlYXRlUHJvZ3JhbShnbCwgc2hhZGVycyk7XHJcbiAgICAgICAgICAgIEtldGNoLnNldFByb2dyYW0oa2V5LCBwcm9ncmFtKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLnNldFByb2dyYW0gPSBmdW5jdGlvbiAoa2V5LCBwcm9ncmFtKSB7XHJcbiAgICAgICAgICAgIEtldGNoLl92aWV3c1trZXldLnByb2dyYW0gPSBwcm9ncmFtO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZ2V0UHJvZ3JhbSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtldGNoLl92aWV3c1trZXldLnByb2dyYW07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5jcmVhdGVWaWV3ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICBLZXRjaC5fdmlld3Nba2V5XSA9IHt9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guc2V0QXR0cmlidXRlTG9jYXRpb25zID0gZnVuY3Rpb24gKGtleSwgYXR0cmlic19uYW1lcykge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IEtldGNoLl92aWV3c1trZXldO1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB2aWV3LmNvbnRleHQ7XHJcbiAgICAgICAgICAgIHZhciBwcmcgPSB2aWV3LnByb2dyYW07XHJcbiAgICAgICAgICAgIHZpZXcuYXR0cmlicyA9IGF0dHJpYnNfbmFtZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBhdHRyKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2W2F0dHJdID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJnLCBhdHRyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5nZXRBdHRyaWIgPSBmdW5jdGlvbiAodmlld19rZXksIGF0dHJfa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5fdmlld3Nbdmlld19rZXldLmF0dHJpYnNbYXR0cl9rZXldO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZ2V0VW5pZm9ybSA9IGZ1bmN0aW9uICh2aWV3X2tleSwgdW5pZm9ybV9rZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtldGNoLl92aWV3c1t2aWV3X2tleV0udW5pZm9ybXNbdW5pZm9ybV9rZXldO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guc2V0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uIChrZXksIHVuaWZvcm1fbmFtZXMpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBLZXRjaC5fdmlld3Nba2V5XTtcclxuICAgICAgICAgICAgdmFyIGdsID0gdmlldy5jb250ZXh0O1xyXG4gICAgICAgICAgICB2YXIgcHJnID0gdmlldy5wcm9ncmFtO1xyXG4gICAgICAgICAgICB2aWV3LnVuaWZvcm1zID0gdW5pZm9ybV9uYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGF0dHIpIHtcclxuICAgICAgICAgICAgICAgIHByZXZbYXR0cl0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBhdHRyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5lbmFibGVBdHRyaWIgPSBmdW5jdGlvbiAodmlld19rZXksIGF0dHJfa2V5LCBwb2ludGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IEtldGNoLmdldEF0dHJpYih2aWV3X2tleSwgYXR0cl9rZXkpO1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSBLZXRjaC5nZXRDb250ZXh0KHZpZXdfa2V5KTtcclxuICAgICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAocG9pbnRlcikge1xyXG4gICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihpbmRleCwgcG9pbnRlci5zaXplIHx8IDMsIGdsLkZMT0FULCBwb2ludGVyLm5vcm1hbGl6ZWQgfHwgZmFsc2UsIHBvaW50ZXIuc3RyaWRlIHx8IDAsIHBvaW50ZXIub2Zmc2V0IHx8IDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihpbmRleCwgMywgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZGlzYWJsZUF0dHJpYiA9IGZ1bmN0aW9uICh2aWV3X2tleSwgYXR0cl9rZXkpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gS2V0Y2guZ2V0QXR0cmliKHZpZXdfa2V5LCBhdHRyX2tleSk7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IEtldGNoLmdldENvbnRleHQodmlld19rZXkpO1xyXG4gICAgICAgICAgICBnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2gucmVuZGVyTG9vcCA9IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICBzZXRJbnRlcnZhbChjYiwgMzApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guYWRkVGV4dHVyZSA9IGZ1bmN0aW9uIChrZXksIHRleHR1cmVfaWQpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBLZXRjaC5fdmlld3Nba2V5XTtcclxuICAgICAgICAgICAgdmlldy50ZXh0dXJlcyA9IHZpZXcudGV4dHVyZXMgfHwgW107XHJcbiAgICAgICAgICAgIHZpZXcudGV4dHVyZXMucHVzaCh0ZXh0dXJlX2lkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLnJlbW92ZVRleHR1cmUgPSBmdW5jdGlvbiAoa2V5LCB0ZXh0dXJlX2lkKSB7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gS2V0Y2guX3ZpZXdzW2tleV07XHJcbiAgICAgICAgICAgIHZpZXcudGV4dHVyZXMgPSB2aWV3LnRleHR1cmVzIHx8IFtdO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB2aWV3LnRleHR1cmVzLmluZGV4T2YodGV4dHVyZV9pZCk7XHJcbiAgICAgICAgICAgIHZpZXcudGV4dHVyZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codmlldy50ZXh0dXJlcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5hY3RpdmVUZXh0dXJlID0gZnVuY3Rpb24gKGtleSwgdGV4dHVyZV9pZCwgdGV4dHVyZSkge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IEtldGNoLl92aWV3c1trZXldO1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB2aWV3LmNvbnRleHQ7XHJcbiAgICAgICAgICAgIHZhciBwcmcgPSB2aWV3LnByb2dyYW07XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHZpZXcudGV4dHVyZXMuaW5kZXhPZih0ZXh0dXJlX2lkKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoaW5kZXggPT09IDAgPyBnbC5URVhUVVJFMCA6IGdsLlRFWFRVUkUwICsgaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdVNhbXBsZXIgPSBLZXRjaC5nZXRVbmlmb3JtKGtleSwgXCJ1U2FtcGxlclwiKTtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh1U2FtcGxlciwgaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5fdmlld3MgPSB7fTtcclxuICAgICAgICByZXR1cm4gS2V0Y2g7XHJcbiAgICB9KCkpO1xyXG4gICAgQmxhemUuS2V0Y2ggPSBLZXRjaDtcclxuICAgIHZhciBSZW5kZXJhYmxlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBSZW5kZXJhYmxlKGdyYXBoX2lkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dyYXBoX2lkID0gZ3JhcGhfaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZW5kZXJhYmxlLnByb3RvdHlwZSwgXCJncmFwaElEXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JhcGhfaWQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZW5kZXJhYmxlLnByb3RvdHlwZSwgXCJnbFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEtldGNoLmdldENvbnRleHQodGhpcy5ncmFwaElEKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlbmRlcmFibGUucHJvdG90eXBlLCBcInByb2dyYW1cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBLZXRjaC5nZXRQcm9ncmFtKHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFJlbmRlcmFibGUucHJvdG90eXBlLmdldFVuaWZvcm0gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5nZXRVbmlmb3JtKHRoaXMuZ3JhcGhJRCwga2V5KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBSZW5kZXJhYmxlO1xyXG4gICAgfSgpKTtcclxuICAgIEJsYXplLlJlbmRlcmFibGUgPSBSZW5kZXJhYmxlO1xyXG4gICAgdmFyIEVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBFbnRpdHkoZ3JhcGhfaWQpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBFbnRpdHkucHJvdG90eXBlLmJlZ2luRHJhdyA9IGZ1bmN0aW9uIChtYXRyaXhTdGFjaykge1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKG1hdHJpeFN0YWNrKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gRW50aXR5O1xyXG4gICAgfShSZW5kZXJhYmxlKSk7XHJcbiAgICBCbGF6ZS5FbnRpdHkgPSBFbnRpdHk7XHJcbiAgICB2YXIgTWF0cml4U3RhY2sgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhNYXRyaXhTdGFjaywgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBNYXRyaXhTdGFjayhncmFwaF9pZCkge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YWNrID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX212TWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fcE1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25NYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNvcHkgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBtYXQ0LnNldCh0aGlzLl9tdk1hdHJpeCwgY29weSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YWNrLnB1c2goY29weSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhY2subGVuZ3RoID09IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBcImludmFsaWQgcG9wTWF0cml4XCI7XHJcbiAgICAgICAgICAgIHRoaXMuX212TWF0cml4ID0gdGhpcy5fc3RhY2sucG9wKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUuTW9kZWxWaWV3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2FtZXJhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tdk1hdHJpeCA9IHRoaXMuX2NhbWVyYS5tb2RlbFZpZXc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LmlkZW50aXR5KHRoaXMuX212TWF0cml4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hdHJpeFN0YWNrLnByb3RvdHlwZSwgXCJtdk1hdHJpeFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX212TWF0cml4O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWF0cml4U3RhY2sucHJvdG90eXBlLCBcInBNYXRyaXhcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wTWF0cml4O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWF0cml4U3RhY2sucHJvdG90eXBlLCBcIm5NYXRyaXhcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9uTWF0cml4O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWF0cml4U3RhY2sucHJvdG90eXBlLCBcIk1haW5DYW1lcmFcIiwge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYW1lcmEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbWVyYSA9IGNhbWVyYTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTWF0cml4U3RhY2sucHJvdG90eXBlLlBlcnNwZWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBtYXQ0LmlkZW50aXR5KHRoaXMuX3BNYXRyaXgpO1xyXG4gICAgICAgICAgICBtYXQ0LnBlcnNwZWN0aXZlKDQ1LCBnbC52aWV3cG9ydFdpZHRoIC8gZ2wudmlld3BvcnRIZWlnaHQsIDAuMSwgMTAwMC4wLCB0aGlzLl9wTWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1hdHJpeFN0YWNrLnByb3RvdHlwZS5Ob3JtYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1hdDQuaWRlbnRpdHkodGhpcy5fbk1hdHJpeCk7XHJcbiAgICAgICAgICAgIG1hdDQuc2V0KHRoaXMuX212TWF0cml4LCB0aGlzLl9uTWF0cml4KTtcclxuICAgICAgICAgICAgbWF0NC5pbnZlcnNlKHRoaXMuX25NYXRyaXgpO1xyXG4gICAgICAgICAgICBtYXQ0LnRyYW5zcG9zZSh0aGlzLl9uTWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1hdHJpeFN0YWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLk1vZGVsVmlldygpO1xyXG4gICAgICAgICAgICB0aGlzLlBlcnNwZWN0aXZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuTm9ybWFsKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUuc2V0VXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHRoaXMuTm9ybWFsKCk7XHJcbiAgICAgICAgICAgIHZhciBtdk1hdHJpeCA9IHRoaXMuZ2V0VW5pZm9ybShcInVNVk1hdHJpeFwiKTtcclxuICAgICAgICAgICAgaWYgKG12TWF0cml4KVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihtdk1hdHJpeCwgZmFsc2UsIHRoaXMuX212TWF0cml4KTtcclxuICAgICAgICAgICAgdmFyIHBNYXRyaXggPSB0aGlzLmdldFVuaWZvcm0oXCJ1UE1hdHJpeFwiKTtcclxuICAgICAgICAgICAgaWYgKHBNYXRyaXgpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHBNYXRyaXgsIGZhbHNlLCB0aGlzLl9wTWF0cml4KTtcclxuICAgICAgICAgICAgdmFyIG5NYXRyaXggPSB0aGlzLmdldFVuaWZvcm0oXCJ1Tk1hdHJpeFwiKTtcclxuICAgICAgICAgICAgaWYgKG5NYXRyaXgpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KG5NYXRyaXgsIGZhbHNlLCB0aGlzLl9uTWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBNYXRyaXhTdGFjaztcclxuICAgIH0oUmVuZGVyYWJsZSkpO1xyXG4gICAgQmxhemUuTWF0cml4U3RhY2sgPSBNYXRyaXhTdGFjaztcclxuICAgIHZhciBSZXNvdXJjZXM7XHJcbiAgICAoZnVuY3Rpb24gKFJlc291cmNlcykge1xyXG4gICAgICAgIHZhciBNZXNoQnVmZmVycyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhNZXNoQnVmZmVycywgX3N1cGVyKTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gTWVzaEJ1ZmZlcnMoZ3JhcGhfaWQpIHtcclxuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcIm9ubG9hZFwiLCB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29ubG9hZCA9IGNiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoQnVmZmVycy5wcm90b3R5cGUsIFwic3JjXCIsIHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHNyYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBleHQgPSB1dGlscy5nZXRFeHRlbnNpb24oc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICB1dGlscy5sb2FkKHNyYywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJvYmpcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLnBhcnNlT0JKKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLnBhcnNlSlNPTihkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNyZWF0ZUJ1ZmZlcnMob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9vbmxvYWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25sb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgTWVzaEJ1ZmZlcnMucHJvdG90eXBlLnBhcnNlSlNPTiA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgTWVzaEJ1ZmZlcnMucHJvdG90eXBlLnBhcnNlT0JKID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdjogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgdm46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHZ0OiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBpdjogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgaW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0OiBbXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciBsaW5lcyA9IGRhdGEuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmVydGV4ID0gbGluZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gPT09ICd2JztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbGluZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gPT09ICdmJztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmVydGV4LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSBpdGVtLnJlcGxhY2UoXCJcXHJcIiwgXCJcIikuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBlbGVtc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IG9ialtrZXldLmNvbmNhdChlbGVtcy5zbGljZSgxKS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgIT09IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcEluZGV4ID0gW107XHJcbiAgICAgICAgICAgICAgICBpbmRleC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gaXRlbS5yZXBsYWNlKFwiXFxyXCIsIFwiXCIpLnJlcGxhY2UoXCJmXCIsIFwiXCIpLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wSW5kZXggPSB0ZW1wSW5kZXguY29uY2F0KGVsZW1zLnNsaWNlKDEpLmZpbHRlcihmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAhPT0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRlbXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gaXRlbS5zcGxpdChcIi9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLml2LnB1c2gocGFyc2VJbnQoZWxlbXNbMF0pIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmluLnB1c2gocGFyc2VJbnQoZWxlbXNbMV0pIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLml0LnB1c2gocGFyc2VJbnQoZWxlbXNbMl0pIC0gMSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE1lc2hCdWZmZXJzLnByb3RvdHlwZS5jcmVhdGVCdWZmZXJzID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgICAgIF8uZGVmYXVsdHMob2JqLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdjogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgdm46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHZ0OiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBpdjogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgaW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0OiBbXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVCdWZmZXIoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBXZWJHTFV0aWxzLmNyZWF0ZUJ1ZmZlcihnbCwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLnYubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92Ym8gPSBjcmVhdGVCdWZmZXIob2JqLnYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iai52Lmxlbmd0aCA+IDAgJiYgb2JqLml2Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9uYm8gPSBjcmVhdGVCdWZmZXIodXRpbHMuY2FsY3VsYXRlTm9ybWFscyhvYmoudiwgb2JqLml2KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLnZ0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90Ym8gPSBXZWJHTFV0aWxzLmNyZWF0ZUJ1ZmZlcihnbCwgb2JqLnZ0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUluZGV4QnVmZmVyKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gV2ViR0xVdGlscy5jcmVhdGVJbmRleEJ1ZmZlcihnbCwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLml2Lmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXZibyA9IGNyZWF0ZUluZGV4QnVmZmVyKG9iai5pdik7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLmluLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5ibyA9IGNyZWF0ZUluZGV4QnVmZmVyKG9iai5pbik7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLml0Lmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRibyA9IGNyZWF0ZUluZGV4QnVmZmVyKG9iai5pdCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoQnVmZmVycy5wcm90b3R5cGUsIFwidmJvXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92Ym87XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hCdWZmZXJzLnByb3RvdHlwZSwgXCJuYm9cIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25ibztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcInRib1wiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGJvO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoQnVmZmVycy5wcm90b3R5cGUsIFwiaXZib1wiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXZibztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcImluYm9cIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luYm87XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hCdWZmZXJzLnByb3RvdHlwZSwgXCJpdGJvXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGJvO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBNZXNoQnVmZmVycztcclxuICAgICAgICB9KFJlbmRlcmFibGUpKTtcclxuICAgICAgICBSZXNvdXJjZXMuTWVzaEJ1ZmZlcnMgPSBNZXNoQnVmZmVycztcclxuICAgICAgICB2YXIgTWVzaFRleHR1cmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgICAgICBfX2V4dGVuZHMoTWVzaFRleHR1cmUsIF9zdXBlcik7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1lc2hUZXh0dXJlKGdyYXBoX2lkKSB7XHJcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2lkID0gdXRpbHMudXVpZCh0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoVGV4dHVyZS5wcm90b3R5cGUsIFwib25sb2FkXCIsIHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25sb2FkID0gY2I7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hUZXh0dXJlLnByb3RvdHlwZSwgXCJzcmNcIiwge1xyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZmlsZW5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZS5vbmxvYWQgPSB0aGlzLmxvYWRUZXh0dXJlSW1hZ2UodGhpcy5fb25sb2FkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZS5zcmMgPSBmaWxlbmFtZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBNZXNoVGV4dHVyZS5wcm90b3R5cGUubG9hZFRleHR1cmVJbWFnZSA9IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RleHR1cmUgPSBXZWJHTFV0aWxzLmNyZWF0ZVRleHR1cmUoc2VsZi5nbCwgc2VsZi5faW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtldGNoLmFkZFRleHR1cmUoc2VsZi5ncmFwaElELCBzZWxmLl9vaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYilcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoVGV4dHVyZS5wcm90b3R5cGUsIFwiY29udGVudFwiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gTWVzaFRleHR1cmU7XHJcbiAgICAgICAgfShSZW5kZXJhYmxlKSk7XHJcbiAgICAgICAgUmVzb3VyY2VzLk1lc2hUZXh0dXJlID0gTWVzaFRleHR1cmU7XHJcbiAgICAgICAgdmFyIE1lc2hNYXRlcmlhbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhNZXNoTWF0ZXJpYWwsIF9zdXBlcik7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1lc2hNYXRlcmlhbChncmFwaF9pZCwgYW1iaWVudCwgZGlmZnVzZSwgc3BlY3VsYXIsIHNoaW5pbmVzcykge1xyXG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW1iaWVudCA9IGFtYmllbnQgPyB2ZWM0LmNyZWF0ZShhbWJpZW50KSA6IHZlYzQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWZmdXNlID0gZGlmZnVzZSA/IHZlYzQuY3JlYXRlKGRpZmZ1c2UpIDogdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3BlY3VsYXIgPSBzcGVjdWxhciA/IHZlYzQuY3JlYXRlKHNwZWN1bGFyKSA6IHZlYzQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaGluaW5lc3MgPSBzaGluaW5lc3MgfHwgMjAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hNYXRlcmlhbC5wcm90b3R5cGUsIFwib25sb2FkXCIsIHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25sb2FkID0gY2I7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hNYXRlcmlhbC5wcm90b3R5cGUsIFwic3JjXCIsIHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHNyYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmxvYWQoc3JjLCBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IHNlbGYucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9hbWJpZW50ID0gdGVtcC5LYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2RpZmZ1c2UgPSB0ZW1wLktkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3BlY3VsYXIgPSB0ZW1wLktzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5zaGluaW5lc3MgPSB0ZW1wLk5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuX29ubG9hZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9vbmxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBNZXNoTWF0ZXJpYWwucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7fTtcclxuICAgICAgICAgICAgICAgIHZhciBrZXlzID0gW1wiS2FcIiwgXCJLZFwiLCBcIktzXCIsIFwiTnNcIl07XHJcbiAgICAgICAgICAgICAgICB2YXIgbGluZXMgPSBkYXRhLnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgbGluZXMuZm9yRWFjaChmdW5jdGlvbiAobGluZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtcyA9IGxpbmUuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBlbGVtc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5cy5pbmRleE9mKGtleSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk5zXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqW1wiTnNcIl0gPSBOdW1iZXIoZWxlbXNbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wID0gZWxlbXMuc2xpY2UoMSkubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiBOdW1iZXIoYSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXAucHVzaCgxLjApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtrZXldID0gdGVtcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hNYXRlcmlhbC5wcm90b3R5cGUsIFwiYW1iaWVudFwiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW1iaWVudDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChhbWJpZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYW1iaWVudCA9IHV0aWxzLm5vcm1hbGl6ZU5hTih2ZWM0LmNyZWF0ZShhbWJpZW50KSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hNYXRlcmlhbC5wcm90b3R5cGUsIFwiZGlmZnVzZVwiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlmZnVzZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkaWZmdXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlmZnVzZSA9IHV0aWxzLm5vcm1hbGl6ZU5hTih2ZWM0LmNyZWF0ZShkaWZmdXNlKSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hNYXRlcmlhbC5wcm90b3R5cGUsIFwic3BlY3VsYXJcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NwZWN1bGFyO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHNwZWN1bGFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3BlY3VsYXIgPSB1dGlscy5ub3JtYWxpemVOYU4odmVjNC5jcmVhdGUoc3BlY3VsYXIpKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaE1hdGVyaWFsLnByb3RvdHlwZSwgXCJzaGluaW5lc3NcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NoaW5pbmVzcztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hpbmluZXNzID0gdjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gTWVzaE1hdGVyaWFsO1xyXG4gICAgICAgIH0oUmVuZGVyYWJsZSkpO1xyXG4gICAgICAgIFJlc291cmNlcy5NZXNoTWF0ZXJpYWwgPSBNZXNoTWF0ZXJpYWw7XHJcbiAgICB9KShSZXNvdXJjZXMgPSBCbGF6ZS5SZXNvdXJjZXMgfHwgKEJsYXplLlJlc291cmNlcyA9IHt9KSk7XHJcbiAgICB2YXIgU2hhZGVycztcclxuICAgIChmdW5jdGlvbiAoU2hhZGVycykge1xyXG4gICAgICAgIHZhciBGcmFnbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIEZyYWdtZW50KCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIEZyYWdtZW50LlBhcnRpY2xlID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG51bmlmb3JtIGJvb2wgdVdpcmVmcmFtZTtcXG51bmlmb3JtIHZlYzQgdU1hdGVyaWFsRGlmZnVzZTtcXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG5cXG5ib29sIGlzQmxhY2sodmVjNCBjb2xvcil7XFxucmV0dXJuIGNvbG9yLnI9PTAuMCAmJmNvbG9yLmc9PTAuMCYmY29sb3IuYj09MC4wO1xcbn1cXG52b2lkIG1haW4odm9pZCkgeyBcXG4gICAgIGlmKHVXaXJlZnJhbWUpe1xcbiAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHVNYXRlcmlhbERpZmZ1c2U7XFxuICAgICAgICB9ZWxzZXtcXG4gICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHVTYW1wbGVyLCBnbF9Qb2ludENvb3JkKTtcXG4gICAgaWYoZ2xfRnJhZ0NvbG9yLmEgPCAwLjUgfHwgaXNCbGFjayhnbF9GcmFnQ29sb3IpKSBkaXNjYXJkO1xcbiAgICB9XFxufVwiO1xyXG4gICAgICAgICAgICBGcmFnbWVudC5QaG9uZyA9IFwiI2lmZGVmIEdMX0VTXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxudW5pZm9ybSBmbG9hdCB1U2hpbmluZXNzO1xcbnVuaWZvcm0gdmVjMyB1TGlnaHREaXJlY3Rpb247XFxuXFxudW5pZm9ybSB2ZWM0IHVMaWdodEFtYmllbnQ7XFxudW5pZm9ybSB2ZWM0IHVMaWdodERpZmZ1c2U7XFxudW5pZm9ybSB2ZWM0IHVMaWdodFNwZWN1bGFyO1xcblxcbnVuaWZvcm0gYm9vbCB1V2lyZWZyYW1lO1xcblxcbnVuaWZvcm0gdmVjNCB1TWF0ZXJpYWxBbWJpZW50O1xcbnVuaWZvcm0gdmVjNCB1TWF0ZXJpYWxEaWZmdXNlO1xcbnVuaWZvcm0gdmVjNCB1TWF0ZXJpYWxTcGVjdWxhcjtcXG5cXG52YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG52YXJ5aW5nIHZlYzMgdkV5ZVZlYztcXG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xcblxcbnZvaWQgbWFpbigpe1xcblxcblxcbiAgICAgICAgaWYodVdpcmVmcmFtZSl7XFxuICAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdkNvbG9yO1xcbiAgICAgICAgfWVsc2V7XFxuICAgICAgICBcXG4gICAgXFx0XFxuICAgICAgICB2ZWMzIEw9IG5vcm1hbGl6ZSh1TGlnaHREaXJlY3Rpb24pO1xcbiAgICAgICAgdmVjMyBOPSBub3JtYWxpemUodk5vcm1hbCk7XFxuICAgICAgICBmbG9hdCBsYW1iZXJ0VGVybT1kb3QoTiwgLUwpO1xcbiAgICAgICAgXFxuICAgICAgICB2ZWM0IElhPSB1TGlnaHRBbWJpZW50KnVNYXRlcmlhbEFtYmllbnQ7XFxuICAgICAgICBcXG4gICAgICAgIHZlYzQgSWQ9dmVjNCgwLjAsMC4wLDAuMCwxLjApO1xcbiAgICAgICAgXFxuICAgICAgICB2ZWM0IElzPXZlYzQoMC4wLDAuMCwwLjAsMS4wKTtcXG4gICAgICAgIFxcbiAgICAgICAgaWYobGFtYmVydFRlcm0+MC4wKVxcbiAgICAgICAge1xcbiAgICAgICAgICAgIElkPXVMaWdodERpZmZ1c2UqdU1hdGVyaWFsRGlmZnVzZSpsYW1iZXJ0VGVybTtcXG4gICAgICAgICAgICBcXG4gICAgICAgICAgICB2ZWMzIEU9IG5vcm1hbGl6ZSh2RXllVmVjKTtcXG4gICAgICAgICAgICB2ZWMzIFI9IHJlZmxlY3QoTCwgTik7XFxuICAgICAgICAgICAgZmxvYXQgc3BlY3VsYXI9cG93KG1heChkb3QoUixFKSwwLjApLCB1U2hpbmluZXNzKTtcXG4gICAgICAgICAgICBJcz11TGlnaHRTcGVjdWxhcip1TWF0ZXJpYWxTcGVjdWxhcipzcGVjdWxhcjtcXG4gICAgICAgIH1cXG4gICAgICAgIFxcbiAgICAgICAgdmVjNCBmaW5hbENvbG9yPUlhK0lkK0lzO1xcbiAgICAgICAgZmluYWxDb2xvci5hPTEuMDtcXG4gICAgXFxuICAgICAgICBnbF9GcmFnQ29sb3IgPWZpbmFsQ29sb3I7XFxuICAgICAgICB9XFxuICAgICAgICBcXG59XFxuXFxuXFxuXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudDtcclxuICAgICAgICB9KCkpO1xyXG4gICAgICAgIFNoYWRlcnMuRnJhZ21lbnQgPSBGcmFnbWVudDtcclxuICAgICAgICB2YXIgVmVydGV4ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gVmVydGV4KCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFZlcnRleC5QYXJ0aWNsZSA9IFwiYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjtcXG5cXG51bmlmb3JtIG1hdDQgdU1WTWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1UE1hdHJpeDtcXG51bmlmb3JtIGZsb2F0IHVQb2ludFNpemU7XFxuXFxudm9pZCBtYWluKHZvaWQpIHtcXG4gICAgZ2xfUG9zaXRpb24gPSB1UE1hdHJpeCAqIHVNVk1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbi54eXosIDEuMCk7XFxuICAgIGdsX1BvaW50U2l6ZSA9IHVQb2ludFNpemU7XFxufVwiO1xyXG4gICAgICAgICAgICBWZXJ0ZXguUGhvbmcgPSBcIiNpZmRlZiBHTF9FU1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbiNlbmRpZlxcblxcbmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzMgYV9ub3JtYWw7XFxuYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5cXG51bmlmb3JtIG1hdDQgdU1WTWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1UE1hdHJpeDtcXG51bmlmb3JtIG1hdDQgdU5NYXRyaXg7XFxuXFxudW5pZm9ybSBib29sIHVXaXJlZnJhbWU7XFxudW5pZm9ybSBib29sIHVQZXJWZXJ0ZXhDb2xvcjtcXG51bmlmb3JtIHZlYzQgdU1hdGVyaWFsRGlmZnVzZTtcXG5cXG52YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG52YXJ5aW5nIHZlYzMgdkV5ZVZlYztcXG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xcblxcbnZvaWQgbWFpbigpe1xcblxcbiAgICB2ZWM0IHZlcnRleCA9IHVNVk1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTtcXG5cXHRcXG5cXHRcXG5cXHQgaWYodVdpcmVmcmFtZSl7XFxuXFx0IFxcblxcdCBcXHRpZih1UGVyVmVydGV4Q29sb3Ipe1xcblxcdCBcXHRcXHQgdkNvbG9yPWFfY29sb3I7XFxuXFx0IFxcdH1lbHNle1xcblxcdCBcXHRcXHR2Q29sb3I9dU1hdGVyaWFsRGlmZnVzZTtcXG5cXHQgXFx0fVxcblxcdCBcXG5cXHRcXG5cXHQgfWVsc2V7XFxuXFx0XFxuXFx0dk5vcm1hbCA9IHZlYzModU5NYXRyaXggKiB2ZWM0KGFfbm9ybWFsLCAxLjApKTtcXG5cXHR2RXllVmVjPS12ZWMzKHZlcnRleC54eXopOyAgXFxuXFx0XFxuXFx0fVxcblxcdCBcXG5cXHRnbF9Qb3NpdGlvbiA9dVBNYXRyaXggKiB2ZXJ0ZXg7XFxuXFxufVxcblxcblxcblwiO1xyXG4gICAgICAgICAgICByZXR1cm4gVmVydGV4O1xyXG4gICAgICAgIH0oKSk7XHJcbiAgICAgICAgU2hhZGVycy5WZXJ0ZXggPSBWZXJ0ZXg7XHJcbiAgICB9KShTaGFkZXJzID0gQmxhemUuU2hhZGVycyB8fCAoQmxhemUuU2hhZGVycyA9IHt9KSk7XHJcbiAgICB2YXIgQW5pbWF0aW9uRW50aXR5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQW5pbWF0aW9uRW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEFuaW1hdGlvbkVudGl0eShncmFwaF9pZCwgZnJlcXVlbmN5LCB0aW1lcywgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmVxdWVuY3kgPSBmcmVxdWVuY3k7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsX2lkID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB9XHJcbiAgICAgICAgQW5pbWF0aW9uRW50aXR5LnByb3RvdHlwZS5vbkZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBBbmltYXRpb25FbnRpdHkuRWxhcHNlVGltZSA9IHV0aWxzLm5vd0luTWlsbGlzZWNvbmRzKCk7XHJcbiAgICAgICAgICAgIGlmIChBbmltYXRpb25FbnRpdHkuRWxhcHNlVGltZSA8IDUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciBzdGVwcyA9IE1hdGguZmxvb3IoQW5pbWF0aW9uRW50aXR5LkVsYXBzZVRpbWUgLyB0aGlzLl9mcmVxdWVuY3kpO1xyXG4gICAgICAgICAgICB3aGlsZSAoKHN0ZXBzID4gMCkgJiYgKEFuaW1hdGlvbkVudGl0eS5Db3VudCAhPSB0aGlzLl90aW1lcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICBzdGVwcy0tO1xyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uRW50aXR5LkNvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKEFuaW1hdGlvbkVudGl0eS5Db3VudCA9PT0gdGhpcy5fdGltZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRpbWUgPSB1dGlscy5ub3dJbk1pbGxpc2Vjb25kcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRlcnZhbF9pZCA9IHNldEludGVydmFsKHRoaXMub25GcmFtZSwgdGhpcy5fZnJlcXVlbmN5IC8gMTAwMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbF9pZClcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxfaWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQW5pbWF0aW9uRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkucHJvdG90eXBlLmVuZERyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkuQ291bnQgPSAwO1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb25FbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuQW5pbWF0aW9uRW50aXR5ID0gQW5pbWF0aW9uRW50aXR5O1xyXG4gICAgdmFyIE1lc2hFbnRpdHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhNZXNoRW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIE1lc2hFbnRpdHkoZ3JhcGhfaWQsIG1lc2hmaWxlLCBtYXRlcmlhbGZpbGUsIHRleHR1cmVmaWxlKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX21lc2hmaWxlID0gbWVzaGZpbGUgfHwgbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWxmaWxlID0gbWF0ZXJpYWxmaWxlIHx8IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmVmaWxlID0gdGV4dHVyZWZpbGUgfHwgbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUubG9hZEJ1ZmZlcnMgPSBmdW5jdGlvbiAoZmlsZW5hbWUsIGNiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnMgPSBuZXcgUmVzb3VyY2VzLk1lc2hCdWZmZXJzKHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnMub25sb2FkID0gY2I7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnMuc3JjID0gZmlsZW5hbWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5sb2FkVGV4dHVyZSA9IGZ1bmN0aW9uIChmaWxlbmFtZSwgY2IpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IG5ldyBSZXNvdXJjZXMuTWVzaFRleHR1cmUodGhpcy5ncmFwaElEKTtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZS5vbmxvYWQgPSBjYjtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZS5zcmMgPSBmaWxlbmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoRW50aXR5LnByb3RvdHlwZSwgXCJtYXRlcmlhbFwiLCB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsID0gdjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUubG9hZE1hdGVyaWFsID0gZnVuY3Rpb24gKGZpbGVuYW1lLCBjYikge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IG5ldyBSZXNvdXJjZXMuTWVzaE1hdGVyaWFsKHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsLm9ubG9hZCA9IGNiO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5zcmMgPSBmaWxlbmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1lc2hFbnRpdHkucHJvdG90eXBlLmxvYWRNZXNoID0gZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgYXN5bmMud2F0ZXJmYWxsKFtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9tZXNoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRpbmcgQnVmZmVyc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvYWRCdWZmZXJzKHNlbGYuX21lc2hmaWxlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGVkIEJ1ZmZlcnNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX3RleHR1cmVmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBUZXh0dXJlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZFRleHR1cmUoc2VsZi5fdGV4dHVyZWZpbGUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2FkZWQgVGV4dHVyZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9tYXRlcmlhbGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2FkaW5nIE1hdGVyaWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZE1hdGVyaWFsKHNlbGYuX21hdGVyaWFsZmlsZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRlZCBNYXRlcmlhbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNiKVxyXG4gICAgICAgICAgICAgICAgICAgIGNiKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUubG9hZE1lc2hCeU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycyA9IG5ldyBSZXNvdXJjZXMuTWVzaEJ1ZmZlcnModGhpcy5ncmFwaElEKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycy5jcmVhdGVCdWZmZXJzKG9iaik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5sb2FkTWF0ZXJpYWxCeU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwgPSBuZXcgUmVzb3VyY2VzLk1lc2hNYXRlcmlhbCh0aGlzLmdyYXBoSUQpO1xyXG4gICAgICAgICAgICBpZiAob2JqLmFtYmllbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsLmFtYmllbnQgPSBvYmouYW1iaWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqLnNwZWN1bGFyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5zcGVjdWxhciA9IG9iai5zcGVjdWxhcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqLmRpZmZ1c2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsLmRpZmZ1c2UgPSBvYmouZGlmZnVzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqLnNoaW5pbmVzcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwuc2hpbmluZXNzID0gb2JqLnNoaW5pbmVzcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUuc2V0TWF0ZXJpYWxVbmlmb3JtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsLmFtYmllbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdU1hdGVyaWFsQW1iaWVudCA9IHRoaXMuZ2V0VW5pZm9ybShcInVNYXRlcmlhbEFtYmllbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVNYXRlcmlhbEFtYmllbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00ZnYodU1hdGVyaWFsQW1iaWVudCwgdGhpcy5fbWF0ZXJpYWwuYW1iaWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF0ZXJpYWwuZGlmZnVzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1TWF0ZXJpYWxEaWZmdXNlID0gdGhpcy5nZXRVbmlmb3JtKFwidU1hdGVyaWFsRGlmZnVzZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodU1hdGVyaWFsRGlmZnVzZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TWF0ZXJpYWxEaWZmdXNlLCB0aGlzLl9tYXRlcmlhbC5kaWZmdXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYXRlcmlhbC5zcGVjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1TWF0ZXJpYWxTcGVjdWxhciA9IHRoaXMuZ2V0VW5pZm9ybShcInVNYXRlcmlhbFNwZWN1bGFyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1TWF0ZXJpYWxTcGVjdWxhcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TWF0ZXJpYWxTcGVjdWxhciwgdGhpcy5fbWF0ZXJpYWwuc3BlY3VsYXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsLnNoaW5pbmVzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1U2hpbmluZXNzID0gdGhpcy5nZXRVbmlmb3JtKFwidVNoaW5pbmVzc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodVNoaW5pbmVzcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHVTaGluaW5lc3MsIHRoaXMuX21hdGVyaWFsLnNoaW5pbmVzcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIE1lc2hFbnRpdHkucHJvdG90eXBlLmJlZ2luRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdGhpcy5zZXRNYXRlcmlhbFVuaWZvcm1zKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl9idWZmZXJzLnZibyk7XHJcbiAgICAgICAgICAgIEtldGNoLmVuYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2J1ZmZlcnMubmJvKTtcclxuICAgICAgICAgICAgS2V0Y2guZW5hYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX25vcm1hbFwiKTtcclxuICAgICAgICAgICAgdmFyIGl2Ym8gPSB0aGlzLl9idWZmZXJzLml2Ym87XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGl2Ym8pO1xyXG4gICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBpdmJvLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBLZXRjaC5kaXNhYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE1lc2hFbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuTWVzaEVudGl0eSA9IE1lc2hFbnRpdHk7XHJcbiAgICB2YXIgVHJhbnNmb3JtRW50aXR5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoVHJhbnNmb3JtRW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIFRyYW5zZm9ybUVudGl0eShncmFwaF9pZCwgcG9zaXRpb24sIHNpemUsIHJvdGF0aW9uKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fbWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBwb3NpdGlvbiB8fCB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9zaXplID0gc2l6ZSB8fCB2ZWMzLmNyZWF0ZShbMSwgMSwgMV0pO1xyXG4gICAgICAgICAgICB0aGlzLl9yb3RhdGlvbiA9IHJvdGF0aW9uIHx8IHsgYW5nbGU6IDAsIGF4aXM6IHZlYzMuY3JlYXRlKCkgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5pZGVudGl0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbWF0NC5pZGVudGl0eSh0aGlzLl9tYXRyaXgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zZXRNYXRyaXggPSBmdW5jdGlvbiAobmV3X21hdHJpeCkge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRyaXggPSBuZXdfbWF0cml4O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS50cmFuc3Bvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1hdDQudHJhbnNwb3NlKHRoaXMuX21hdHJpeCwgdGhpcy5fbWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLCBcInBvc2l0aW9uXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLnNldEFic29sdXRlUG9zaXRpb24gPSBmdW5jdGlvbiAoeCwgeSwgeikge1xyXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IFt4LCB5LCB6XTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUudHJhbnNsYXRlID0gZnVuY3Rpb24gKHgsIHksIHopIHtcclxuICAgICAgICAgICAgaWYgKHggPT09IHZvaWQgMCkgeyB4ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAoeSA9PT0gdm9pZCAwKSB7IHkgPSAwOyB9XHJcbiAgICAgICAgICAgIGlmICh6ID09PSB2b2lkIDApIHsgeiA9IDA7IH1cclxuICAgICAgICAgICAgdmFyIG9wZXJhbmQxID0gdGhpcy5fcG9zaXRpb247XHJcbiAgICAgICAgICAgIHZhciBvcGVyYW5kMiA9IHZlYzMuY3JlYXRlKFt4LCB5LCB6XSk7XHJcbiAgICAgICAgICAgIHZlYzMuYWRkKG9wZXJhbmQxLCBvcGVyYW5kMiwgdGhpcy5fcG9zaXRpb24pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUsIFwic2l6ZVwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpemU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHNpemUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NpemUgPSBzaXplO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLnNldFNpemUgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xyXG4gICAgICAgICAgICB0aGlzLl9zaXplID0gW3gsIHksIHpdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zY2FsZSA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XHJcbiAgICAgICAgICAgIGlmICh4ID09PSB2b2lkIDApIHsgeCA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKHkgPT09IHZvaWQgMCkgeyB5ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAoeiA9PT0gdm9pZCAwKSB7IHogPSAwOyB9XHJcbiAgICAgICAgICAgIHZhciBvcGVyYW5kMSA9IHRoaXMuX3NpemU7XHJcbiAgICAgICAgICAgIHZhciBvcGVyYW5kMiA9IHZlYzMuY3JlYXRlKFt4LCB5LCB6XSk7XHJcbiAgICAgICAgICAgIHZlYzMuYWRkKG9wZXJhbmQxLCBvcGVyYW5kMiwgdGhpcy5fc2l6ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZSwgXCJyb3RhdGlvblwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JvdGF0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChyb3RhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm90YXRpb24gPSByb3RhdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zZXRSb3RhdGlvbiA9IGZ1bmN0aW9uIChhbmdsZSwgYXhpcykge1xyXG4gICAgICAgICAgICBpZiAoYW5nbGUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbi5hbmdsZSA9IGFuZ2xlO1xyXG4gICAgICAgICAgICBpZiAoYXhpcylcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uLmF4aXMgPSBheGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zZXRBbmdsZSA9IGZ1bmN0aW9uIChhbmdsZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9yb3RhdGlvbi5hbmdsZSA9IGFuZ2xlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zZXRBeGlzID0gZnVuY3Rpb24gKGF4aXMpIHtcclxuICAgICAgICAgICAgdGhpcy5fcm90YXRpb24uYXhpcyA9IGF4aXM7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLnJvdGF0ZUFuZ2xlID0gZnVuY3Rpb24gKGFuZ2xlKSB7XHJcbiAgICAgICAgICAgIGlmIChhbmdsZSA9PT0gdm9pZCAwKSB7IGFuZ2xlID0gMDsgfVxyXG4gICAgICAgICAgICB0aGlzLl9yb3RhdGlvbi5hbmdsZSArPSBhbmdsZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUubW92ZUF4aXMgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xyXG4gICAgICAgICAgICBpZiAoeCA9PT0gdm9pZCAwKSB7IHggPSAwOyB9XHJcbiAgICAgICAgICAgIGlmICh5ID09PSB2b2lkIDApIHsgeSA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKHogPT09IHZvaWQgMCkgeyB6ID0gMDsgfVxyXG4gICAgICAgICAgICB2YXIgb3BlcmFuZDEgPSB0aGlzLl9yb3RhdGlvbi5heGlzO1xyXG4gICAgICAgICAgICB2YXIgb3BlcmFuZDIgPSB2ZWMzLmNyZWF0ZShbeCwgeSwgel0pO1xyXG4gICAgICAgICAgICB2ZWMzLmFkZChvcGVyYW5kMSwgb3BlcmFuZDIsIHRoaXMuX3JvdGF0aW9uLmF4aXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAobWF0cml4U3RhY2spIHtcclxuICAgICAgICAgICAgbWF0cml4U3RhY2sucHVzaCgpO1xyXG4gICAgICAgICAgICBtYXRyaXhTdGFjay5Nb2RlbFZpZXcoKTtcclxuICAgICAgICAgICAgdGhpcy5fbWF0cml4ID0gbWF0cml4U3RhY2subXZNYXRyaXg7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wb3NpdGlvbiAhPSB2b2lkIDApXHJcbiAgICAgICAgICAgICAgICBtYXQ0LnRyYW5zbGF0ZSh0aGlzLl9tYXRyaXgsIHRoaXMuX3Bvc2l0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NpemUgIT0gdm9pZCAwKVxyXG4gICAgICAgICAgICAgICAgbWF0NC5zY2FsZSh0aGlzLl9tYXRyaXgsIHRoaXMuX3NpemUpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcm90YXRpb24gIT0gdm9pZCAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmFkID0gdGhpcy5fcm90YXRpb24uYW5nbGUgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgICAgICAgICAgbWF0NC5yb3RhdGUodGhpcy5fbWF0cml4LCByYWQsIHRoaXMuX3JvdGF0aW9uLmF4aXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG1hdHJpeFN0YWNrLnNldFVwKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLmVuZERyYXcgPSBmdW5jdGlvbiAobWF0cml4U3RhY2spIHtcclxuICAgICAgICAgICAgbWF0cml4U3RhY2sucG9wKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gVHJhbnNmb3JtRW50aXR5O1xyXG4gICAgfShFbnRpdHkpKTtcclxuICAgIEJsYXplLlRyYW5zZm9ybUVudGl0eSA9IFRyYW5zZm9ybUVudGl0eTtcclxuICAgIHZhciBMaWdodEVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKExpZ2h0RW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIExpZ2h0RW50aXR5KGdyYXBoX2lkLCBhbWJpZW50LCBkaWZmdXNlLCBwb3NpdGlvbiwgc3BlY3VsYXIsIGRpcmVjdGlvbiwgY3V0b2ZmKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fYW1iaWVudCA9IGFtYmllbnQgPyB2ZWM0LmNyZWF0ZShhbWJpZW50KSA6IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2RpZmZ1c2UgPSBkaWZmdXNlID8gdmVjNC5jcmVhdGUoZGlmZnVzZSkgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHBvc2l0aW9uID8gdmVjNC5jcmVhdGUocG9zaXRpb24pIDogbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fc3BlY3VsYXIgPSBzcGVjdWxhciA/IHZlYzQuY3JlYXRlKHNwZWN1bGFyKSA6IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IGRpcmVjdGlvbiA/IHZlYzMuY3JlYXRlKGRpcmVjdGlvbikgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXRvZmYgPSBjdXRvZmY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaWdodEVudGl0eS5wcm90b3R5cGUsIFwiYW1iaWVudFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FtYmllbnQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGFtYmllbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FtYmllbnQgPSB1dGlscy5ub3JtYWxpemVOYU4odmVjNC5jcmVhdGUoYW1iaWVudCkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGlnaHRFbnRpdHkucHJvdG90eXBlLCBcImRpZmZ1c2VcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaWZmdXNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkaWZmdXNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWZmdXNlID0gdXRpbHMubm9ybWFsaXplTmFOKHZlYzQuY3JlYXRlKGRpZmZ1c2UpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExpZ2h0RW50aXR5LnByb3RvdHlwZSwgXCJzcGVjdWxhclwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NwZWN1bGFyO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzcGVjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3BlY3VsYXIgPSB1dGlscy5ub3JtYWxpemVOYU4odmVjNC5jcmVhdGUoc3BlY3VsYXIpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExpZ2h0RW50aXR5LnByb3RvdHlwZSwgXCJwb3NpdGlvblwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RpZmZ1c2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHV0aWxzLm5vcm1hbGl6ZU5hTih2ZWMzLmNyZWF0ZShwb3NpdGlvbikpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGlnaHRFbnRpdHkucHJvdG90eXBlLCBcImRpcmVjdGlvblwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSB1dGlscy5ub3JtYWxpemVOYU4odmVjMy5jcmVhdGUoZGlyZWN0aW9uKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaWdodEVudGl0eS5wcm90b3R5cGUsIFwiY3V0T2ZmXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3V0b2ZmO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjdXRvZmYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1dG9mZiA9IGN1dG9mZjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTGlnaHRFbnRpdHkucHJvdG90eXBlLmJlZ2luRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FtYmllbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB1TGlnaHRBbWJpZW50ID0gdGhpcy5nZXRVbmlmb3JtKFwidUxpZ2h0QW1iaWVudFwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh1TGlnaHRBbWJpZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00ZnYodUxpZ2h0QW1iaWVudCwgdGhpcy5fYW1iaWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RpZmZ1c2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciB1TGlnaHREaWZmdXNlID0gdGhpcy5nZXRVbmlmb3JtKFwidUxpZ2h0RGlmZnVzZVwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh1TGlnaHREaWZmdXNlKVxyXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00ZnYodUxpZ2h0RGlmZnVzZSwgdGhpcy5fZGlmZnVzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NwZWN1bGFyKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdUxpZ2h0U3BlY3VsYXIgPSB0aGlzLmdldFVuaWZvcm0oXCJ1TGlnaHRTcGVjdWxhclwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh1TGlnaHRTcGVjdWxhcilcclxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVMaWdodFNwZWN1bGFyLCB0aGlzLl9zcGVjdWxhcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3Bvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdUxpZ2h0UG9zaXRpb24gPSB0aGlzLmdldFVuaWZvcm0oXCJ1TGlnaHRQb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh1TGlnaHRQb3NpdGlvbilcclxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHVMaWdodFBvc2l0aW9uLCB0aGlzLl9wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2RpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVEaXJlY3Rpb24gPSB0aGlzLmdldFVuaWZvcm0oXCJ1TGlnaHREaXJlY3Rpb25cIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodURpcmVjdGlvbilcclxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtM2Z2KHVEaXJlY3Rpb24sIHRoaXMuX2RpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLyogaWYgKHRoaXMuX2N1dG9mZikge1xyXG4gICAgICAgICAgICAgICAgIHZhciB1Q3V0T2ZmID0gdGhpcy5nZXRVbmlmb3JtKFwidUN1dE9mZlwiKTtcclxuICAgICAgICAgICAgICAgICBpZiAodUN1dE9mZilcclxuICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHVDdXRPZmYsIHRoaXMuX2N1dG9mZik7XHJcbiAgICAgICAgICAgICB9Ki9cclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0RW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIExpZ2h0RW50aXR5O1xyXG4gICAgfShFbnRpdHkpKTtcclxuICAgIEJsYXplLkxpZ2h0RW50aXR5ID0gTGlnaHRFbnRpdHk7XHJcbiAgICB2YXIgRGlmZnVzZUVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKERpZmZ1c2VFbnRpdHksIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gRGlmZnVzZUVudGl0eShncmFwaF9pZCwgdikge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdjtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERpZmZ1c2VFbnRpdHkucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgRGlmZnVzZUVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB2YXIgdU1hdGVyaWFsRGlmZnVzZSA9IHRoaXMuZ2V0VW5pZm9ybShcInVNYXRlcmlhbERpZmZ1c2VcIik7XHJcbiAgICAgICAgICAgIGlmICh1TWF0ZXJpYWxEaWZmdXNlKVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TWF0ZXJpYWxEaWZmdXNlLCB0aGlzLl92YWx1ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEaWZmdXNlRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIERpZmZ1c2VFbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuRGlmZnVzZUVudGl0eSA9IERpZmZ1c2VFbnRpdHk7XHJcbiAgICB2YXIgUGFydGljbGVFbnRpdHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhQYXJ0aWNsZUVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBQYXJ0aWNsZUVudGl0eShncmFwaF9pZCwgcG9pbnRTaXplKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fcG9pbnRTaXplID0gcG9pbnRTaXplIHx8IDE7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmVfaWQgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBQYXJ0aWNsZUVudGl0eS5wcm90b3R5cGUuY29uZmlndXJlID0gZnVuY3Rpb24gKGRhdGFfbWVzaCwgZGF0YV90ZXh0dXJlKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fYnVmZmVyKTtcclxuICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoZGF0YV9tZXNoKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuX251bUl0ZW1zID0gZGF0YV9tZXNoLmxlbmd0aDtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZV9pZCA9IHV0aWxzLnV1aWQoXCJUZXh0dXJlXCIpO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gV2ViR0xVdGlscy5jcmVhdGVUZXh0dXJlKGdsLCBkYXRhX3RleHR1cmUpO1xyXG4gICAgICAgICAgICBLZXRjaC5hZGRUZXh0dXJlKHRoaXMuZ3JhcGhJRCwgdGhpcy5fdGV4dHVyZV9pZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBQYXJ0aWNsZUVudGl0eS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2J1ZmZlcik7XHJcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KGRhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5fbnVtSXRlbXMgPSBkYXRhLmxlbmd0aDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShQYXJ0aWNsZUVudGl0eS5wcm90b3R5cGUsIFwidGV4dHVyZUlEXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZV9pZDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBhcnRpY2xlRW50aXR5LnByb3RvdHlwZSwgXCJwb2ludFNpemVcIiwge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb2ludFNpemUgPSB2O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBQYXJ0aWNsZUVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB2YXIgdVBvaW50U2l6ZSA9IHRoaXMuZ2V0VW5pZm9ybShcInVQb2ludFNpemVcIik7XHJcbiAgICAgICAgICAgIGlmICh1UG9pbnRTaXplKVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHVQb2ludFNpemUsIHRoaXMuX3BvaW50U2l6ZSk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl9idWZmZXIpO1xyXG4gICAgICAgICAgICBLZXRjaC5lbmFibGVBdHRyaWIodGhpcy5ncmFwaElELCBcImFfcG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgIEtldGNoLmFjdGl2ZVRleHR1cmUodGhpcy5ncmFwaElELCB0aGlzLl90ZXh0dXJlX2lkLCB0aGlzLl90ZXh0dXJlKTtcclxuICAgICAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5QT0lOVFMsIDAsIHRoaXMuX251bUl0ZW1zIC8gMyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBQYXJ0aWNsZUVudGl0eS5wcm90b3R5cGUuZW5kRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgS2V0Y2guZGlzYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFBhcnRpY2xlRW50aXR5O1xyXG4gICAgfShFbnRpdHkpKTtcclxuICAgIEJsYXplLlBhcnRpY2xlRW50aXR5ID0gUGFydGljbGVFbnRpdHk7XHJcbiAgICB2YXIgQ2FtZXJhRW50aXR5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQ2FtZXJhRW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIENhbWVyYUVudGl0eShncmFwaF9pZCwgdHlwZSkge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlIHx8IENBTUVSQV9UWVBFLk9SQklUSU5HO1xyXG4gICAgICAgICAgICB0aGlzLl9jbWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICAgICAgbWF0NC5pZGVudGl0eSh0aGlzLl9jbWF0cml4KTtcclxuICAgICAgICAgICAgdGhpcy5fdXAgPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9yaWdodCA9IHZlYzMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vcm1hbCA9IHZlYzMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdmVjMy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fYXppbXV0aCA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fZWxldmF0aW9uID0gMC4wO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGVwcyA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW1lcmFFbnRpdHkucHJvdG90eXBlLCBcInR5cGVcIiwge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbWVyYUVudGl0eS5wcm90b3R5cGUsIFwicG9zaXRpb25cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wb3NpdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAocG9zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHBvcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbWVyYUVudGl0eS5wcm90b3R5cGUsIFwiYXppbXV0aFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F6aW11dGg7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGF6KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcF9heiA9IGF6IC0gdGhpcy5fYXppbXV0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlQXppbXV0aCh0ZW1wX2F6KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgQ2FtZXJhRW50aXR5LnByb3RvdHlwZS5jaGFuZ2VBemltdXRoID0gZnVuY3Rpb24gKGF6KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2F6aW11dGggKz0gYXo7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hemltdXRoID4gMzYwIHx8IHRoaXMuX2F6aW11dGggPCAtMzYwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hemltdXRoID0gdGhpcy5fYXppbXV0aCAlIDM2MDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbWVyYUVudGl0eS5wcm90b3R5cGUsIFwiZWxldmF0aW9uXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxldmF0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBfZWwgPSBlbCAtIHRoaXMuX2VsZXZhdGlvbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlRWxldmF0aW9uKHRlbXBfZWwpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBDYW1lcmFFbnRpdHkucHJvdG90eXBlLmNoYW5nZUVsZXZhdGlvbiA9IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGV2YXRpb24gKz0gZWw7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbGV2YXRpb24gPiAzNjAgfHwgdGhpcy5fZWxldmF0aW9uIDwgLTM2MCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWxldmF0aW9uID0gdGhpcy5fZWxldmF0aW9uICUgMzYwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2FtZXJhRW50aXR5LnByb3RvdHlwZSwgXCJ6b29tXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3RlcHM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKG9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG4gPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcCA9IHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RlcCA9IG9mZnNldCAtIHRoaXMuX3N0ZXBzO1xyXG4gICAgICAgICAgICAgICAgdmVjMy5ub3JtYWxpemUodGhpcy5fbm9ybWFsLCBuKTtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdfcG9zaXRpb24gPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09IENBTUVSQV9UWVBFLlRSQUNLSU5HKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3X3Bvc2l0aW9uWzBdID0gcFswXSAtIHN0ZXAgKiBuWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld19wb3NpdGlvblsxXSA9IHBbMV0gLSBzdGVwICogblsxXTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdfcG9zaXRpb25bMl0gPSBwWzJdIC0gc3RlcCAqIG5bMl07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdfcG9zaXRpb25bMF0gPSBwWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld19wb3NpdGlvblsxXSA9IHBbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3X3Bvc2l0aW9uWzJdID0gcFsyXSAtIHN0ZXA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gbmV3X3Bvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RlcHMgPSBvZmZzZXQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIENhbWVyYUVudGl0eS5wcm90b3R5cGUuY2FsY3VsYXRlT3JpZW50YXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBtID0gdGhpcy5fY21hdHJpeDtcclxuICAgICAgICAgICAgbWF0NC5tdWx0aXBseVZlYzQobSwgWzEsIDAsIDAsIDBdLCB0aGlzLl9yaWdodCk7XHJcbiAgICAgICAgICAgIG1hdDQubXVsdGlwbHlWZWM0KG0sIFswLCAxLCAwLCAwXSwgdGhpcy5fdXApO1xyXG4gICAgICAgICAgICBtYXQ0Lm11bHRpcGx5VmVjNChtLCBbMCwgMCwgMSwgMF0sIHRoaXMuX25vcm1hbCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBDYW1lcmFFbnRpdHkucHJvdG90eXBlLmJlZ2luRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbWF0NC5pZGVudGl0eSh0aGlzLl9jbWF0cml4KTtcclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVPcmllbnRhdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHlwZSA9PT0gQ0FNRVJBX1RZUEUuVFJBQ0tJTkcpIHtcclxuICAgICAgICAgICAgICAgIG1hdDQudHJhbnNsYXRlKHRoaXMuX2NtYXRyaXgsIHRoaXMuX3Bvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIG1hdDQucm90YXRlWSh0aGlzLl9jbWF0cml4LCB0aGlzLl9hemltdXRoICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LnJvdGF0ZVgodGhpcy5fY21hdHJpeCwgdGhpcy5fZWxldmF0aW9uICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LnJvdGF0ZVkodGhpcy5fY21hdHJpeCwgdGhpcy5fYXppbXV0aCAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICAgICAgICAgICAgbWF0NC5yb3RhdGVYKHRoaXMuX2NtYXRyaXgsIHRoaXMuX2VsZXZhdGlvbiAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICAgICAgICAgICAgbWF0NC50cmFuc2xhdGUodGhpcy5fY21hdHJpeCwgdGhpcy5fcG9zaXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlT3JpZW50YXRpb24oKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09IENBTUVSQV9UWVBFLlRSQUNLSU5HKSB7XHJcbiAgICAgICAgICAgICAgICBtYXQ0Lm11bHRpcGx5VmVjNChtLCBbMCwgMCwgMCwgMV0sIHRoaXMuX3Bvc2l0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbWVyYUVudGl0eS5wcm90b3R5cGUsIFwibW9kZWxWaWV3XCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbSA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LmludmVyc2UodGhpcy5fY21hdHJpeCwgbSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgQ2FtZXJhRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIENhbWVyYUVudGl0eTtcclxuICAgIH0oRW50aXR5KSk7XHJcbiAgICBCbGF6ZS5DYW1lcmFFbnRpdHkgPSBDYW1lcmFFbnRpdHk7XHJcbiAgICB2YXIgQXhpc0VudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEF4aXNFbnRpdHksIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQXhpc0VudGl0eShncmFwaF9pZCwgZCkge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIGQgPSBkIHx8IDEwMDtcclxuICAgICAgICAgICAgdGhpcy5fdmVydGljZXMgPSBbMC4wLCAwLjAsIDAuMCwgZCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgZCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIDAuMCwgZF07XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGljZXMgPSBbMCwgMSwgMiwgMywgNCwgNV07XHJcbiAgICAgICAgICAgIHRoaXMuX2NvbG9ycyA9IFsxLCAxLCAwLCAxLCAxLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAxLCAwLCAwLCAxLCAxLCAwLCAwLCAxLCAxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgQXhpc0VudGl0eS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdGhpcy5fdmJvID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl92Ym8pO1xyXG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh0aGlzLl92ZXJ0aWNlcyksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAgICAgdGhpcy5faWJvID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuX2libyk7XHJcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheSh0aGlzLl9pbmRpY2VzKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICB0aGlzLl9jYm8gPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2Nibyk7XHJcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX2NvbG9ycyksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEF4aXNFbnRpdHkucHJvdG90eXBlLmJlZ2luRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdmFyIHVXaXJlZnJhbWUgPSB0aGlzLmdldFVuaWZvcm0oXCJ1V2lyZWZyYW1lXCIpO1xyXG4gICAgICAgICAgICBpZiAodVdpcmVmcmFtZSlcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh1V2lyZWZyYW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgdmFyIHVQZXJWZXJ0ZXhDb2xvciA9IHRoaXMuZ2V0VW5pZm9ybShcInVQZXJWZXJ0ZXhDb2xvclwiKTtcclxuICAgICAgICAgICAgaWYgKHVQZXJWZXJ0ZXhDb2xvcilcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh1UGVyVmVydGV4Q29sb3IsIHRydWUpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvKTtcclxuICAgICAgICAgICAgS2V0Y2guZW5hYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fY2JvKTtcclxuICAgICAgICAgICAgS2V0Y2guZW5hYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX2NvbG9yXCIsIHsgc2l6ZTogNCB9KTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faWJvKTtcclxuICAgICAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsLkxJTkVTLCB0aGlzLl9pbmRpY2VzLmxlbmd0aCwgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQXhpc0VudGl0eS5wcm90b3R5cGUuZW5kRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdmFyIHVXaXJlZnJhbWUgPSB0aGlzLmdldFVuaWZvcm0oXCJ1V2lyZWZyYW1lXCIpO1xyXG4gICAgICAgICAgICBpZiAodVdpcmVmcmFtZSlcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh1V2lyZWZyYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHZhciB1UGVyVmVydGV4Q29sb3IgPSB0aGlzLmdldFVuaWZvcm0oXCJ1UGVyVmVydGV4Q29sb3JcIik7XHJcbiAgICAgICAgICAgIGlmICh1UGVyVmVydGV4Q29sb3IpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkodVBlclZlcnRleENvbG9yLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIEtldGNoLmRpc2FibGVBdHRyaWIodGhpcy5ncmFwaElELCBcImFfcG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgIEtldGNoLmRpc2FibGVBdHRyaWIodGhpcy5ncmFwaElELCBcImFfY29sb3JcIik7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQXhpc0VudGl0eTtcclxuICAgIH0oRW50aXR5KSk7XHJcbiAgICBCbGF6ZS5BeGlzRW50aXR5ID0gQXhpc0VudGl0eTtcclxuICAgIHZhciBHcmlkRW50aXR5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoR3JpZEVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBHcmlkRW50aXR5KGdyYXBoX2lkLCBkLCBlKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fZGltZXNpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgZGltOiBkIHx8IDUwLCBsaW5lczogZSB8fCA1MFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBHcmlkRW50aXR5LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZibyA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvKTtcclxuICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodGhpcy5fdmVydGljZXMpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2libyA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9pYm8pO1xyXG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkodGhpcy5faW5kaWNlcyksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEdyaWRFbnRpdHkucHJvdG90eXBlLmJ1aWxkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaW5jID0gMiAqIHRoaXMuX2RpbWVzaW9ucy5kaW0gLyB0aGlzLl9kaW1lc2lvbnMubGluZXM7XHJcbiAgICAgICAgICAgIHZhciB2ID0gW107XHJcbiAgICAgICAgICAgIHZhciBpID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDw9IHRoaXMuX2RpbWVzaW9ucy5saW5lczsgbCsrKSB7XHJcbiAgICAgICAgICAgICAgICB2WzYgKiBsXSA9IC10aGlzLl9kaW1lc2lvbnMuZGltO1xyXG4gICAgICAgICAgICAgICAgdls2ICogbCArIDFdID0gMDtcclxuICAgICAgICAgICAgICAgIHZbNiAqIGwgKyAyXSA9IC10aGlzLl9kaW1lc2lvbnMuZGltICsgKGwgKiBpbmMpO1xyXG4gICAgICAgICAgICAgICAgdls2ICogbCArIDNdID0gdGhpcy5fZGltZXNpb25zLmRpbTtcclxuICAgICAgICAgICAgICAgIHZbNiAqIGwgKyA0XSA9IDA7XHJcbiAgICAgICAgICAgICAgICB2WzYgKiBsICsgNV0gPSAtdGhpcy5fZGltZXNpb25zLmRpbSArIChsICogaW5jKTtcclxuICAgICAgICAgICAgICAgIHZbNiAqICh0aGlzLl9kaW1lc2lvbnMubGluZXMgKyAxKSArIDYgKiBsXSA9IC10aGlzLl9kaW1lc2lvbnMuZGltICsgKGwgKiBpbmMpO1xyXG4gICAgICAgICAgICAgICAgdls2ICogKHRoaXMuX2RpbWVzaW9ucy5saW5lcyArIDEpICsgNiAqIGwgKyAxXSA9IDA7XHJcbiAgICAgICAgICAgICAgICB2WzYgKiAodGhpcy5fZGltZXNpb25zLmxpbmVzICsgMSkgKyA2ICogbCArIDJdID0gLXRoaXMuX2RpbWVzaW9ucy5kaW07XHJcbiAgICAgICAgICAgICAgICB2WzYgKiAodGhpcy5fZGltZXNpb25zLmxpbmVzICsgMSkgKyA2ICogbCArIDNdID0gLXRoaXMuX2RpbWVzaW9ucy5kaW0gKyAobCAqIGluYyk7XHJcbiAgICAgICAgICAgICAgICB2WzYgKiAodGhpcy5fZGltZXNpb25zLmxpbmVzICsgMSkgKyA2ICogbCArIDRdID0gMDtcclxuICAgICAgICAgICAgICAgIHZbNiAqICh0aGlzLl9kaW1lc2lvbnMubGluZXMgKyAxKSArIDYgKiBsICsgNV0gPSB0aGlzLl9kaW1lc2lvbnMuZGltO1xyXG4gICAgICAgICAgICAgICAgaVsyICogbF0gPSAyICogbDtcclxuICAgICAgICAgICAgICAgIGlbMiAqIGwgKyAxXSA9IDIgKiBsICsgMTtcclxuICAgICAgICAgICAgICAgIGlbMiAqICh0aGlzLl9kaW1lc2lvbnMubGluZXMgKyAxKSArIDIgKiBsXSA9IDIgKiAodGhpcy5fZGltZXNpb25zLmxpbmVzICsgMSkgKyAyICogbDtcclxuICAgICAgICAgICAgICAgIGlbMiAqICh0aGlzLl9kaW1lc2lvbnMubGluZXMgKyAxKSArIDIgKiBsICsgMV0gPSAyICogKHRoaXMuX2RpbWVzaW9ucy5saW5lcyArIDEpICsgMiAqIGwgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3ZlcnRpY2VzID0gdjtcclxuICAgICAgICAgICAgdGhpcy5faW5kaWNlcyA9IGk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBHcmlkRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHZhciB1V2lyZWZyYW1lID0gdGhpcy5nZXRVbmlmb3JtKFwidVdpcmVmcmFtZVwiKTtcclxuICAgICAgICAgICAgaWYgKHVXaXJlZnJhbWUpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkodVdpcmVmcmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHZhciB1TWF0ZXJpYWxEaWZmdXNlID0gdGhpcy5nZXRVbmlmb3JtKFwidU1hdGVyaWFsRGlmZnVzZVwiKTtcclxuICAgICAgICAgICAgaWYgKHVNYXRlcmlhbERpZmZ1c2UpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVNYXRlcmlhbERpZmZ1c2UsIFswLjcsIDAuNywgMC43LCAxXSk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl92Ym8pO1xyXG4gICAgICAgICAgICBLZXRjaC5lbmFibGVBdHRyaWIodGhpcy5ncmFwaElELCBcImFfcG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuX2libyk7XHJcbiAgICAgICAgICAgIGdsLmRyYXdFbGVtZW50cyhnbC5MSU5FUywgdGhpcy5faW5kaWNlcy5sZW5ndGgsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEdyaWRFbnRpdHkucHJvdG90eXBlLmVuZERyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHZhciB1V2lyZWZyYW1lID0gdGhpcy5nZXRVbmlmb3JtKFwidVdpcmVmcmFtZVwiKTtcclxuICAgICAgICAgICAgaWYgKHVXaXJlZnJhbWUpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkodVdpcmVmcmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICBLZXRjaC5kaXNhYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEdyaWRFbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuR3JpZEVudGl0eSA9IEdyaWRFbnRpdHk7XHJcbiAgICB2YXIgTm9kZUVsZW1lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIE5vZGVFbGVtZW50KHBhcmVudCwgdHlwZSwgZW50aXR5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudE5vZGUgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wYXJlbnROb2RlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50Tm9kZS5hZGRDaGlsZE5vZGUodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkTm9kZXMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIHRoaXMuX29pZCA9IHV0aWxzLnV1aWQodGhpcy5fdHlwZSB8fCB0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9lbnRpdHkgPSBlbnRpdHk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlRWxlbWVudC5wcm90b3R5cGUsIFwib2lkXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2lkO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZUVsZW1lbnQucHJvdG90eXBlLCBcInBhcmVudFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlRWxlbWVudC5wcm90b3R5cGUsIFwiZW50aXR5XCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZW50aXR5O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChlbnRpdHkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VudGl0eSA9IGVudGl0eTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVFbGVtZW50LnByb3RvdHlwZSwgXCJjaGlsZE5vZGVzXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGROb2RlcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmFkZENoaWxkTm9kZSA9IGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZE5vZGVzLnB1c2goY2hpbGQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUNoaWxkTm9kZSA9IGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoY2hpbGQpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkTm9kZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5nZXRDaGlsZE5vZGVCeUluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZE5vZGVzW2luZGV4XSB8fCB2b2lkIDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuZXhpc3RzQ2hpbGROb2RlID0gZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZE5vZGVzW2luZGV4XSAhPT0gdm9pZCAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyZW50Tm9kZS5yZW1vdmVDaGlsZE5vZGUodGhpcyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ2hpbGROb2RlID0gZnVuY3Rpb24gKHR5cGUsIGVudGl0eSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE5vZGVFbGVtZW50KHRoaXMsIHR5cGUsIGVudGl0eSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuaXNSb290ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50Tm9kZSA9PT0gdm9pZCAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiAoY2hpbGQpIHtcclxuICAgICAgICAgICAgdmFyIG9pZCA9IGNoaWxkLm9pZDtcclxuICAgICAgICAgICAgcmV0dXJuIF8uZmluZEluZGV4KHRoaXMuX2NoaWxkTm9kZXMsIGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLm9pZCA9PT0gb2lkOyB9KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5pbmRleEluUGFyZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUm9vdCgpKVxyXG4gICAgICAgICAgICAgICAgaW5kZXggPSB0aGlzLl9wYXJlbnROb2RlLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5oYXNTaWJsaW5nID0gZnVuY3Rpb24gKHByZXYpIHtcclxuICAgICAgICAgICAgdmFyIF9oYXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Jvb3QoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fcGFyZW50Tm9kZS5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJldikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGFyZW50Tm9kZS5nZXRDaGlsZE5vZGVCeUluZGV4KGluZGV4IC0gMSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGF2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGFyZW50Tm9kZS5nZXRDaGlsZE5vZGVCeUluZGV4KGluZGV4ICsgMSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfaGF2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBfaGF2ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5uZXh0U2libGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSb290KCkgJiYgdGhpcy5oYXNTaWJsaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX3BhcmVudE5vZGUuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgICAgIHNpYmxpbmcgPSB0aGlzLl9wYXJlbnROb2RlLmdldENoaWxkTm9kZUJ5SW5kZXgoaW5kZXggKyAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gc2libGluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5wcmV2aW91c1NpYmxpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzaWJsaW5nID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUm9vdCgpICYmIHRoaXMuaGFzU2libGluZyh0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fcGFyZW50Tm9kZS5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgc2libGluZyA9IHRoaXMuX3BhcmVudE5vZGUuZ2V0Q2hpbGROb2RlQnlJbmRleChpbmRleCAtIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzaWJsaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmZpcnN0Q2hpbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkTm9kZUJ5SW5kZXgoMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUubGFzdENoaWxkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDaGlsZE5vZGVCeUluZGV4KHRoaXMuX2NoaWxkTm9kZXMubGVuZ3RoIC0gMSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQ2hpbGROb2RlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fY2hpbGROb2RlcyA9IFtdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAobWF0cml4U3RhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2VudGl0eSlcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VudGl0eS5iZWdpbkRyYXcobWF0cml4U3RhY2spO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX2NoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHRoaXMuX2NoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICBjaGlsZC5kcmF3KG1hdHJpeFN0YWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZW50aXR5KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50aXR5LmVuZERyYXcobWF0cml4U3RhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIE5vZGVFbGVtZW50O1xyXG4gICAgfSgpKTtcclxuICAgIEJsYXplLk5vZGVFbGVtZW50ID0gTm9kZUVsZW1lbnQ7XHJcbiAgICB2YXIgU2NlbmVHcmFwaCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFNjZW5lR3JhcGgsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU2NlbmVHcmFwaCgpIHtcclxuICAgICAgICAgICAgdmFyIG9pZCA9IHV0aWxzLnV1aWQoKTtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgb2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fb2lkID0gb2lkO1xyXG4gICAgICAgICAgICB0aGlzLl9zY2VuZSA9IG5ldyBOb2RlRWxlbWVudCh2b2lkIDAsIFwiU2NlbmVcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeFN0YWNrID0gbmV3IE1hdHJpeFN0YWNrKHRoaXMuX29pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlckJ1ZmZlciA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9pc0RyYXdpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgS2V0Y2guY3JlYXRlVmlldyh0aGlzLl9vaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2NlbmVHcmFwaC5wcm90b3R5cGUsIFwic2NlbmVcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zY2VuZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjZW5lR3JhcGgucHJvdG90eXBlLCBcImlzRHJhd2luZ1wiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRHJhd2luZztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuRW52aXJvbm1lbnQgPSBmdW5jdGlvbiAoYikge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBiID0gYiB8fCBbXTtcclxuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG4gICAgICAgICAgICBnbC5kZXB0aEZ1bmMoZ2wuTEVRVUFMKTtcclxuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcclxuICAgICAgICAgICAgZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XHJcbiAgICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xyXG4gICAgICAgICAgICBnbC5jbGVhckNvbG9yKGJbMF0gfHwgMCwgYlsxXSB8fCAwLCBiWzJdIHx8IDAsIDEpO1xyXG4gICAgICAgICAgICBnbC5jbGVhckRlcHRoKDEuMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB0aGlzLl9pc0RyYXdpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBnbC52aWV3cG9ydCgwLCAwLCBnbC52aWV3cG9ydFdpZHRoLCBnbC52aWV3cG9ydEhlaWdodCk7XHJcbiAgICAgICAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuICAgICAgICAgICAgdGhpcy5fc2NlbmUuZHJhdyh0aGlzLl9tYXRyaXhTdGFjayk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzRHJhd2luZyA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlTWFpbkNoaWxkTm9kZSA9IGZ1bmN0aW9uICh0eXBlLCBlbnRpdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lLmNyZWF0ZUNoaWxkTm9kZSh0eXBlLCBlbnRpdHkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUucmVtb3ZlTWFpbkNoaWxkTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NjZW5lLnJlbW92ZUNoaWxkTm9kZShub2RlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2VuZUdyYXBoLnByb3RvdHlwZSwgXCJvaWRcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vaWQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLnNldENvbnRleHQgPSBmdW5jdGlvbiAoY2FudmFzKSB7XHJcbiAgICAgICAgICAgIEtldGNoLnNldENhbnZhc1RvQ29udGV4dCh0aGlzLm9pZCwgY2FudmFzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLlByb2dyYW0gPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICB0eXBlID0gdHlwZSB8fCBcIlBob25nXCI7XHJcbiAgICAgICAgICAgIEtldGNoLmNyZWF0ZVByb2dyYW0odGhpcy5fb2lkLCB7XHJcbiAgICAgICAgICAgICAgICBmcmFnbWVudDogU2hhZGVycy5GcmFnbWVudFt0eXBlXSxcclxuICAgICAgICAgICAgICAgIHZlcnRleDogU2hhZGVycy5WZXJ0ZXhbdHlwZV1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVNZXNoID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgICAgICB2YXIgbWVzaEVudGl0eSA9IG5ldyBNZXNoRW50aXR5KHRoaXMub2lkKTtcclxuICAgICAgICAgICAgaWYgKGNvbmZpZy5tZXNoKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNoRW50aXR5LmxvYWRNZXNoQnlPYmplY3QoY29uZmlnLm1lc2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb25maWcubWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIG1lc2hFbnRpdHkubG9hZE1hdGVyaWFsQnlPYmplY3QoY29uZmlnLm1hdGVyaWFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbWVzaEVudGl0eTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZURpZmZ1c2UgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERpZmZ1c2VFbnRpdHkodGhpcy5vaWQsIHYpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlTWVzaEJ5TG9hZGVyID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgICAgICB2YXIgbWVzaCA9IG5ldyBNZXNoRW50aXR5KHRoaXMub2lkLCBjb25maWcubWVzaCwgY29uZmlnLm1hdGVyaWFsLCBjb25maWcudGV4dHVyZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlckJ1ZmZlci5wdXNoKG1lc2gpO1xyXG4gICAgICAgICAgICByZXR1cm4gbWVzaDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1FbnRpdHkodGhpcy5vaWQsIHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVMaWdodCA9IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaWdodEVudGl0eSh0aGlzLm9pZCwgY29uZmlnLmFtYmllbnQsIGNvbmZpZy5kaWZmdXNlLCBjb25maWcucG9zaXRpb24sIGNvbmZpZy5zcGVjdWxhciwgY29uZmlnLmRpcmVjdGlvbiwgY29uZmlnLmN1dG9mZik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVDYW1lcmEgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENhbWVyYUVudGl0eSh0aGlzLm9pZCwgdHlwZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVQYXJ0aWNsZSA9IGZ1bmN0aW9uIChwb2ludFNpemUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJ0aWNsZUVudGl0eSh0aGlzLm9pZCwgcG9pbnRTaXplKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZUF4aXMgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXhpc0VudGl0eSh0aGlzLm9pZCwgbGVuZ3RoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZUdyaWQgPSBmdW5jdGlvbiAoZGltLCBsaW5lcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdyaWRFbnRpdHkodGhpcy5vaWQsIGRpbSwgbGluZXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjZW5lR3JhcGgucHJvdG90eXBlLCBcIk1haW5DYW1lcmFcIiwge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYW1lcmEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdHJpeFN0YWNrLk1haW5DYW1lcmEgPSBjYW1lcmE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLnJlbW92ZVRleHR1cmUgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgS2V0Y2gucmVtb3ZlVGV4dHVyZSh0aGlzLm9pZCwgaWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuc3RhcnRMb2FkZXIgPSBmdW5jdGlvbiAoY2IpIHtcclxuICAgICAgICAgICAgYXN5bmMuZWFjaFNlcmllcyh0aGlzLl9sb2FkZXJCdWZmZXIsIGZ1bmN0aW9uIChpdGVtLCBuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLmxvYWRNZXNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgY2IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY29uZmlndXJlID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcclxuICAgICAgICAgICAgc2VsZi5FbnZpcm9ubWVudChjb25maWcuYmFja2dyb3VuZCk7XHJcbiAgICAgICAgICAgIHNlbGYuUHJvZ3JhbShjb25maWcudHlwZVNoYWRlcik7XHJcbiAgICAgICAgICAgIEtldGNoLnNldEF0dHJpYnV0ZUxvY2F0aW9ucyhzZWxmLl9vaWQsIFNjZW5lR3JhcGguQVRUUklCVVRFUyk7XHJcbiAgICAgICAgICAgIEtldGNoLnNldFVuaWZvcm1Mb2NhdGlvbnMoc2VsZi5fb2lkLCBTY2VuZUdyYXBoLlVOSUZPUk1TKTtcclxuICAgICAgICAgICAgdGhpcy5fbWF0cml4U3RhY2suaW5pdCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY29uZmlndXJlV2l0aExvYWRlciA9IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYuY29uZmlndXJlKCk7XHJcbiAgICAgICAgICAgIHNlbGYuc3RhcnRMb2FkZXIoY2IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5VTklGT1JNUyA9IFtcclxuICAgICAgICAgICAgJ3VQTWF0cml4JyxcclxuICAgICAgICAgICAgJ3VNVk1hdHJpeCcsXHJcbiAgICAgICAgICAgICd1Tk1hdHJpeCcsXHJcbiAgICAgICAgICAgICd1TGlnaHREaXJlY3Rpb24nLFxyXG4gICAgICAgICAgICAndUxpZ2h0QW1iaWVudCcsXHJcbiAgICAgICAgICAgICd1TWF0ZXJpYWxBbWJpZW50JyxcclxuICAgICAgICAgICAgJ3VMaWdodERpZmZ1c2UnLFxyXG4gICAgICAgICAgICAndU1hdGVyaWFsRGlmZnVzZScsXHJcbiAgICAgICAgICAgICd1TGlnaHRTcGVjdWxhcicsXHJcbiAgICAgICAgICAgICd1TWF0ZXJpYWxTcGVjdWxhcicsXHJcbiAgICAgICAgICAgICd1U2hpbmluZXNzJyxcclxuICAgICAgICAgICAgJ3VQb2ludFNpemUnLFxyXG4gICAgICAgICAgICBcInVTYW1wbGVyXCIsXHJcbiAgICAgICAgICAgIFwidVdpcmVmcmFtZVwiLFxyXG4gICAgICAgICAgICBcInVQZXJWZXJ0ZXhDb2xvclwiXHJcbiAgICAgICAgXTtcclxuICAgICAgICBTY2VuZUdyYXBoLkFUVFJJQlVURVMgPSBbJ2FfcG9zaXRpb24nLCAnYV9ub3JtYWwnLCBcImFfY29sb3JcIl07XHJcbiAgICAgICAgcmV0dXJuIFNjZW5lR3JhcGg7XHJcbiAgICB9KFJlbmRlcmFibGUpKTtcclxuICAgIEJsYXplLlNjZW5lR3JhcGggPSBTY2VuZUdyYXBoO1xyXG59KShCbGF6ZSB8fCAoQmxhemUgPSB7fSkpO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
