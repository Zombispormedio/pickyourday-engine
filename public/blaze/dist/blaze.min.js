var __extends=this&&this.__extends||function(t,e){function i(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)},Blaze;!function(t){var e;!function(t){function e(t){for(var e=null,i=["webgl","experimental-webgl","webkit-3d","moz-webgl"],n=0;n<i.length;++n){try{e=t.getContext(i[n])}catch(r){}if(e)break}return null===e?(alert("Could not initialise WebGL"),null):(e.viewportWidth=t.width,e.viewportHeight=t.height,e)}function i(e,i,n,r){var o=e.createBuffer();switch(e.bindBuffer(e.ARRAY_BUFFER,o),r){case t.BUFFER_DRAW.STATIC:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STATIC_DRAW);break;case t.BUFFER_DRAW.DYNAMIC:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.DYNAMIC_DRAW);break;case t.BUFFER_DRAW.STREAM:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STREAM_DRAW);break;default:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STATIC_DRAW)}return e.bindBuffer(e.ARRAY_BUFFER,null),n?(o.itemSize=2,o.numItems=i.length/2):(o.itemSize=3,o.numItems=i.length/3),o}function n(e,i,n){var r=e.createBuffer(e.ELEMENT_ARRAY_BUFFER);switch(e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r),n){case t.BUFFER_DRAW.STATIC:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STATIC_DRAW);break;case t.BUFFER_DRAW.DYNAMIC:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.DYNAMIC_DRAW);break;case t.BUFFER_DRAW.STREAM:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STREAM_DRAW);break;default:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STATIC_DRAW)}return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),r.itemSize=1,r.numItems=i.length,r}function r(t,e){var i=t.createTexture();return t.bindTexture(t.TEXTURE_2D,i),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_NEAREST),t.generateMipmap(t.TEXTURE_2D),t.bindTexture(t.TEXTURE_2D,null),i}function o(t,e,i){var n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS)?n:(console.log(t.getShaderInfoLog(n)),null)}function a(t,e){var i=o(t,t.FRAGMENT_SHADER,e.fragment),n=o(t,t.VERTEX_SHADER,e.vertex),r=t.createProgram();return t.attachShader(r,n),t.attachShader(r,i),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)||alert("No pueden iniciarse los shaders"),t.useProgram(r),r}t.getGLContext=e,function(t){t[t.STATIC=0]="STATIC",t[t.STREAM=1]="STREAM",t[t.DYNAMIC=2]="DYNAMIC"}(t.BUFFER_DRAW||(t.BUFFER_DRAW={}));t.BUFFER_DRAW;t.createBuffer=i,t.createIndexBuffer=n,t.createTexture=r,t.createShader=o,t.createProgram=a}(e=t.WebGLUtils||(t.WebGLUtils={}));var i;!function(t){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}function i(t){var i=e()+e();return t?t+i:i}function n(t){return t.map(function(t){return Number.isNaN(t)&&(t=0),t})}function r(t,e){var i=new XMLHttpRequest;i.open("GET",t,!0),i.addEventListener("load",function(){e(i.responseText)}),i.send()}function o(t){var e=t.split(".");return e[e.length-1]}function a(){return(new Date).getTime()}function s(t){return t*Math.PI/180}function u(t,e){for(var i=0,n=1,r=2,o=[],a=0;a<t.length;a++)o[a]=0;for(var a=0;a<e.length;a+=3){var s=[],u=[],c=[];s[i]=t[3*e[a+1]+i]-t[3*e[a]+i],s[n]=t[3*e[a+1]+n]-t[3*e[a]+n],s[r]=t[3*e[a+1]+r]-t[3*e[a]+r],u[i]=t[3*e[a+2]+i]-t[3*e[a+1]+i],u[n]=t[3*e[a+2]+n]-t[3*e[a+1]+n],u[r]=t[3*e[a+2]+r]-t[3*e[a+1]+r],c[i]=s[n]*u[r]-s[r]*u[n],c[n]=s[r]*u[i]-s[i]*u[r],c[r]=s[i]*u[n]-s[n]*u[i];for(var f=0;3>f;f++)o[3*e[a+f]+i]=o[3*e[a+f]+i]+c[i],o[3*e[a+f]+n]=o[3*e[a+f]+n]+c[n],o[3*e[a+f]+r]=o[3*e[a+f]+r]+c[r]}for(var a=0;a<t.length;a+=3){var h=[];h[i]=o[a+i],h[n]=o[a+n],h[r]=o[a+r];var l=Math.sqrt(h[i]*h[i]+h[n]*h[n]+h[r]*h[r]);0==l&&(l=1e-5),h[i]=h[i]/l,h[n]=h[n]/l,h[r]=h[r]/l,o[a+i]=h[i],o[a+n]=h[n],o[a+r]=h[r]}return o}t.s4=e,t.uuid=i,t.normalizeNaN=n,t.load=r,t.getExtension=o,t.nowInMilliseconds=a,t.degToRad=s,t.calculateNormals=u}(i=t.utils||(t.utils={})),function(t){t[t.ORBITING=0]="ORBITING",t[t.TRACKING=1]="TRACKING"}(t.CAMERA_TYPE||(t.CAMERA_TYPE={}));var n=t.CAMERA_TYPE,r=function(){function t(){}return t.setCanvasToContext=function(i,n){var r=e.getGLContext(n);t.setContext(i,r)},t.setContext=function(e,i){t._views[e].context=i},t.getContext=function(e){return t._views[e].context},t.createProgram=function(i,n){var r=t.getContext(i),o=e.createProgram(r,n);t.setProgram(i,o)},t.setProgram=function(e,i){t._views[e].program=i},t.getProgram=function(e){return t._views[e].program},t.createView=function(e){t._views[e]={}},t.setAttributeLocations=function(e,i){var n=t._views[e],r=n.context,o=n.program;n.attribs=i.reduce(function(t,e){return t[e]=r.getAttribLocation(o,e),t},{})},t.getAttrib=function(e,i){return t._views[e].attribs[i]},t.getUniform=function(e,i){return t._views[e].uniforms[i]},t.setUniformLocations=function(e,i){var n=t._views[e],r=n.context,o=n.program;n.uniforms=i.reduce(function(t,e){return t[e]=r.getUniformLocation(o,e),t},{})},t.enableAttrib=function(e,i,n){var r=t.getAttrib(e,i),o=t.getContext(e);o.enableVertexAttribArray(r),n?o.vertexAttribPointer(r,n.size||3,o.FLOAT,n.normalized||!1,n.stride||0,n.offset||0):o.vertexAttribPointer(r,3,o.FLOAT,!1,0,0)},t.disableAttrib=function(e,i){var n=t.getAttrib(e,i),r=t.getContext(e);r.disableVertexAttribArray(n)},t.renderLoop=function(t){setInterval(t,500)},t.addTexture=function(e,i){var n=t._views[e];n.textures=n.textures||[],n.textures.push(i)},t.activeTexture=function(e,i,n){var r=t._views[e],o=r.context,a=(r.program,r.textures.indexOf(i));if(a>-1){o.activeTexture(0===a?o.TEXTURE0:o.TEXTURE0+a),o.bindTexture(o.TEXTURE_2D,n);var s=t.getUniform(e,"uSampler");o.uniform1i(s,a)}},t._views={},t}();t.Ketch=r;var o=function(){function t(t){this._graph_id=t}return Object.defineProperty(t.prototype,"graphID",{get:function(){return this._graph_id},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"gl",{get:function(){return r.getContext(this.graphID)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"program",{get:function(){return r.getProgram(this.graphID)},enumerable:!0,configurable:!0}),t.prototype.getUniform=function(t){return r.getUniform(this.graphID,t)},t}();t.Renderable=o;var a=function(t){function e(e){t.call(this,e)}return __extends(e,t),e.prototype.beginDraw=function(t){},e.prototype.endDraw=function(t){},e}(o);t.Entity=a;var s=function(t){function e(e){t.call(this,e),this._stack=[],this._mvMatrix=mat4.create(),this._pMatrix=mat4.create(),this._nMatrix=mat4.create()}return __extends(e,t),e.prototype.push=function(){var t=mat4.create();mat4.set(this._mvMatrix,t),this._stack.push(t)},e.prototype.pop=function(){if(0==this._stack.length)throw"invalid popMatrix";this._mvMatrix=this._stack.pop()},e.prototype.ModelView=function(){this._camera?this._mvMatrix=this._camera.modelView:mat4.identity(this._mvMatrix)},Object.defineProperty(e.prototype,"mvMatrix",{get:function(){return this._mvMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pMatrix",{get:function(){return this._pMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nMatrix",{get:function(){return this._nMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"MainCamera",{set:function(t){this._camera=t},enumerable:!0,configurable:!0}),e.prototype.Perspective=function(){var t=this.gl;mat4.identity(this._pMatrix),mat4.perspective(45,t.viewportWidth/t.viewportHeight,.1,1e3,this._pMatrix)},e.prototype.Normal=function(){mat4.identity(this._nMatrix),mat4.set(this._mvMatrix,this._nMatrix),mat4.inverse(this._nMatrix),mat4.transpose(this._nMatrix)},e.prototype.init=function(){this.ModelView(),this.Perspective(),this.Normal()},e.prototype.setUp=function(){var t=this.gl;this.Normal();var e=this.getUniform("uMVMatrix");e&&t.uniformMatrix4fv(e,!1,this._mvMatrix);var i=this.getUniform("uPMatrix");i&&t.uniformMatrix4fv(i,!1,this._pMatrix);var n=this.getUniform("uNMatrix");n&&t.uniformMatrix4fv(n,!1,this._nMatrix)},e}(o);t.MatrixStack=s;var u;!function(t){var n=function(t){function n(e){t.call(this,e)}return __extends(n,t),Object.defineProperty(n.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(t){var e=this,n=this,r=i.getExtension(t);i.load(t,function(t){var i;switch(r){case"obj":i=n.parseOBJ(t);break;case"json":i=n.parseJSON(t)}n.createBuffers(i),e._onload&&e._onload()})},enumerable:!0,configurable:!0}),n.prototype.parseJSON=function(t){var e={};try{e=JSON.parse(t)}catch(i){console.log(i)}return e},n.prototype.parseOBJ=function(t){var e={v:[],vn:[],vt:[],iv:[],"in":[],it:[]},i=t.split("\n"),n=i.filter(function(t){return"v"===t[0]}),r=i.filter(function(t){return"f"===t[0]});n.forEach(function(t){var i=t.replace("\r","").split(" "),n=i[0];e[n]=e[n].concat(i.slice(1).filter(function(t){return""!==t}))});var o=[];return r.forEach(function(t){var e=t.replace("\r","").replace("f","").split(" ");o=o.concat(e.slice(1).filter(function(t){return""!==t}))}),o.forEach(function(t){var i=t.split("/");e.iv.push(parseInt(i[0])-1),e["in"].push(parseInt(i[1])-1),e.it.push(parseInt(i[2])-1)}),e},n.prototype.createBuffers=function(t){function n(t){return e.createBuffer(o,t)}function r(t){return e.createIndexBuffer(o,t)}var o=this.gl;_.defaults(t,{v:[],vn:[],vt:[],iv:[],"in":[],it:[]}),t.v.length>0&&(this._vbo=n(t.v)),t.v.length>0&&t.iv.length>0&&(this._nbo=n(i.calculateNormals(t.v,t.iv))),t.vt.length>0&&(this._tbo=e.createBuffer(o,t.vt,!0)),t.iv.length>0&&(this._ivbo=r(t.iv)),t["in"].length>0&&(this._inbo=r(t["in"])),t.it.length>0&&(this._itbo=r(t.it))},Object.defineProperty(n.prototype,"vbo",{get:function(){return this._vbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"nbo",{get:function(){return this._nbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"tbo",{get:function(){return this._tbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"ivbo",{get:function(){return this._ivbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"inbo",{get:function(){return this._inbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"itbo",{get:function(){return this._itbo},enumerable:!0,configurable:!0}),n}(o);t.MeshBuffers=n;var a=function(t){function n(e){t.call(this,e),this._image=new Image,this._oid=i.uuid(this.constructor.name)}return __extends(n,t),Object.defineProperty(n.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(t){this._image.onload=this.loadTextureImage(this._onload),this._image.src=t},enumerable:!0,configurable:!0}),n.prototype.loadTextureImage=function(t){var i=this,n=this;return function(){i._texture=e.createTexture(n.gl,n._image),r.addTexture(n.graphID,n._oid),t&&t()}},Object.defineProperty(n.prototype,"content",{get:function(){return this._texture},enumerable:!0,configurable:!0}),n}(o);t.MeshTexture=a;var s=function(t){function e(e,i,n,r,o){t.call(this,e),this._ambient=i?vec4.create(i):vec4.create(),this._diffuse=n?vec4.create(n):vec4.create(),this._specular=r?vec4.create(r):vec4.create(),this._shininess=o||200}return __extends(e,t),Object.defineProperty(e.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"src",{set:function(t){var e=this,n=this;i.load(t,function(t){var i=n.parse(t);e._ambient=i.Ka,e._diffuse=i.Kd,e._specular=i.Ks,e.shininess=i.Ns,e._onload&&e._onload()})},enumerable:!0,configurable:!0}),e.prototype.parse=function(t){var e={},i=["Ka","Kd","Ks","Ns"],n=t.split("\n");return n.forEach(function(t){var n=t.split(" "),r=n[0];if(i.indexOf(r)>-1)switch(r){case"Ns":e.Ns=Number(n[1]);break;default:var o=n.slice(1).map(function(t){return Number(t)});o.push(1),e[r]=o}}),e},Object.defineProperty(e.prototype,"ambient",{get:function(){return this._ambient},set:function(t){this._ambient=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"diffuse",{get:function(){return this._diffuse},set:function(t){this._diffuse=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"specular",{get:function(){return this._specular},set:function(t){this._specular=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"shininess",{get:function(){return this._shininess},set:function(t){this._shininess=t},enumerable:!0,configurable:!0}),e}(o);t.MeshMaterial=s}(u=t.Resources||(t.Resources={}));var c;!function(t){var e=function(){function t(){}return t.Main="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform float uShininess;\nuniform vec3 uLightDirection;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\nuniform vec4 uLightSpecular;\n\nuniform vec4 uMaterialAmbient;\nuniform vec4 uMaterialDiffuse;\nuniform vec4 uMaterialSpecular;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\n\nvoid main(){\n        vec3 L= normalize(uLightDirection);\n        vec3 N= normalize(vNormal);\n        float lambertTerm=dot(N, -L);\n        \n        vec4 Ia= uLightAmbient*uMaterialAmbient;\n        \n        vec4 Id=vec4(0.0,0.0,0.0,1.0);\n        \n        vec4 Is=vec4(0.0,0.0,0.0,1.0);\n        \n        if(lambertTerm>0.0)\n        {\n            Id=uLightDiffuse*uMaterialDiffuse*lambertTerm;\n            \n            vec3 E= normalize(vEyeVec);\n            vec3 R= reflect(L, N);\n            float specular=pow(max(dot(R,E),0.0), uShininess);\n            Is=uLightSpecular*uMaterialSpecular*specular;\n        }\n        \n        vec4 finalColor=Ia+Id+Is;\n        finalColor.a=1.0;\n    \n        gl_FragColor =finalColor;\n    }\n\n\n",t}();t.Fragment=e;var i=function(){function t(){}return t.Main="attribute vec3 a_position;\nattribute vec3 a_normal;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\n\nvoid main(){\n\n    vec4 vertex = uMVMatrix * vec4(a_position, 1.0);\n    \n   vNormal = vec3(uNMatrix * vec4(a_normal, 1.0));\n   vEyeVec=-vec3(vertex.xyz);   \n  gl_Position =uPMatrix * vertex;\n\n}\n\n\n",t}();t.Vertex=i}(c=t.Shaders||(t.Shaders={}));var f=function(t){function e(e,i,n,r){t.call(this,e),this._frequency=i,this._interval_id=null,this._callback=r}return __extends(e,t),e.prototype.onFrame=function(){if(e.ElapseTime=i.nowInMilliseconds(),!(e.ElapseTime<5)){for(var t=Math.floor(e.ElapseTime/this._frequency);t>0&&e.Count!=this._times;)this._callback(),t--,e.Count++;e.Count===this._times&&this.stop()}},e.prototype.start=function(){this._intime=i.nowInMilliseconds(),this._interval_id=setInterval(this.onFrame,this._frequency/1e3)},e.prototype.stop=function(){this._interval_id&&clearInterval(this._interval_id)},e.prototype.beginDraw=function(){},e.prototype.endDraw=function(){},e.Count=0,e}(a);t.AnimationEntity=f;var h=function(t){function e(e,i,n,r){t.call(this,e),this._material=null,this._texture=null,this._buffers=null,this._meshfile=i||null,this._materialfile=n||null,this._texturefile=r||null}return __extends(e,t),e.prototype.loadBuffers=function(t,e){this._buffers=new u.MeshBuffers(this.graphID),this._buffers.onload=e,this._buffers.src=t},e.prototype.loadTexture=function(t,e){this._texture=new u.MeshTexture(this.graphID),this._texture.onload=e,this._texture.src=t},Object.defineProperty(e.prototype,"material",{set:function(t){this._material=t},enumerable:!0,configurable:!0}),e.prototype.loadMaterial=function(t,e){this._material=new u.MeshMaterial(this.graphID),this._material.onload=e,this._material.src=t},e.prototype.loadMesh=function(t){var e=this,i=this;async.waterfall([function(t){return i._meshfile?(console.log("Loading Buffers"),void i.loadBuffers(i._meshfile,function(){console.log("Loaded Buffers"),t()})):t()},function(t){return e._texturefile?(console.log("Loading Texture"),void i.loadTexture(i._texturefile,function(){console.log("Loaded Texture"),t()})):t()},function(t){return i._materialfile?(console.log("Loading Material"),void i.loadMaterial(i._materialfile,function(){console.log("Loaded Material"),t()})):t()}],function(e){return e?console.log(e):void(t&&t())})},e.prototype.loadMeshByObject=function(t){this._buffers=new u.MeshBuffers(this.graphID),this._buffers.createBuffers(t)},e.prototype.loadMaterialByObject=function(t){this._material=new u.MeshMaterial(this.graphID),t.ambient&&(this._material.ambient=t.ambient),t.specular&&(this._material.specular=t.specular),t.diffuse&&(this._material.diffuse=t.diffuse),t.shininess&&(this._material.shininess=t.shininess)},e.prototype.setMaterialUniforms=function(){if(this._material){var t=this.gl;if(this._material.ambient){var e=this.getUniform("uMaterialAmbient");e&&t.uniform4fv(e,this._material.ambient)}if(this._material.diffuse){var i=this.getUniform("uMaterialDiffuse");i&&t.uniform4fv(i,this._material.diffuse)}if(this._material.specular){var n=this.getUniform("uMaterialSpecular");n&&t.uniform4fv(n,this._material.specular)}if(this._material.shininess){var r=this.getUniform("uShininess");r&&t.uniform1f(r,this._material.shininess)}}},e.prototype.beginDraw=function(){var t=this.gl;this.setMaterialUniforms(),t.bindBuffer(t.ARRAY_BUFFER,this._buffers.vbo),r.enableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,this._buffers.nbo),r.enableAttrib(this.graphID,"a_normal");var e=this._buffers.ivbo;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e),t.drawElements(t.TRIANGLES,e.numItems,t.UNSIGNED_SHORT,0)},e.prototype.endDraw=function(){var t=this.gl;r.disableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},e}(a);t.MeshEntity=h;var l=function(t){function e(e,i,n,r){t.call(this,e),this._matrix=mat4.create(),this._position=i||vec3.create(),this._size=n||vec3.create([1,1,1]),this._rotation=r||{angle:0,axis:vec3.create()}}return __extends(e,t),e.prototype.identity=function(){mat4.identity(this._matrix)},e.prototype.setMatrix=function(t){this._matrix=t},e.prototype.transpose=function(){mat4.transpose(this._matrix,this._matrix)},Object.defineProperty(e.prototype,"position",{get:function(){return this._position},set:function(t){this._position=t},enumerable:!0,configurable:!0}),e.prototype.setAbsolutePosition=function(t,e,i){this._position=[t,e,i]},e.prototype.translate=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._position,r=vec3.create([t,e,i]);vec3.add(n,r,this._position)},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},set:function(t){this._size=t},enumerable:!0,configurable:!0}),e.prototype.setSize=function(t,e,i){this._size=[t,e,i]},e.prototype.scale=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._size,r=vec3.create([t,e,i]);vec3.add(n,r,this._size)},Object.defineProperty(e.prototype,"rotation",{get:function(){return this._rotation},set:function(t){this._rotation=t},enumerable:!0,configurable:!0}),e.prototype.setRotation=function(t,e){t&&(this._rotation.angle=t),e&&(this._rotation.axis=e)},e.prototype.setAngle=function(t){this._rotation.angle=t},e.prototype.setAxis=function(t){this._rotation.axis=t},e.prototype.rotateAngle=function(t){void 0===t&&(t=0),this._rotation.angle+=t},e.prototype.moveAxis=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._rotation.axis,r=vec3.create([t,e,i]);vec3.add(n,r,this._rotation.axis)},e.prototype.beginDraw=function(t){if(t.push(),t.ModelView(),this._matrix=t.mvMatrix,void 0!=this._position&&mat4.translate(this._matrix,this._position),void 0!=this._size&&mat4.scale(this._matrix,this._size),void 0!=this._rotation){var e=this._rotation.angle*Math.PI/180;mat4.rotate(this._matrix,e,this._rotation.axis)}t.setUp()},e.prototype.endDraw=function(t){t.pop()},e}(a);t.TransformEntity=l;var p=function(t){function e(e,i,n,r,o,a,s){t.call(this,e),this._ambient=i?vec4.create(i):null,this._diffuse=n?vec4.create(n):null,this._position=r?vec4.create(r):null,this._specular=o?vec4.create(o):null,this._direction=a?vec3.create(a):null,this._cutoff=s}return __extends(e,t),Object.defineProperty(e.prototype,"ambient",{get:function(){return this._ambient},set:function(t){this._ambient=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"diffuse",{get:function(){return this._diffuse},set:function(t){this._diffuse=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"specular",{get:function(){return this._specular},set:function(t){this._specular=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._diffuse},set:function(t){this._position=i.normalizeNaN(vec3.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"direction",{get:function(){return this._direction},set:function(t){this._direction=i.normalizeNaN(vec3.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cutOff",{get:function(){return this._cutoff},set:function(t){this._cutoff=t},enumerable:!0,configurable:!0}),e.prototype.beginDraw=function(){var t=this.gl;if(this._ambient){var e=this.getUniform("uLightAmbient");e&&t.uniform4fv(e,this._ambient)}if(this._diffuse){var i=this.getUniform("uLightDiffuse");i&&t.uniform4fv(i,this._diffuse)}if(this._specular){var n=this.getUniform("uLightSpecular");n&&t.uniform4fv(n,this._specular)}if(this._position){var r=this.getUniform("uLightPosition");r&&t.uniform3fv(r,this._position)}if(this._direction){var o=this.getUniform("uLightDirection");o&&t.uniform3fv(o,this._direction)}},e.prototype.endDraw=function(){},e}(a);t.LightEntity=p;var d=function(t){function e(e,i){t.call(this,e),this._type=i||n.ORBITING,this._cmatrix=mat4.create(),mat4.identity(this._cmatrix),this._up=vec3.create(),this._right=vec3.create(),this._normal=vec3.create(),this._position=vec3.create(),this._azimuth=0,this._elevation=0,this._steps=0}return __extends(e,t),Object.defineProperty(e.prototype,"type",{set:function(t){this._type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._position},set:function(t){this._position=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"azimuth",{get:function(){return this._azimuth},set:function(t){var e=t-this._azimuth;this._azimuth+=e,(this._azimuth>360||this._azimuth<-360)&&(this._azimuth=this._azimuth%360)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"elevation",{get:function(){return this._elevation},set:function(t){var e=t-this._elevation;this._elevation+=e,(this._elevation>360||this._elevation<-360)&&(this._elevation=this._elevation%360)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"zoom",{get:function(){return this._steps},set:function(t){var e=vec3.create(),i=vec3.create();e=this.position;var r=t-this._steps;vec3.normalize(this._normal,i);var o=vec3.create();this._type===n.TRACKING?(o[0]=e[0]-r*i[0],o[1]=e[1]-r*i[1],o[2]=e[2]-r*i[2]):(o[0]=e[0],o[1]=e[1],o[2]=e[2]-r),this.position=o,this._steps=t},enumerable:!0,configurable:!0}),e.prototype.calculateOrientation=function(){var t=this._cmatrix;mat4.multiplyVec4(t,[1,0,0,0],this._right),mat4.multiplyVec4(t,[0,1,0,0],this._up),mat4.multiplyVec4(t,[0,0,1,0],this._normal)},e.prototype.beginDraw=function(){mat4.identity(this._cmatrix),this.calculateOrientation(),this._type===n.TRACKING?(mat4.translate(this._cmatrix,this._position),mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180)):(mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180),mat4.translate(this._cmatrix,this._position)),this.calculateOrientation(),this._type===n.TRACKING&&mat4.multiplyVec4(m,[0,0,0,1],this._position)},Object.defineProperty(e.prototype,"modelView",{get:function(){var t=mat4.create();return mat4.inverse(this._cmatrix,t),t},enumerable:!0,configurable:!0}),e.prototype.endDraw=function(){},e}(a);t.CameraEntity=d;var v=function(){function t(t,e,n){this._parentNode=t,this._parentNode&&this._parentNode.addChildNode(this),this._childNodes=[],this._type=e,this._oid=i.uuid(this._type||this.constructor.name),this._entity=n}return Object.defineProperty(t.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return this._parentNode},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"entity",{get:function(){return this._entity},set:function(t){this._entity=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this._childNodes},enumerable:!0,configurable:!0}),t.prototype.addChildNode=function(t){this._childNodes.push(t)},t.prototype.removeChildNode=function(t){var e=this.indexOf(t);e>-1&&this._childNodes.splice(e,1)},t.prototype.getChildNodeByIndex=function(t){return this._childNodes[t]||void 0},t.prototype.existsChildNode=function(t){return void 0!==this._childNodes[t]},t.prototype["delete"]=function(){this._parentNode.removeChildNode(this)},t.prototype.createChildNode=function(e,i){return new t(this,e,i)},t.prototype.isRoot=function(){return void 0===this._parentNode},t.prototype.indexOf=function(t){var e=t.oid;return _.findIndex(this._childNodes,function(t){return t.oid===e})},t.prototype.indexInParent=function(){var t=-1;return this.isRoot()||(t=this._parentNode.indexOf(this)),t},t.prototype.hasSibling=function(t){var e=!1;if(!this.isRoot()){var i=this._parentNode.indexOf(this);i>-1&&(t?this._parentNode.getChildNodeByIndex(i-1)&&(e=!0):this._parentNode.getChildNodeByIndex(i+1)&&(e=!0))}return e},t.prototype.nextSibling=function(){var t=null;if(!this.isRoot()&&this.hasSibling()){var e=this._parentNode.indexOf(this);t=this._parentNode.getChildNodeByIndex(e+1)}return t},t.prototype.previousSibling=function(){var t=null;if(!this.isRoot()&&this.hasSibling(!0)){var e=this._parentNode.indexOf(this);t=this._parentNode.getChildNodeByIndex(e-1)}return t},t.prototype.firstChild=function(){return this.getChildNodeByIndex(0)},t.prototype.lastChild=function(){return this.getChildNodeByIndex(this._childNodes.length-1)},t.prototype.removeChildNodes=function(){this._childNodes=[]},t.prototype.draw=function(t){this._entity&&this._entity.beginDraw(t);for(var e=0;e<this._childNodes.length;e++){var i=this._childNodes[e];i.draw(t)}this._entity&&this._entity.endDraw(t)},t}();t.NodeElement=v;var b=function(t){function e(){var e=i.uuid();t.call(this,e),this._oid=e,this._scene=new v(void 0,"Scene"),this._matrixStack=new s(this._oid),this._loaderBuffer=[],this._isDrawing=!1,r.createView(this._oid)}return __extends(e,t),Object.defineProperty(e.prototype,"scene",{get:function(){return this._scene},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isDrawing",{get:function(){return this._isDrawing},enumerable:!0,configurable:!0}),e.prototype.Environment=function(){var t=this.gl;t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.clearColor(0,0,0,1),t.clearDepth(1)},e.prototype.draw=function(){var t=this.gl;this._isDrawing=!0,t.viewport(0,0,t.viewportWidth,t.viewportHeight),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),this._scene.draw(this._matrixStack),this._isDrawing=!1},e.prototype.createMainChildNode=function(t,e){return this._scene.createChildNode(t,e)},Object.defineProperty(e.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),e.prototype.setContext=function(t){r.setCanvasToContext(this.oid,t)},e.prototype.Program=function(){r.createProgram(this._oid,{fragment:c.Fragment.Main,vertex:c.Vertex.Main})},e.prototype.createMesh=function(t,e){var i=new h(this.oid);return t&&i.loadMeshByObject(t),e&&i.loadMaterialByObject(e),i},e.prototype.createMeshByLoader=function(t){var e=new h(this.oid,t.mesh,t.material,t.texture);return this._loaderBuffer.push(e),e},e.prototype.createTransform=function(t,e,i){return new l(this.oid,t,e,i)},e.prototype.createLight=function(t){return new p(this.oid,t.ambient,t.diffuse,t.position,t.specular,t.direction,t.cutoff)},e.prototype.createCamera=function(t){return new d(this.oid,t)},Object.defineProperty(e.prototype,"MainCamera",{set:function(t){this._matrixStack.MainCamera=t},enumerable:!0,configurable:!0}),e.prototype.startLoader=function(t){async.eachSeries(this._loaderBuffer,function(t,e){t.loadMesh(function(){console.log(t),e()})},t)},e.prototype.configure=function(){var t=this;t.Environment(),t.Program(),r.setAttributeLocations(t._oid,e.ATTRIBUTES),r.setUniformLocations(t._oid,e.UNIFORMS),this._matrixStack.init()},e.prototype.configureWithLoader=function(t){var e=this;e.configure(),e.startLoader(t)},e.UNIFORMS=["uPMatrix","uMVMatrix","uNMatrix","uLightDirection","uLightAmbient","uMaterialAmbient","uLightDiffuse","uMaterialDiffuse","uLightSpecular","uMaterialSpecular","uShininess"],e.ATTRIBUTES=["a_position","a_normal"],e}(o);t.SceneGraph=b}(Blaze||(Blaze={}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsYXplLmpzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsInRoaXMiLCJkIiwiYiIsIl9fIiwiY29uc3RydWN0b3IiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJCbGF6ZSIsIldlYkdMVXRpbHMiLCJnZXRHTENvbnRleHQiLCJjYW52YXMiLCJjdHgiLCJuYW1lcyIsImkiLCJsZW5ndGgiLCJnZXRDb250ZXh0IiwiZSIsImFsZXJ0Iiwidmlld3BvcnRXaWR0aCIsIndpZHRoIiwidmlld3BvcnRIZWlnaHQiLCJoZWlnaHQiLCJjcmVhdGVCdWZmZXIiLCJnbCIsImRhdGEiLCJpczJEIiwidHlwZV9kcmF3IiwiYnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsIkJVRkZFUl9EUkFXIiwiU1RBVElDIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwiRFlOQU1JQyIsIkRZTkFNSUNfRFJBVyIsIlNUUkVBTSIsIlNUUkVBTV9EUkFXIiwiaXRlbVNpemUiLCJudW1JdGVtcyIsImNyZWF0ZUluZGV4QnVmZmVyIiwiaW5kZXhCdWZmZXIiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIlVpbnQxNkFycmF5IiwiY3JlYXRlVGV4dHVyZSIsInRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiTElORUFSIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTElORUFSX01JUE1BUF9ORUFSRVNUIiwiZ2VuZXJhdGVNaXBtYXAiLCJjcmVhdGVTaGFkZXIiLCJ0eXBlIiwic2hhZGVyU291cmNlIiwic2hhZGVyIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiY29uc29sZSIsImxvZyIsImdldFNoYWRlckluZm9Mb2ciLCJjcmVhdGVQcm9ncmFtIiwic2hhZGVycyIsImZyYWdtZW50U2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwiZnJhZ21lbnQiLCJ2ZXJ0ZXhTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwidmVydGV4IiwicHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwidXNlUHJvZ3JhbSIsInV0aWxzIiwiczQiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsInV1aWQiLCJuYW1lIiwiaWQiLCJub3JtYWxpemVOYU4iLCJ2ZWMiLCJtYXAiLCJhIiwiTnVtYmVyIiwiaXNOYU4iLCJsb2FkIiwidXJsIiwiY2FsbGJhY2siLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc3BvbnNlVGV4dCIsInNlbmQiLCJnZXRFeHRlbnNpb24iLCJzdHIiLCJlbGVtcyIsInNwbGl0Iiwibm93SW5NaWxsaXNlY29uZHMiLCJEYXRlIiwiZ2V0VGltZSIsImRlZ1RvUmFkIiwiUEkiLCJjYWxjdWxhdGVOb3JtYWxzIiwidnMiLCJpbmQiLCJ4IiwieSIsInoiLCJucyIsInYxIiwidjIiLCJub3JtYWwiLCJqIiwibm4iLCJsZW4iLCJzcXJ0IiwiQ0FNRVJBX1RZUEUiLCJLZXRjaCIsInNldENhbnZhc1RvQ29udGV4dCIsImtleSIsImNvbnRleHQiLCJzZXRDb250ZXh0IiwiX3ZpZXdzIiwic2V0UHJvZ3JhbSIsImdldFByb2dyYW0iLCJjcmVhdGVWaWV3Iiwic2V0QXR0cmlidXRlTG9jYXRpb25zIiwiYXR0cmlic19uYW1lcyIsInZpZXciLCJwcmciLCJhdHRyaWJzIiwicmVkdWNlIiwicHJldiIsImF0dHIiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImdldEF0dHJpYiIsInZpZXdfa2V5IiwiYXR0cl9rZXkiLCJnZXRVbmlmb3JtIiwidW5pZm9ybV9rZXkiLCJ1bmlmb3JtcyIsInNldFVuaWZvcm1Mb2NhdGlvbnMiLCJ1bmlmb3JtX25hbWVzIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiZW5hYmxlQXR0cmliIiwicG9pbnRlciIsImluZGV4IiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwic2l6ZSIsIkZMT0FUIiwibm9ybWFsaXplZCIsInN0cmlkZSIsIm9mZnNldCIsImRpc2FibGVBdHRyaWIiLCJkaXNhYmxlVmVydGV4QXR0cmliQXJyYXkiLCJyZW5kZXJMb29wIiwiY2IiLCJzZXRJbnRlcnZhbCIsImFkZFRleHR1cmUiLCJ0ZXh0dXJlX2lkIiwidGV4dHVyZXMiLCJwdXNoIiwiYWN0aXZlVGV4dHVyZSIsImluZGV4T2YiLCJURVhUVVJFMCIsInVTYW1wbGVyIiwidW5pZm9ybTFpIiwiUmVuZGVyYWJsZSIsImdyYXBoX2lkIiwiX2dyYXBoX2lkIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZ3JhcGhJRCIsIkVudGl0eSIsIl9zdXBlciIsImNhbGwiLCJiZWdpbkRyYXciLCJtYXRyaXhTdGFjayIsImVuZERyYXciLCJNYXRyaXhTdGFjayIsIl9zdGFjayIsIl9tdk1hdHJpeCIsIm1hdDQiLCJfcE1hdHJpeCIsIl9uTWF0cml4IiwiY29weSIsInNldCIsInBvcCIsIk1vZGVsVmlldyIsIl9jYW1lcmEiLCJtb2RlbFZpZXciLCJpZGVudGl0eSIsImNhbWVyYSIsIlBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmUiLCJOb3JtYWwiLCJpbnZlcnNlIiwidHJhbnNwb3NlIiwiaW5pdCIsInNldFVwIiwibXZNYXRyaXgiLCJ1bmlmb3JtTWF0cml4NGZ2IiwicE1hdHJpeCIsIm5NYXRyaXgiLCJSZXNvdXJjZXMiLCJNZXNoQnVmZmVycyIsIl9vbmxvYWQiLCJzcmMiLCJfdGhpcyIsInNlbGYiLCJleHQiLCJvYmoiLCJwYXJzZU9CSiIsInBhcnNlSlNPTiIsImNyZWF0ZUJ1ZmZlcnMiLCJKU09OIiwicGFyc2UiLCJ2Iiwidm4iLCJ2dCIsIml2IiwiaW4iLCJpdCIsImxpbmVzIiwiZmlsdGVyIiwiZm9yRWFjaCIsIml0ZW0iLCJyZXBsYWNlIiwiY29uY2F0Iiwic2xpY2UiLCJ0ZW1wSW5kZXgiLCJwYXJzZUludCIsIl8iLCJkZWZhdWx0cyIsIl92Ym8iLCJfbmJvIiwiX3RibyIsIl9pdmJvIiwiX2luYm8iLCJfaXRibyIsIk1lc2hUZXh0dXJlIiwiX2ltYWdlIiwiSW1hZ2UiLCJfb2lkIiwiZmlsZW5hbWUiLCJvbmxvYWQiLCJsb2FkVGV4dHVyZUltYWdlIiwiX3RleHR1cmUiLCJNZXNoTWF0ZXJpYWwiLCJhbWJpZW50IiwiZGlmZnVzZSIsInNwZWN1bGFyIiwic2hpbmluZXNzIiwiX2FtYmllbnQiLCJ2ZWM0IiwiX2RpZmZ1c2UiLCJfc3BlY3VsYXIiLCJfc2hpbmluZXNzIiwidGVtcCIsIkthIiwiS2QiLCJLcyIsIk5zIiwia2V5cyIsImxpbmUiLCJTaGFkZXJzIiwiRnJhZ21lbnQiLCJNYWluIiwiVmVydGV4IiwiQW5pbWF0aW9uRW50aXR5IiwiZnJlcXVlbmN5IiwidGltZXMiLCJfZnJlcXVlbmN5IiwiX2ludGVydmFsX2lkIiwiX2NhbGxiYWNrIiwib25GcmFtZSIsIkVsYXBzZVRpbWUiLCJzdGVwcyIsIkNvdW50IiwiX3RpbWVzIiwic3RvcCIsInN0YXJ0IiwiX2ludGltZSIsImNsZWFySW50ZXJ2YWwiLCJNZXNoRW50aXR5IiwibWVzaGZpbGUiLCJtYXRlcmlhbGZpbGUiLCJ0ZXh0dXJlZmlsZSIsIl9tYXRlcmlhbCIsIl9idWZmZXJzIiwiX21lc2hmaWxlIiwiX21hdGVyaWFsZmlsZSIsIl90ZXh0dXJlZmlsZSIsImxvYWRCdWZmZXJzIiwibG9hZFRleHR1cmUiLCJsb2FkTWF0ZXJpYWwiLCJsb2FkTWVzaCIsImFzeW5jIiwid2F0ZXJmYWxsIiwibmV4dCIsImVyciIsImxvYWRNZXNoQnlPYmplY3QiLCJsb2FkTWF0ZXJpYWxCeU9iamVjdCIsInNldE1hdGVyaWFsVW5pZm9ybXMiLCJ1TWF0ZXJpYWxBbWJpZW50IiwidW5pZm9ybTRmdiIsInVNYXRlcmlhbERpZmZ1c2UiLCJ1TWF0ZXJpYWxTcGVjdWxhciIsInVTaGluaW5lc3MiLCJ1bmlmb3JtMWYiLCJ2Ym8iLCJuYm8iLCJpdmJvIiwiZHJhd0VsZW1lbnRzIiwiVFJJQU5HTEVTIiwiVU5TSUdORURfU0hPUlQiLCJUcmFuc2Zvcm1FbnRpdHkiLCJwb3NpdGlvbiIsInJvdGF0aW9uIiwiX21hdHJpeCIsIl9wb3NpdGlvbiIsInZlYzMiLCJfc2l6ZSIsIl9yb3RhdGlvbiIsImFuZ2xlIiwiYXhpcyIsInNldE1hdHJpeCIsIm5ld19tYXRyaXgiLCJzZXRBYnNvbHV0ZVBvc2l0aW9uIiwidHJhbnNsYXRlIiwib3BlcmFuZDEiLCJvcGVyYW5kMiIsImFkZCIsInNldFNpemUiLCJzY2FsZSIsInNldFJvdGF0aW9uIiwic2V0QW5nbGUiLCJzZXRBeGlzIiwicm90YXRlQW5nbGUiLCJtb3ZlQXhpcyIsInJhZCIsInJvdGF0ZSIsIkxpZ2h0RW50aXR5IiwiZGlyZWN0aW9uIiwiY3V0b2ZmIiwiX2RpcmVjdGlvbiIsIl9jdXRvZmYiLCJ1TGlnaHRBbWJpZW50IiwidUxpZ2h0RGlmZnVzZSIsInVMaWdodFNwZWN1bGFyIiwidUxpZ2h0UG9zaXRpb24iLCJ1bmlmb3JtM2Z2IiwidURpcmVjdGlvbiIsIkNhbWVyYUVudGl0eSIsIl90eXBlIiwiT1JCSVRJTkciLCJfY21hdHJpeCIsIl91cCIsIl9yaWdodCIsIl9ub3JtYWwiLCJfYXppbXV0aCIsIl9lbGV2YXRpb24iLCJfc3RlcHMiLCJwb3MiLCJheiIsInRlbXBfYXoiLCJlbCIsInRlbXBfZWwiLCJuIiwic3RlcCIsIm5vcm1hbGl6ZSIsIm5ld19wb3NpdGlvbiIsIlRSQUNLSU5HIiwiY2FsY3VsYXRlT3JpZW50YXRpb24iLCJtIiwibXVsdGlwbHlWZWM0Iiwicm90YXRlWSIsInJvdGF0ZVgiLCJOb2RlRWxlbWVudCIsInBhcmVudCIsImVudGl0eSIsIl9wYXJlbnROb2RlIiwiYWRkQ2hpbGROb2RlIiwiX2NoaWxkTm9kZXMiLCJfZW50aXR5IiwiY2hpbGQiLCJyZW1vdmVDaGlsZE5vZGUiLCJzcGxpY2UiLCJnZXRDaGlsZE5vZGVCeUluZGV4IiwiZXhpc3RzQ2hpbGROb2RlIiwiY3JlYXRlQ2hpbGROb2RlIiwiaXNSb290Iiwib2lkIiwiZmluZEluZGV4IiwicyIsImluZGV4SW5QYXJlbnQiLCJoYXNTaWJsaW5nIiwiX2hhdmUiLCJuZXh0U2libGluZyIsInNpYmxpbmciLCJwcmV2aW91c1NpYmxpbmciLCJmaXJzdENoaWxkIiwibGFzdENoaWxkIiwicmVtb3ZlQ2hpbGROb2RlcyIsImRyYXciLCJTY2VuZUdyYXBoIiwiX3NjZW5lIiwiX21hdHJpeFN0YWNrIiwiX2xvYWRlckJ1ZmZlciIsIl9pc0RyYXdpbmciLCJFbnZpcm9ubWVudCIsImVuYWJsZSIsIkRFUFRIX1RFU1QiLCJkZXB0aEZ1bmMiLCJMRVFVQUwiLCJCTEVORCIsImJsZW5kRnVuYyIsIlNSQ19BTFBIQSIsIk9ORV9NSU5VU19TUkNfQUxQSEEiLCJwaXhlbFN0b3JlaSIsIlVOUEFDS19GTElQX1lfV0VCR0wiLCJjbGVhckNvbG9yIiwiY2xlYXJEZXB0aCIsInZpZXdwb3J0IiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsImNyZWF0ZU1haW5DaGlsZE5vZGUiLCJQcm9ncmFtIiwiY3JlYXRlTWVzaCIsIm1lc2giLCJtYXRlcmlhbCIsIm1lc2hFbnRpdHkiLCJjcmVhdGVNZXNoQnlMb2FkZXIiLCJjb25maWciLCJjcmVhdGVUcmFuc2Zvcm0iLCJjcmVhdGVMaWdodCIsImNyZWF0ZUNhbWVyYSIsIk1haW5DYW1lcmEiLCJzdGFydExvYWRlciIsImVhY2hTZXJpZXMiLCJjb25maWd1cmUiLCJBVFRSSUJVVEVTIiwiVU5JRk9STVMiLCJjb25maWd1cmVXaXRoTG9hZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSxXQUFhQyxNQUFRQSxLQUFLRCxXQUFjLFNBQVVFLEVBQUdDLEdBRXJE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QVVrYyxhQUFlLFNBQVUzWSxHQUMxQyxNQUFPLElBQUl1VCxHQUFhclgsS0FBSzRaLElBQUs5VixJQUV0Q3RELE9BQU9vTCxlQUFlNk8sRUFBV2xhLFVBQVcsY0FDeEN1TSxJQUFLLFNBQVVNLEdBQ1hwTixLQUFLMmEsYUFBYStCLFdBQWF0UCxHQUVuQ3RCLFlBQVksRUFDWkMsY0FBYyxJQUVsQjBPLEVBQVdsYSxVQUFVb2MsWUFBYyxTQUFVN1IsR0FDekMrSSxNQUFNK0ksV0FBVzVjLEtBQUs0YSxjQUFlLFNBQVV0TCxFQUFNeUUsR0FDakR6RSxFQUFLc0UsU0FBUyxXQUNWeFAsUUFBUUMsSUFBSWlMLEdBQ1p5RSxPQUVMakosSUFFUDJQLEVBQVdsYSxVQUFVc2MsVUFBWSxXQUM3QixHQUFJeE8sR0FBT3JPLElBQ1hxTyxHQUFLeU0sY0FDTHpNLEVBQUsyTixVQUNMMVQsRUFBTVMsc0JBQXNCc0YsRUFBS2tDLEtBQU1rSyxFQUFXcUMsWUFDbER4VSxFQUFNd0Isb0JBQW9CdUUsRUFBS2tDLEtBQU1rSyxFQUFXc0MsVUFDaEQvYyxLQUFLMmEsYUFBYWpOLFFBRXRCK00sRUFBV2xhLFVBQVV5YyxvQkFBc0IsU0FBVWxTLEdBQ2pELEdBQUl1RCxHQUFPck8sSUFDWHFPLEdBQUt3TyxZQUNMeE8sRUFBS3NPLFlBQVk3UixJQUVyQjJQLEVBQVdzQyxVQUNQLFdBQ0EsWUFDQSxXQUNBLGtCQUNBLGdCQUNBLG1CQUNBLGdCQUNBLG1CQUNBLGlCQUNBLG9CQUNBLGNBRUp0QyxFQUFXcUMsWUFBYyxhQUFjLFlBQ2hDckMsR0FDVGhQLEVBQ0YvSyxHQUFNK1osV0FBYUEsR0FDcEIvWixRQUFVQSIsImZpbGUiOiJibGF6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBCbGF6ZTtcclxuKGZ1bmN0aW9uIChCbGF6ZSkge1xyXG4gICAgdmFyIFdlYkdMVXRpbHM7XHJcbiAgICAoZnVuY3Rpb24gKFdlYkdMVXRpbHMpIHtcclxuICAgICAgICBmdW5jdGlvbiBnZXRHTENvbnRleHQoY2FudmFzKSB7XHJcbiAgICAgICAgICAgIHZhciBjdHggPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgbmFtZXMgPSBbXCJ3ZWJnbFwiLCBcImV4cGVyaW1lbnRhbC13ZWJnbFwiLCBcIndlYmtpdC0zZFwiLCBcIm1vei13ZWJnbFwiXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChuYW1lc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY3R4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGN0eCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJDb3VsZCBub3QgaW5pdGlhbGlzZSBXZWJHTFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3R4LnZpZXdwb3J0V2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjdHgudmlld3BvcnRIZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBXZWJHTFV0aWxzLmdldEdMQ29udGV4dCA9IGdldEdMQ29udGV4dDtcclxuICAgICAgICAoZnVuY3Rpb24gKEJVRkZFUl9EUkFXKSB7XHJcbiAgICAgICAgICAgIEJVRkZFUl9EUkFXW0JVRkZFUl9EUkFXW1wiU1RBVElDXCJdID0gMF0gPSBcIlNUQVRJQ1wiO1xyXG4gICAgICAgICAgICBCVUZGRVJfRFJBV1tCVUZGRVJfRFJBV1tcIlNUUkVBTVwiXSA9IDFdID0gXCJTVFJFQU1cIjtcclxuICAgICAgICAgICAgQlVGRkVSX0RSQVdbQlVGRkVSX0RSQVdbXCJEWU5BTUlDXCJdID0gMl0gPSBcIkRZTkFNSUNcIjtcclxuICAgICAgICB9KShXZWJHTFV0aWxzLkJVRkZFUl9EUkFXIHx8IChXZWJHTFV0aWxzLkJVRkZFUl9EUkFXID0ge30pKTtcclxuICAgICAgICB2YXIgQlVGRkVSX0RSQVcgPSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcihnbCwgZGF0YSwgaXMyRCwgdHlwZV9kcmF3KSB7XHJcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcik7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZV9kcmF3KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFdlYkdMVXRpbHMuQlVGRkVSX0RSQVcuU1RBVElDOlxyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KGRhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFdlYkdMVXRpbHMuQlVGRkVSX0RSQVcuRFlOQU1JQzpcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShkYXRhKSwgZ2wuRFlOQU1JQ19EUkFXKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgV2ViR0xVdGlscy5CVUZGRVJfRFJBVy5TVFJFQU06XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoZGF0YSksIGdsLlNUUkVBTV9EUkFXKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KGRhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBpZiAoaXMyRCkge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyLml0ZW1TaXplID0gMjtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5udW1JdGVtcyA9IGRhdGEubGVuZ3RoIC8gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5pdGVtU2l6ZSA9IDM7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIubnVtSXRlbXMgPSBkYXRhLmxlbmd0aCAvIDM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViR0xVdGlscy5jcmVhdGVCdWZmZXIgPSBjcmVhdGVCdWZmZXI7XHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlSW5kZXhCdWZmZXIoZ2wsIGRhdGEsIHR5cGVfZHJhdykge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRleEJ1ZmZlcik7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZV9kcmF3KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFdlYkdMVXRpbHMuQlVGRkVSX0RSQVcuU1RBVElDOlxyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheShkYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXLkRZTkFNSUM6XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KGRhdGEpLCBnbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXLlNUUkVBTTpcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkoZGF0YSksIGdsLlNUUkVBTV9EUkFXKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheShkYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBpbmRleEJ1ZmZlci5pdGVtU2l6ZSA9IDE7XHJcbiAgICAgICAgICAgIGluZGV4QnVmZmVyLm51bUl0ZW1zID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleEJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViR0xVdGlscy5jcmVhdGVJbmRleEJ1ZmZlciA9IGNyZWF0ZUluZGV4QnVmZmVyO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoZ2wsIGRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xyXG4gICAgICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGRhdGEpO1xyXG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcclxuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUl9NSVBNQVBfTkVBUkVTVCk7XHJcbiAgICAgICAgICAgIGdsLmdlbmVyYXRlTWlwbWFwKGdsLlRFWFRVUkVfMkQpO1xyXG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHR1cmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdlYkdMVXRpbHMuY3JlYXRlVGV4dHVyZSA9IGNyZWF0ZVRleHR1cmU7XHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlU2hhZGVyKGdsLCB0eXBlLCBzaGFkZXJTb3VyY2UpIHtcclxuICAgICAgICAgICAgdmFyIHNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcih0eXBlKTtcclxuICAgICAgICAgICAgZ2wuc2hhZGVyU291cmNlKHNoYWRlciwgc2hhZGVyU291cmNlKTtcclxuICAgICAgICAgICAgZ2wuY29tcGlsZVNoYWRlcihzaGFkZXIpO1xyXG4gICAgICAgICAgICBpZiAoIWdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ2wuZ2V0U2hhZGVySW5mb0xvZyhzaGFkZXIpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzaGFkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdlYkdMVXRpbHMuY3JlYXRlU2hhZGVyID0gY3JlYXRlU2hhZGVyO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW0oZ2wsIHNoYWRlcnMpIHtcclxuICAgICAgICAgICAgdmFyIGZyYWdtZW50U2hhZGVyID0gY3JlYXRlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNoYWRlcnMuZnJhZ21lbnQpO1xyXG4gICAgICAgICAgICB2YXIgdmVydGV4U2hhZGVyID0gY3JlYXRlU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzaGFkZXJzLnZlcnRleCk7XHJcbiAgICAgICAgICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG4gICAgICAgICAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcclxuICAgICAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIGZyYWdtZW50U2hhZGVyKTtcclxuICAgICAgICAgICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XHJcbiAgICAgICAgICAgIGlmICghZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUykpXHJcbiAgICAgICAgICAgICAgICBhbGVydChcIk5vIHB1ZWRlbiBpbmljaWFyc2UgbG9zIHNoYWRlcnNcIik7XHJcbiAgICAgICAgICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7XHJcbiAgICAgICAgICAgIHJldHVybiBwcm9ncmFtO1xyXG4gICAgICAgIH1cclxuICAgICAgICBXZWJHTFV0aWxzLmNyZWF0ZVByb2dyYW0gPSBjcmVhdGVQcm9ncmFtO1xyXG4gICAgfSkoV2ViR0xVdGlscyA9IEJsYXplLldlYkdMVXRpbHMgfHwgKEJsYXplLldlYkdMVXRpbHMgPSB7fSkpO1xyXG4gICAgdmFyIHV0aWxzO1xyXG4gICAgKGZ1bmN0aW9uICh1dGlscykge1xyXG4gICAgICAgIGZ1bmN0aW9uIHM0KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcclxuICAgICAgICAgICAgICAgIC50b1N0cmluZygxNilcclxuICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHV0aWxzLnM0ID0gczQ7XHJcbiAgICAgICAgZnVuY3Rpb24gdXVpZChuYW1lKSB7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHM0KCkgKyBzNCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZSA/IG5hbWUgKyBpZCA6IGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy51dWlkID0gdXVpZDtcclxuICAgICAgICBmdW5jdGlvbiBub3JtYWxpemVOYU4odmVjKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2ZWMubWFwKGZ1bmN0aW9uIChhKSB7IGlmIChOdW1iZXIuaXNOYU4oYSkpXHJcbiAgICAgICAgICAgICAgICBhID0gMDsgcmV0dXJuIGE7IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5ub3JtYWxpemVOYU4gPSBub3JtYWxpemVOYU47XHJcbiAgICAgICAgZnVuY3Rpb24gbG9hZCh1cmwsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub3BlbignR0VUJywgdXJsLCB0cnVlKTtcclxuICAgICAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2socmVxdWVzdC5yZXNwb25zZVRleHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHV0aWxzLmxvYWQgPSBsb2FkO1xyXG4gICAgICAgIGZ1bmN0aW9uIGdldEV4dGVuc2lvbihzdHIpIHtcclxuICAgICAgICAgICAgdmFyIGVsZW1zID0gc3RyLnNwbGl0KFwiLlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1zW2VsZW1zLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5nZXRFeHRlbnNpb24gPSBnZXRFeHRlbnNpb247XHJcbiAgICAgICAgZnVuY3Rpb24gbm93SW5NaWxsaXNlY29uZHMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5ub3dJbk1pbGxpc2Vjb25kcyA9IG5vd0luTWlsbGlzZWNvbmRzO1xyXG4gICAgICAgIGZ1bmN0aW9uIGRlZ1RvUmFkKGQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGQgKiBNYXRoLlBJIC8gMTgwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5kZWdUb1JhZCA9IGRlZ1RvUmFkO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZU5vcm1hbHModnMsIGluZCkge1xyXG4gICAgICAgICAgICB2YXIgeCA9IDA7XHJcbiAgICAgICAgICAgIHZhciB5ID0gMTtcclxuICAgICAgICAgICAgdmFyIHogPSAyO1xyXG4gICAgICAgICAgICB2YXIgbnMgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgbnNbaV0gPSAwLjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmQubGVuZ3RoOyBpID0gaSArIDMpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2MSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHYyID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsID0gW107XHJcbiAgICAgICAgICAgICAgICAvL3AxIC0gcDBcclxuICAgICAgICAgICAgICAgIHYxW3hdID0gdnNbMyAqIGluZFtpICsgMV0gKyB4XSAtIHZzWzMgKiBpbmRbaV0gKyB4XTtcclxuICAgICAgICAgICAgICAgIHYxW3ldID0gdnNbMyAqIGluZFtpICsgMV0gKyB5XSAtIHZzWzMgKiBpbmRbaV0gKyB5XTtcclxuICAgICAgICAgICAgICAgIHYxW3pdID0gdnNbMyAqIGluZFtpICsgMV0gKyB6XSAtIHZzWzMgKiBpbmRbaV0gKyB6XTtcclxuICAgICAgICAgICAgICAgIC8vIHAwIC0gcDFcclxuICAgICAgICAgICAgICAgIHYyW3hdID0gdnNbMyAqIGluZFtpICsgMl0gKyB4XSAtIHZzWzMgKiBpbmRbaSArIDFdICsgeF07XHJcbiAgICAgICAgICAgICAgICB2Mlt5XSA9IHZzWzMgKiBpbmRbaSArIDJdICsgeV0gLSB2c1szICogaW5kW2kgKyAxXSArIHldO1xyXG4gICAgICAgICAgICAgICAgdjJbel0gPSB2c1szICogaW5kW2kgKyAyXSArIHpdIC0gdnNbMyAqIGluZFtpICsgMV0gKyB6XTtcclxuICAgICAgICAgICAgICAgIC8vcDIgLSBwMVxyXG4gICAgICAgICAgICAgICAgLy8gdjFbeF0gPSB2c1szKmluZFtpKzJdK3hdIC0gdnNbMyppbmRbaSsxXSt4XTtcclxuICAgICAgICAgICAgICAgIC8vIHYxW3ldID0gdnNbMyppbmRbaSsyXSt5XSAtIHZzWzMqaW5kW2krMV0reV07XHJcbiAgICAgICAgICAgICAgICAvLyB2MVt6XSA9IHZzWzMqaW5kW2krMl0rel0gLSB2c1szKmluZFtpKzFdK3pdO1xyXG4gICAgICAgICAgICAgICAgLy8gcDAgLSBwMVxyXG4gICAgICAgICAgICAgICAgLy8gdjJbeF0gPSB2c1szKmluZFtpXSt4XSAtIHZzWzMqaW5kW2krMV0reF07XHJcbiAgICAgICAgICAgICAgICAvLyB2Mlt5XSA9IHZzWzMqaW5kW2ldK3ldIC0gdnNbMyppbmRbaSsxXSt5XTtcclxuICAgICAgICAgICAgICAgIC8vIHYyW3pdID0gdnNbMyppbmRbaV0rel0gLSB2c1szKmluZFtpKzFdK3pdO1xyXG4gICAgICAgICAgICAgICAgLy9jcm9zcyBwcm9kdWN0IGJ5IFNhcnJ1cyBSdWxlXHJcbiAgICAgICAgICAgICAgICBub3JtYWxbeF0gPSB2MVt5XSAqIHYyW3pdIC0gdjFbel0gKiB2Mlt5XTtcclxuICAgICAgICAgICAgICAgIG5vcm1hbFt5XSA9IHYxW3pdICogdjJbeF0gLSB2MVt4XSAqIHYyW3pdO1xyXG4gICAgICAgICAgICAgICAgbm9ybWFsW3pdID0gdjFbeF0gKiB2Mlt5XSAtIHYxW3ldICogdjJbeF07XHJcbiAgICAgICAgICAgICAgICAvLyBuc1szKmluZFtpXSt4XSArPSBub3JtYWxbeF07XHJcbiAgICAgICAgICAgICAgICAvLyBuc1szKmluZFtpXSt5XSArPSBub3JtYWxbeV07XHJcbiAgICAgICAgICAgICAgICAvLyBuc1szKmluZFtpXSt6XSArPSBub3JtYWxbel07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IDM7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5zWzMgKiBpbmRbaSArIGpdICsgeF0gPSBuc1szICogaW5kW2kgKyBqXSArIHhdICsgbm9ybWFsW3hdO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zWzMgKiBpbmRbaSArIGpdICsgeV0gPSBuc1szICogaW5kW2kgKyBqXSArIHldICsgbm9ybWFsW3ldO1xyXG4gICAgICAgICAgICAgICAgICAgIG5zWzMgKiBpbmRbaSArIGpdICsgel0gPSBuc1szICogaW5kW2kgKyBqXSArIHpdICsgbm9ybWFsW3pdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vbm9ybWFsaXplIHRoZSByZXN1bHRcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2cy5sZW5ndGg7IGkgPSBpICsgMykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5uID0gW107XHJcbiAgICAgICAgICAgICAgICBublt4XSA9IG5zW2kgKyB4XTtcclxuICAgICAgICAgICAgICAgIG5uW3ldID0gbnNbaSArIHldO1xyXG4gICAgICAgICAgICAgICAgbm5bel0gPSBuc1tpICsgel07XHJcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gTWF0aC5zcXJ0KChublt4XSAqIG5uW3hdKSArIChublt5XSAqIG5uW3ldKSArIChublt6XSAqIG5uW3pdKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVuID09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgbGVuID0gMC4wMDAwMTtcclxuICAgICAgICAgICAgICAgIG5uW3hdID0gbm5beF0gLyBsZW47XHJcbiAgICAgICAgICAgICAgICBublt5XSA9IG5uW3ldIC8gbGVuO1xyXG4gICAgICAgICAgICAgICAgbm5bel0gPSBublt6XSAvIGxlbjtcclxuICAgICAgICAgICAgICAgIG5zW2kgKyB4XSA9IG5uW3hdO1xyXG4gICAgICAgICAgICAgICAgbnNbaSArIHldID0gbm5beV07XHJcbiAgICAgICAgICAgICAgICBuc1tpICsgel0gPSBublt6XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHV0aWxzLmNhbGN1bGF0ZU5vcm1hbHMgPSBjYWxjdWxhdGVOb3JtYWxzO1xyXG4gICAgfSkodXRpbHMgPSBCbGF6ZS51dGlscyB8fCAoQmxhemUudXRpbHMgPSB7fSkpO1xyXG4gICAgKGZ1bmN0aW9uIChDQU1FUkFfVFlQRSkge1xyXG4gICAgICAgIENBTUVSQV9UWVBFW0NBTUVSQV9UWVBFW1wiT1JCSVRJTkdcIl0gPSAwXSA9IFwiT1JCSVRJTkdcIjtcclxuICAgICAgICBDQU1FUkFfVFlQRVtDQU1FUkFfVFlQRVtcIlRSQUNLSU5HXCJdID0gMV0gPSBcIlRSQUNLSU5HXCI7XHJcbiAgICB9KShCbGF6ZS5DQU1FUkFfVFlQRSB8fCAoQmxhemUuQ0FNRVJBX1RZUEUgPSB7fSkpO1xyXG4gICAgdmFyIENBTUVSQV9UWVBFID0gQmxhemUuQ0FNRVJBX1RZUEU7XHJcbiAgICB2YXIgS2V0Y2ggPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIEtldGNoKCkge1xyXG4gICAgICAgIH1cclxuICAgICAgICBLZXRjaC5zZXRDYW52YXNUb0NvbnRleHQgPSBmdW5jdGlvbiAoa2V5LCBjYW52YXMpIHtcclxuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBXZWJHTFV0aWxzLmdldEdMQ29udGV4dChjYW52YXMpO1xyXG4gICAgICAgICAgICBLZXRjaC5zZXRDb250ZXh0KGtleSwgY29udGV4dCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKGtleSwgY29udGV4dCkge1xyXG4gICAgICAgICAgICBLZXRjaC5fdmlld3Nba2V5XS5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmdldENvbnRleHQgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5fdmlld3Nba2V5XS5jb250ZXh0O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guY3JlYXRlUHJvZ3JhbSA9IGZ1bmN0aW9uIChrZXksIHNoYWRlcnMpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gS2V0Y2guZ2V0Q29udGV4dChrZXkpO1xyXG4gICAgICAgICAgICB2YXIgcHJvZ3JhbSA9IFdlYkdMVXRpbHMuY3JlYXRlUHJvZ3JhbShnbCwgc2hhZGVycyk7XHJcbiAgICAgICAgICAgIEtldGNoLnNldFByb2dyYW0oa2V5LCBwcm9ncmFtKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLnNldFByb2dyYW0gPSBmdW5jdGlvbiAoa2V5LCBwcm9ncmFtKSB7XHJcbiAgICAgICAgICAgIEtldGNoLl92aWV3c1trZXldLnByb2dyYW0gPSBwcm9ncmFtO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZ2V0UHJvZ3JhbSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtldGNoLl92aWV3c1trZXldLnByb2dyYW07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5jcmVhdGVWaWV3ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICBLZXRjaC5fdmlld3Nba2V5XSA9IHt9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guc2V0QXR0cmlidXRlTG9jYXRpb25zID0gZnVuY3Rpb24gKGtleSwgYXR0cmlic19uYW1lcykge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IEtldGNoLl92aWV3c1trZXldO1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB2aWV3LmNvbnRleHQ7XHJcbiAgICAgICAgICAgIHZhciBwcmcgPSB2aWV3LnByb2dyYW07XHJcbiAgICAgICAgICAgIHZpZXcuYXR0cmlicyA9IGF0dHJpYnNfbmFtZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBhdHRyKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2W2F0dHJdID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJnLCBhdHRyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5nZXRBdHRyaWIgPSBmdW5jdGlvbiAodmlld19rZXksIGF0dHJfa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5fdmlld3Nbdmlld19rZXldLmF0dHJpYnNbYXR0cl9rZXldO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZ2V0VW5pZm9ybSA9IGZ1bmN0aW9uICh2aWV3X2tleSwgdW5pZm9ybV9rZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtldGNoLl92aWV3c1t2aWV3X2tleV0udW5pZm9ybXNbdW5pZm9ybV9rZXldO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guc2V0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uIChrZXksIHVuaWZvcm1fbmFtZXMpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBLZXRjaC5fdmlld3Nba2V5XTtcclxuICAgICAgICAgICAgdmFyIGdsID0gdmlldy5jb250ZXh0O1xyXG4gICAgICAgICAgICB2YXIgcHJnID0gdmlldy5wcm9ncmFtO1xyXG4gICAgICAgICAgICB2aWV3LnVuaWZvcm1zID0gdW5pZm9ybV9uYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGF0dHIpIHtcclxuICAgICAgICAgICAgICAgIHByZXZbYXR0cl0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBhdHRyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5lbmFibGVBdHRyaWIgPSBmdW5jdGlvbiAodmlld19rZXksIGF0dHJfa2V5LCBwb2ludGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IEtldGNoLmdldEF0dHJpYih2aWV3X2tleSwgYXR0cl9rZXkpO1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSBLZXRjaC5nZXRDb250ZXh0KHZpZXdfa2V5KTtcclxuICAgICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAocG9pbnRlcikge1xyXG4gICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihpbmRleCwgcG9pbnRlci5zaXplIHx8IDMsIGdsLkZMT0FULCBwb2ludGVyLm5vcm1hbGl6ZWQgfHwgZmFsc2UsIHBvaW50ZXIuc3RyaWRlIHx8IDAsIHBvaW50ZXIub2Zmc2V0IHx8IDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihpbmRleCwgMywgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZGlzYWJsZUF0dHJpYiA9IGZ1bmN0aW9uICh2aWV3X2tleSwgYXR0cl9rZXkpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gS2V0Y2guZ2V0QXR0cmliKHZpZXdfa2V5LCBhdHRyX2tleSk7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IEtldGNoLmdldENvbnRleHQodmlld19rZXkpO1xyXG4gICAgICAgICAgICBnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2gucmVuZGVyTG9vcCA9IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICBzZXRJbnRlcnZhbChjYiwgNTAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmFkZFRleHR1cmUgPSBmdW5jdGlvbiAoa2V5LCB0ZXh0dXJlX2lkKSB7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gS2V0Y2guX3ZpZXdzW2tleV07XHJcbiAgICAgICAgICAgIHZpZXcudGV4dHVyZXMgPSB2aWV3LnRleHR1cmVzIHx8IFtdO1xyXG4gICAgICAgICAgICB2aWV3LnRleHR1cmVzLnB1c2godGV4dHVyZV9pZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5hY3RpdmVUZXh0dXJlID0gZnVuY3Rpb24gKGtleSwgdGV4dHVyZV9pZCwgdGV4dHVyZSkge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IEtldGNoLl92aWV3c1trZXldO1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB2aWV3LmNvbnRleHQ7XHJcbiAgICAgICAgICAgIHZhciBwcmcgPSB2aWV3LnByb2dyYW07XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHZpZXcudGV4dHVyZXMuaW5kZXhPZih0ZXh0dXJlX2lkKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoaW5kZXggPT09IDAgPyBnbC5URVhUVVJFMCA6IGdsLlRFWFRVUkUwICsgaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdVNhbXBsZXIgPSBLZXRjaC5nZXRVbmlmb3JtKGtleSwgXCJ1U2FtcGxlclwiKTtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh1U2FtcGxlciwgaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5fdmlld3MgPSB7fTtcclxuICAgICAgICByZXR1cm4gS2V0Y2g7XHJcbiAgICB9KCkpO1xyXG4gICAgQmxhemUuS2V0Y2ggPSBLZXRjaDtcclxuICAgIHZhciBSZW5kZXJhYmxlID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBSZW5kZXJhYmxlKGdyYXBoX2lkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2dyYXBoX2lkID0gZ3JhcGhfaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZW5kZXJhYmxlLnByb3RvdHlwZSwgXCJncmFwaElEXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ3JhcGhfaWQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZW5kZXJhYmxlLnByb3RvdHlwZSwgXCJnbFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEtldGNoLmdldENvbnRleHQodGhpcy5ncmFwaElEKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlbmRlcmFibGUucHJvdG90eXBlLCBcInByb2dyYW1cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBLZXRjaC5nZXRQcm9ncmFtKHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFJlbmRlcmFibGUucHJvdG90eXBlLmdldFVuaWZvcm0gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5nZXRVbmlmb3JtKHRoaXMuZ3JhcGhJRCwga2V5KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBSZW5kZXJhYmxlO1xyXG4gICAgfSgpKTtcclxuICAgIEJsYXplLlJlbmRlcmFibGUgPSBSZW5kZXJhYmxlO1xyXG4gICAgdmFyIEVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBFbnRpdHkoZ3JhcGhfaWQpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBFbnRpdHkucHJvdG90eXBlLmJlZ2luRHJhdyA9IGZ1bmN0aW9uIChtYXRyaXhTdGFjaykge1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKG1hdHJpeFN0YWNrKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gRW50aXR5O1xyXG4gICAgfShSZW5kZXJhYmxlKSk7XHJcbiAgICBCbGF6ZS5FbnRpdHkgPSBFbnRpdHk7XHJcbiAgICB2YXIgTWF0cml4U3RhY2sgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhNYXRyaXhTdGFjaywgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBNYXRyaXhTdGFjayhncmFwaF9pZCkge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YWNrID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX212TWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fcE1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25NYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNvcHkgPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICBtYXQ0LnNldCh0aGlzLl9tdk1hdHJpeCwgY29weSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YWNrLnB1c2goY29weSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhY2subGVuZ3RoID09IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBcImludmFsaWQgcG9wTWF0cml4XCI7XHJcbiAgICAgICAgICAgIHRoaXMuX212TWF0cml4ID0gdGhpcy5fc3RhY2sucG9wKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUuTW9kZWxWaWV3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fY2FtZXJhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tdk1hdHJpeCA9IHRoaXMuX2NhbWVyYS5tb2RlbFZpZXc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LmlkZW50aXR5KHRoaXMuX212TWF0cml4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hdHJpeFN0YWNrLnByb3RvdHlwZSwgXCJtdk1hdHJpeFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX212TWF0cml4O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWF0cml4U3RhY2sucHJvdG90eXBlLCBcInBNYXRyaXhcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wTWF0cml4O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWF0cml4U3RhY2sucHJvdG90eXBlLCBcIm5NYXRyaXhcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9uTWF0cml4O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWF0cml4U3RhY2sucHJvdG90eXBlLCBcIk1haW5DYW1lcmFcIiwge1xyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYW1lcmEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbWVyYSA9IGNhbWVyYTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTWF0cml4U3RhY2sucHJvdG90eXBlLlBlcnNwZWN0aXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBtYXQ0LmlkZW50aXR5KHRoaXMuX3BNYXRyaXgpO1xyXG4gICAgICAgICAgICBtYXQ0LnBlcnNwZWN0aXZlKDQ1LCBnbC52aWV3cG9ydFdpZHRoIC8gZ2wudmlld3BvcnRIZWlnaHQsIDAuMSwgMTAwMC4wLCB0aGlzLl9wTWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1hdHJpeFN0YWNrLnByb3RvdHlwZS5Ob3JtYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1hdDQuaWRlbnRpdHkodGhpcy5fbk1hdHJpeCk7XHJcbiAgICAgICAgICAgIG1hdDQuc2V0KHRoaXMuX212TWF0cml4LCB0aGlzLl9uTWF0cml4KTtcclxuICAgICAgICAgICAgbWF0NC5pbnZlcnNlKHRoaXMuX25NYXRyaXgpO1xyXG4gICAgICAgICAgICBtYXQ0LnRyYW5zcG9zZSh0aGlzLl9uTWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1hdHJpeFN0YWNrLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLk1vZGVsVmlldygpO1xyXG4gICAgICAgICAgICB0aGlzLlBlcnNwZWN0aXZlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuTm9ybWFsKCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUuc2V0VXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHRoaXMuTm9ybWFsKCk7XHJcbiAgICAgICAgICAgIHZhciBtdk1hdHJpeCA9IHRoaXMuZ2V0VW5pZm9ybShcInVNVk1hdHJpeFwiKTtcclxuICAgICAgICAgICAgaWYgKG12TWF0cml4KVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihtdk1hdHJpeCwgZmFsc2UsIHRoaXMuX212TWF0cml4KTtcclxuICAgICAgICAgICAgdmFyIHBNYXRyaXggPSB0aGlzLmdldFVuaWZvcm0oXCJ1UE1hdHJpeFwiKTtcclxuICAgICAgICAgICAgaWYgKHBNYXRyaXgpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KHBNYXRyaXgsIGZhbHNlLCB0aGlzLl9wTWF0cml4KTtcclxuICAgICAgICAgICAgdmFyIG5NYXRyaXggPSB0aGlzLmdldFVuaWZvcm0oXCJ1Tk1hdHJpeFwiKTtcclxuICAgICAgICAgICAgaWYgKG5NYXRyaXgpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtTWF0cml4NGZ2KG5NYXRyaXgsIGZhbHNlLCB0aGlzLl9uTWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBNYXRyaXhTdGFjaztcclxuICAgIH0oUmVuZGVyYWJsZSkpO1xyXG4gICAgQmxhemUuTWF0cml4U3RhY2sgPSBNYXRyaXhTdGFjaztcclxuICAgIHZhciBSZXNvdXJjZXM7XHJcbiAgICAoZnVuY3Rpb24gKFJlc291cmNlcykge1xyXG4gICAgICAgIHZhciBNZXNoQnVmZmVycyA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhNZXNoQnVmZmVycywgX3N1cGVyKTtcclxuICAgICAgICAgICAgZnVuY3Rpb24gTWVzaEJ1ZmZlcnMoZ3JhcGhfaWQpIHtcclxuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcIm9ubG9hZFwiLCB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29ubG9hZCA9IGNiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoQnVmZmVycy5wcm90b3R5cGUsIFwic3JjXCIsIHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHNyYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBleHQgPSB1dGlscy5nZXRFeHRlbnNpb24oc3JjKTtcclxuICAgICAgICAgICAgICAgICAgICB1dGlscy5sb2FkKHNyYywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iajtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJvYmpcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLnBhcnNlT0JKKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImpzb25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBzZWxmLnBhcnNlSlNPTihkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNyZWF0ZUJ1ZmZlcnMob2JqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9vbmxvYWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25sb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgTWVzaEJ1ZmZlcnMucHJvdG90eXBlLnBhcnNlSlNPTiA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgTWVzaEJ1ZmZlcnMucHJvdG90eXBlLnBhcnNlT0JKID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdjogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgdm46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHZ0OiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBpdjogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgaW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0OiBbXVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciBsaW5lcyA9IGRhdGEuc3BsaXQoXCJcXG5cIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmVydGV4ID0gbGluZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gPT09ICd2JztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbGluZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gPT09ICdmJztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmVydGV4LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSBpdGVtLnJlcGxhY2UoXCJcXHJcIiwgXCJcIikuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBlbGVtc1swXTtcclxuICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IG9ialtrZXldLmNvbmNhdChlbGVtcy5zbGljZSgxKS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgIT09IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcEluZGV4ID0gW107XHJcbiAgICAgICAgICAgICAgICBpbmRleC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gaXRlbS5yZXBsYWNlKFwiXFxyXCIsIFwiXCIpLnJlcGxhY2UoXCJmXCIsIFwiXCIpLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wSW5kZXggPSB0ZW1wSW5kZXguY29uY2F0KGVsZW1zLnNsaWNlKDEpLmZpbHRlcihmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAhPT0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRlbXBJbmRleC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gaXRlbS5zcGxpdChcIi9cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLml2LnB1c2gocGFyc2VJbnQoZWxlbXNbMF0pIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLmluLnB1c2gocGFyc2VJbnQoZWxlbXNbMV0pIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqLml0LnB1c2gocGFyc2VJbnQoZWxlbXNbMl0pIC0gMSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE1lc2hCdWZmZXJzLnByb3RvdHlwZS5jcmVhdGVCdWZmZXJzID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgICAgIF8uZGVmYXVsdHMob2JqLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdjogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgdm46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHZ0OiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBpdjogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgaW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0OiBbXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVCdWZmZXIoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBXZWJHTFV0aWxzLmNyZWF0ZUJ1ZmZlcihnbCwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLnYubGVuZ3RoID4gMClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92Ym8gPSBjcmVhdGVCdWZmZXIob2JqLnYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iai52Lmxlbmd0aCA+IDAgJiYgb2JqLml2Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9uYm8gPSBjcmVhdGVCdWZmZXIodXRpbHMuY2FsY3VsYXRlTm9ybWFscyhvYmoudiwgb2JqLml2KSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLnZ0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90Ym8gPSBXZWJHTFV0aWxzLmNyZWF0ZUJ1ZmZlcihnbCwgb2JqLnZ0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUluZGV4QnVmZmVyKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gV2ViR0xVdGlscy5jcmVhdGVJbmRleEJ1ZmZlcihnbCwgZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLml2Lmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXZibyA9IGNyZWF0ZUluZGV4QnVmZmVyKG9iai5pdik7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLmluLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5ibyA9IGNyZWF0ZUluZGV4QnVmZmVyKG9iai5pbik7XHJcbiAgICAgICAgICAgICAgICBpZiAob2JqLml0Lmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faXRibyA9IGNyZWF0ZUluZGV4QnVmZmVyKG9iai5pdCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoQnVmZmVycy5wcm90b3R5cGUsIFwidmJvXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92Ym87XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hCdWZmZXJzLnByb3RvdHlwZSwgXCJuYm9cIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25ibztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcInRib1wiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGJvO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoQnVmZmVycy5wcm90b3R5cGUsIFwiaXZib1wiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXZibztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcImluYm9cIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2luYm87XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hCdWZmZXJzLnByb3RvdHlwZSwgXCJpdGJvXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGJvO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBNZXNoQnVmZmVycztcclxuICAgICAgICB9KFJlbmRlcmFibGUpKTtcclxuICAgICAgICBSZXNvdXJjZXMuTWVzaEJ1ZmZlcnMgPSBNZXNoQnVmZmVycztcclxuICAgICAgICB2YXIgTWVzaFRleHR1cmUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgICAgICBfX2V4dGVuZHMoTWVzaFRleHR1cmUsIF9zdXBlcik7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1lc2hUZXh0dXJlKGdyYXBoX2lkKSB7XHJcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2lkID0gdXRpbHMudXVpZCh0aGlzLmNvbnN0cnVjdG9yLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoVGV4dHVyZS5wcm90b3R5cGUsIFwib25sb2FkXCIsIHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25sb2FkID0gY2I7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hUZXh0dXJlLnByb3RvdHlwZSwgXCJzcmNcIiwge1xyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZmlsZW5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZS5vbmxvYWQgPSB0aGlzLmxvYWRUZXh0dXJlSW1hZ2UodGhpcy5fb25sb2FkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbWFnZS5zcmMgPSBmaWxlbmFtZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBNZXNoVGV4dHVyZS5wcm90b3R5cGUubG9hZFRleHR1cmVJbWFnZSA9IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3RleHR1cmUgPSBXZWJHTFV0aWxzLmNyZWF0ZVRleHR1cmUoc2VsZi5nbCwgc2VsZi5faW1hZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIEtldGNoLmFkZFRleHR1cmUoc2VsZi5ncmFwaElELCBzZWxmLl9vaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYilcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoVGV4dHVyZS5wcm90b3R5cGUsIFwiY29udGVudFwiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdGV4dHVyZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gTWVzaFRleHR1cmU7XHJcbiAgICAgICAgfShSZW5kZXJhYmxlKSk7XHJcbiAgICAgICAgUmVzb3VyY2VzLk1lc2hUZXh0dXJlID0gTWVzaFRleHR1cmU7XHJcbiAgICAgICAgdmFyIE1lc2hNYXRlcmlhbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgICAgIF9fZXh0ZW5kcyhNZXNoTWF0ZXJpYWwsIF9zdXBlcik7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1lc2hNYXRlcmlhbChncmFwaF9pZCwgYW1iaWVudCwgZGlmZnVzZSwgc3BlY3VsYXIsIHNoaW5pbmVzcykge1xyXG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW1iaWVudCA9IGFtYmllbnQgPyB2ZWM0LmNyZWF0ZShhbWJpZW50KSA6IHZlYzQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kaWZmdXNlID0gZGlmZnVzZSA/IHZlYzQuY3JlYXRlKGRpZmZ1c2UpIDogdmVjNC5jcmVhdGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NwZWN1bGFyID0gc3BlY3VsYXIgPyB2ZWM0LmNyZWF0ZShzcGVjdWxhcikgOiB2ZWM0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hpbmluZXNzID0gc2hpbmluZXNzIHx8IDIwMC4wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcIm9ubG9hZFwiLCB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29ubG9hZCA9IGNiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcInNyY1wiLCB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB1dGlscy5sb2FkKHNyYywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBzZWxmLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYW1iaWVudCA9IHRlbXAuS2E7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9kaWZmdXNlID0gdGVtcC5LZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3NwZWN1bGFyID0gdGVtcC5LcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2hpbmluZXNzID0gdGVtcC5OcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9vbmxvYWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25sb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgTWVzaE1hdGVyaWFsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5cyA9IFtcIkthXCIsIFwiS2RcIiwgXCJLc1wiLCBcIk5zXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmVzID0gZGF0YS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSBsaW5lLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gZWxlbXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXMuaW5kZXhPZihrZXkpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJOc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcIk5zXCJdID0gTnVtYmVyKGVsZW1zWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IGVsZW1zLnNsaWNlKDEpLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gTnVtYmVyKGEpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLnB1c2goMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcImFtYmllbnRcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FtYmllbnQ7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYW1iaWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FtYmllbnQgPSB1dGlscy5ub3JtYWxpemVOYU4odmVjNC5jcmVhdGUoYW1iaWVudCkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcImRpZmZ1c2VcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RpZmZ1c2U7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGlmZnVzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZ1c2UgPSB1dGlscy5ub3JtYWxpemVOYU4odmVjNC5jcmVhdGUoZGlmZnVzZSkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcInNwZWN1bGFyXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zcGVjdWxhcjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzcGVjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NwZWN1bGFyID0gdXRpbHMubm9ybWFsaXplTmFOKHZlYzQuY3JlYXRlKHNwZWN1bGFyKSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hNYXRlcmlhbC5wcm90b3R5cGUsIFwic2hpbmluZXNzXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaGluaW5lc3M7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NoaW5pbmVzcyA9IHY7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIE1lc2hNYXRlcmlhbDtcclxuICAgICAgICB9KFJlbmRlcmFibGUpKTtcclxuICAgICAgICBSZXNvdXJjZXMuTWVzaE1hdGVyaWFsID0gTWVzaE1hdGVyaWFsO1xyXG4gICAgfSkoUmVzb3VyY2VzID0gQmxhemUuUmVzb3VyY2VzIHx8IChCbGF6ZS5SZXNvdXJjZXMgPSB7fSkpO1xyXG4gICAgdmFyIFNoYWRlcnM7XHJcbiAgICAoZnVuY3Rpb24gKFNoYWRlcnMpIHtcclxuICAgICAgICB2YXIgRnJhZ21lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBGcmFnbWVudCgpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBGcmFnbWVudC5NYWluID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG51bmlmb3JtIGZsb2F0IHVTaGluaW5lc3M7XFxudW5pZm9ybSB2ZWMzIHVMaWdodERpcmVjdGlvbjtcXG5cXG51bmlmb3JtIHZlYzQgdUxpZ2h0QW1iaWVudDtcXG51bmlmb3JtIHZlYzQgdUxpZ2h0RGlmZnVzZTtcXG51bmlmb3JtIHZlYzQgdUxpZ2h0U3BlY3VsYXI7XFxuXFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbEFtYmllbnQ7XFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbERpZmZ1c2U7XFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbFNwZWN1bGFyO1xcblxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbnZhcnlpbmcgdmVjMyB2RXllVmVjO1xcblxcbnZvaWQgbWFpbigpe1xcbiAgICAgICAgdmVjMyBMPSBub3JtYWxpemUodUxpZ2h0RGlyZWN0aW9uKTtcXG4gICAgICAgIHZlYzMgTj0gbm9ybWFsaXplKHZOb3JtYWwpO1xcbiAgICAgICAgZmxvYXQgbGFtYmVydFRlcm09ZG90KE4sIC1MKTtcXG4gICAgICAgIFxcbiAgICAgICAgdmVjNCBJYT0gdUxpZ2h0QW1iaWVudCp1TWF0ZXJpYWxBbWJpZW50O1xcbiAgICAgICAgXFxuICAgICAgICB2ZWM0IElkPXZlYzQoMC4wLDAuMCwwLjAsMS4wKTtcXG4gICAgICAgIFxcbiAgICAgICAgdmVjNCBJcz12ZWM0KDAuMCwwLjAsMC4wLDEuMCk7XFxuICAgICAgICBcXG4gICAgICAgIGlmKGxhbWJlcnRUZXJtPjAuMClcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBJZD11TGlnaHREaWZmdXNlKnVNYXRlcmlhbERpZmZ1c2UqbGFtYmVydFRlcm07XFxuICAgICAgICAgICAgXFxuICAgICAgICAgICAgdmVjMyBFPSBub3JtYWxpemUodkV5ZVZlYyk7XFxuICAgICAgICAgICAgdmVjMyBSPSByZWZsZWN0KEwsIE4pO1xcbiAgICAgICAgICAgIGZsb2F0IHNwZWN1bGFyPXBvdyhtYXgoZG90KFIsRSksMC4wKSwgdVNoaW5pbmVzcyk7XFxuICAgICAgICAgICAgSXM9dUxpZ2h0U3BlY3VsYXIqdU1hdGVyaWFsU3BlY3VsYXIqc3BlY3VsYXI7XFxuICAgICAgICB9XFxuICAgICAgICBcXG4gICAgICAgIHZlYzQgZmluYWxDb2xvcj1JYStJZCtJcztcXG4gICAgICAgIGZpbmFsQ29sb3IuYT0xLjA7XFxuICAgIFxcbiAgICAgICAgZ2xfRnJhZ0NvbG9yID1maW5hbENvbG9yO1xcbiAgICB9XFxuXFxuXFxuXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudDtcclxuICAgICAgICB9KCkpO1xyXG4gICAgICAgIFNoYWRlcnMuRnJhZ21lbnQgPSBGcmFnbWVudDtcclxuICAgICAgICB2YXIgVmVydGV4ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gVmVydGV4KCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFZlcnRleC5NYWluID0gXCJhdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMzIGFfbm9ybWFsO1xcblxcbnVuaWZvcm0gbWF0NCB1TVZNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHVQTWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1Tk1hdHJpeDtcXG5cXG52YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG52YXJ5aW5nIHZlYzMgdkV5ZVZlYztcXG5cXG52b2lkIG1haW4oKXtcXG5cXG4gICAgdmVjNCB2ZXJ0ZXggPSB1TVZNYXRyaXggKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCk7XFxuICAgIFxcbiAgIHZOb3JtYWwgPSB2ZWMzKHVOTWF0cml4ICogdmVjNChhX25vcm1hbCwgMS4wKSk7XFxuICAgdkV5ZVZlYz0tdmVjMyh2ZXJ0ZXgueHl6KTsgICBcXG4gIGdsX1Bvc2l0aW9uID11UE1hdHJpeCAqIHZlcnRleDtcXG5cXG59XFxuXFxuXFxuXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBWZXJ0ZXg7XHJcbiAgICAgICAgfSgpKTtcclxuICAgICAgICBTaGFkZXJzLlZlcnRleCA9IFZlcnRleDtcclxuICAgIH0pKFNoYWRlcnMgPSBCbGF6ZS5TaGFkZXJzIHx8IChCbGF6ZS5TaGFkZXJzID0ge30pKTtcclxuICAgIHZhciBBbmltYXRpb25FbnRpdHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhBbmltYXRpb25FbnRpdHksIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gQW5pbWF0aW9uRW50aXR5KGdyYXBoX2lkLCBmcmVxdWVuY3ksIHRpbWVzLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ZyZXF1ZW5jeSA9IGZyZXF1ZW5jeTtcclxuICAgICAgICAgICAgdGhpcy5faW50ZXJ2YWxfaWQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBBbmltYXRpb25FbnRpdHkucHJvdG90eXBlLm9uRnJhbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIEFuaW1hdGlvbkVudGl0eS5FbGFwc2VUaW1lID0gdXRpbHMubm93SW5NaWxsaXNlY29uZHMoKTtcclxuICAgICAgICAgICAgaWYgKEFuaW1hdGlvbkVudGl0eS5FbGFwc2VUaW1lIDwgNSlcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdmFyIHN0ZXBzID0gTWF0aC5mbG9vcihBbmltYXRpb25FbnRpdHkuRWxhcHNlVGltZSAvIHRoaXMuX2ZyZXF1ZW5jeSk7XHJcbiAgICAgICAgICAgIHdoaWxlICgoc3RlcHMgPiAwKSAmJiAoQW5pbWF0aW9uRW50aXR5LkNvdW50ICE9IHRoaXMuX3RpbWVzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIHN0ZXBzLS07XHJcbiAgICAgICAgICAgICAgICBBbmltYXRpb25FbnRpdHkuQ291bnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoQW5pbWF0aW9uRW50aXR5LkNvdW50ID09PSB0aGlzLl90aW1lcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEFuaW1hdGlvbkVudGl0eS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludGltZSA9IHV0aWxzLm5vd0luTWlsbGlzZWNvbmRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsX2lkID0gc2V0SW50ZXJ2YWwodGhpcy5vbkZyYW1lLCB0aGlzLl9mcmVxdWVuY3kgLyAxMDAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFuaW1hdGlvbkVudGl0eS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2ludGVydmFsX2lkKVxyXG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbF9pZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkucHJvdG90eXBlLmJlZ2luRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFuaW1hdGlvbkVudGl0eS5wcm90b3R5cGUuZW5kRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEFuaW1hdGlvbkVudGl0eS5Db3VudCA9IDA7XHJcbiAgICAgICAgcmV0dXJuIEFuaW1hdGlvbkVudGl0eTtcclxuICAgIH0oRW50aXR5KSk7XHJcbiAgICBCbGF6ZS5BbmltYXRpb25FbnRpdHkgPSBBbmltYXRpb25FbnRpdHk7XHJcbiAgICB2YXIgTWVzaEVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKE1lc2hFbnRpdHksIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gTWVzaEVudGl0eShncmFwaF9pZCwgbWVzaGZpbGUsIG1hdGVyaWFsZmlsZSwgdGV4dHVyZWZpbGUpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9idWZmZXJzID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbWVzaGZpbGUgPSBtZXNoZmlsZSB8fCBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbGZpbGUgPSBtYXRlcmlhbGZpbGUgfHwgbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZWZpbGUgPSB0ZXh0dXJlZmlsZSB8fCBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5sb2FkQnVmZmVycyA9IGZ1bmN0aW9uIChmaWxlbmFtZSwgY2IpIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycyA9IG5ldyBSZXNvdXJjZXMuTWVzaEJ1ZmZlcnModGhpcy5ncmFwaElEKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycy5vbmxvYWQgPSBjYjtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycy5zcmMgPSBmaWxlbmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1lc2hFbnRpdHkucHJvdG90eXBlLmxvYWRUZXh0dXJlID0gZnVuY3Rpb24gKGZpbGVuYW1lLCBjYikge1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gbmV3IFJlc291cmNlcy5NZXNoVGV4dHVyZSh0aGlzLmdyYXBoSUQpO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlLm9ubG9hZCA9IGNiO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlLnNyYyA9IGZpbGVuYW1lO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hFbnRpdHkucHJvdG90eXBlLCBcIm1hdGVyaWFsXCIsIHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwgPSB2O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5sb2FkTWF0ZXJpYWwgPSBmdW5jdGlvbiAoZmlsZW5hbWUsIGNiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsID0gbmV3IFJlc291cmNlcy5NZXNoTWF0ZXJpYWwodGhpcy5ncmFwaElEKTtcclxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwub25sb2FkID0gY2I7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsLnNyYyA9IGZpbGVuYW1lO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUubG9hZE1lc2ggPSBmdW5jdGlvbiAoY2IpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBhc3luYy53YXRlcmZhbGwoW1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuX21lc2hmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBCdWZmZXJzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZEJ1ZmZlcnMoc2VsZi5fbWVzaGZpbGUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2FkZWQgQnVmZmVyc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5fdGV4dHVyZWZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2FkaW5nIFRleHR1cmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2FkVGV4dHVyZShzZWxmLl90ZXh0dXJlZmlsZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRlZCBUZXh0dXJlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKG5leHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXNlbGYuX21hdGVyaWFsZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRpbmcgTWF0ZXJpYWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2FkTWF0ZXJpYWwoc2VsZi5fbWF0ZXJpYWxmaWxlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGVkIE1hdGVyaWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF0sIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2IpXHJcbiAgICAgICAgICAgICAgICAgICAgY2IoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5sb2FkTWVzaEJ5T2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICB0aGlzLl9idWZmZXJzID0gbmV3IFJlc291cmNlcy5NZXNoQnVmZmVycyh0aGlzLmdyYXBoSUQpO1xyXG4gICAgICAgICAgICB0aGlzLl9idWZmZXJzLmNyZWF0ZUJ1ZmZlcnMob2JqKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1lc2hFbnRpdHkucHJvdG90eXBlLmxvYWRNYXRlcmlhbEJ5T2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IG5ldyBSZXNvdXJjZXMuTWVzaE1hdGVyaWFsKHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIGlmIChvYmouYW1iaWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwuYW1iaWVudCA9IG9iai5hbWJpZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvYmouc3BlY3VsYXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsLnNwZWN1bGFyID0gb2JqLnNwZWN1bGFyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvYmouZGlmZnVzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwuZGlmZnVzZSA9IG9iai5kaWZmdXNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvYmouc2hpbmluZXNzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5zaGluaW5lc3MgPSBvYmouc2hpbmluZXNzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5zZXRNYXRlcmlhbFVuaWZvcm1zID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF0ZXJpYWwuYW1iaWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1TWF0ZXJpYWxBbWJpZW50ID0gdGhpcy5nZXRVbmlmb3JtKFwidU1hdGVyaWFsQW1iaWVudFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodU1hdGVyaWFsQW1iaWVudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TWF0ZXJpYWxBbWJpZW50LCB0aGlzLl9tYXRlcmlhbC5hbWJpZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYXRlcmlhbC5kaWZmdXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVNYXRlcmlhbERpZmZ1c2UgPSB0aGlzLmdldFVuaWZvcm0oXCJ1TWF0ZXJpYWxEaWZmdXNlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1TWF0ZXJpYWxEaWZmdXNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVNYXRlcmlhbERpZmZ1c2UsIHRoaXMuX21hdGVyaWFsLmRpZmZ1c2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsLnNwZWN1bGFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVNYXRlcmlhbFNwZWN1bGFyID0gdGhpcy5nZXRVbmlmb3JtKFwidU1hdGVyaWFsU3BlY3VsYXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVNYXRlcmlhbFNwZWN1bGFyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVNYXRlcmlhbFNwZWN1bGFyLCB0aGlzLl9tYXRlcmlhbC5zcGVjdWxhcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF0ZXJpYWwuc2hpbmluZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVTaGluaW5lc3MgPSB0aGlzLmdldFVuaWZvcm0oXCJ1U2hpbmluZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1U2hpbmluZXNzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodVNoaW5pbmVzcywgdGhpcy5fbWF0ZXJpYWwuc2hpbmluZXNzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLypcclxuICAgICAgICAgICAgcHVibGljIHNldFRleHR1cmVVbmlmb3JtcygpIHtcclxuICAgICAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXNlVGV4dHVyZSA9IHRoaXMuZ2V0VW5pZm9ybShcInVzZVRleHR1cmVcIik7XHJcbiAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3RleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHVzZVRleHR1cmUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fYnVmZmVycy50Ym8pO1xyXG4gICAgICAgICAgICAgICAgICAgICBLZXRjaC5lbmFibGVBdHRyaWIodGhpcy5ncmFwaElELCBcImFfdGV4dHVyZV9jb29yZHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgIEtldGNoLlRleHR1cmUodGhpcy5ncmFwaElELCB0aGlzLl90ZXh0dXJlLmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih1c2VUZXh0dXJlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Ki9cclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TWF0ZXJpYWxVbmlmb3JtcygpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fYnVmZmVycy52Ym8pO1xyXG4gICAgICAgICAgICBLZXRjaC5lbmFibGVBdHRyaWIodGhpcy5ncmFwaElELCBcImFfcG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl9idWZmZXJzLm5ibyk7XHJcbiAgICAgICAgICAgIEtldGNoLmVuYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9ub3JtYWxcIik7XHJcbiAgICAgICAgICAgIHZhciBpdmJvID0gdGhpcy5fYnVmZmVycy5pdmJvO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpdmJvKTtcclxuICAgICAgICAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgaXZiby5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUuZW5kRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgS2V0Y2guZGlzYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBNZXNoRW50aXR5O1xyXG4gICAgfShFbnRpdHkpKTtcclxuICAgIEJsYXplLk1lc2hFbnRpdHkgPSBNZXNoRW50aXR5O1xyXG4gICAgdmFyIFRyYW5zZm9ybUVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFRyYW5zZm9ybUVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBUcmFuc2Zvcm1FbnRpdHkoZ3JhcGhfaWQsIHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbikge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb24gfHwgdmVjMy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemUgfHwgdmVjMy5jcmVhdGUoWzEsIDEsIDFdKTtcclxuICAgICAgICAgICAgdGhpcy5fcm90YXRpb24gPSByb3RhdGlvbiB8fCB7IGFuZ2xlOiAwLCBheGlzOiB2ZWMzLmNyZWF0ZSgpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuaWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1hdDQuaWRlbnRpdHkodGhpcy5fbWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2V0TWF0cml4ID0gZnVuY3Rpb24gKG5ld19tYXRyaXgpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWF0cml4ID0gbmV3X21hdHJpeDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUudHJhbnNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBtYXQ0LnRyYW5zcG9zZSh0aGlzLl9tYXRyaXgsIHRoaXMuX21hdHJpeCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZSwgXCJwb3NpdGlvblwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zZXRBYnNvbHV0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKHgsIHksIHopIHtcclxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBbeCwgeSwgel07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XHJcbiAgICAgICAgICAgIGlmICh4ID09PSB2b2lkIDApIHsgeCA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKHkgPT09IHZvaWQgMCkgeyB5ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAoeiA9PT0gdm9pZCAwKSB7IHogPSAwOyB9XHJcbiAgICAgICAgICAgIHZhciBvcGVyYW5kMSA9IHRoaXMuX3Bvc2l0aW9uO1xyXG4gICAgICAgICAgICB2YXIgb3BlcmFuZDIgPSB2ZWMzLmNyZWF0ZShbeCwgeSwgel0pO1xyXG4gICAgICAgICAgICB2ZWMzLmFkZChvcGVyYW5kMSwgb3BlcmFuZDIsIHRoaXMuX3Bvc2l0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zZXRTaXplID0gZnVuY3Rpb24gKHgsIHksIHopIHtcclxuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IFt4LCB5LCB6XTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xyXG4gICAgICAgICAgICBpZiAoeCA9PT0gdm9pZCAwKSB7IHggPSAwOyB9XHJcbiAgICAgICAgICAgIGlmICh5ID09PSB2b2lkIDApIHsgeSA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKHogPT09IHZvaWQgMCkgeyB6ID0gMDsgfVxyXG4gICAgICAgICAgICB2YXIgb3BlcmFuZDEgPSB0aGlzLl9zaXplO1xyXG4gICAgICAgICAgICB2YXIgb3BlcmFuZDIgPSB2ZWMzLmNyZWF0ZShbeCwgeSwgel0pO1xyXG4gICAgICAgICAgICB2ZWMzLmFkZChvcGVyYW5kMSwgb3BlcmFuZDIsIHRoaXMuX3NpemUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUsIFwicm90YXRpb25cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb3RhdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAocm90YXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uID0gcm90YXRpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2V0Um90YXRpb24gPSBmdW5jdGlvbiAoYW5nbGUsIGF4aXMpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ2xlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm90YXRpb24uYW5nbGUgPSBhbmdsZTtcclxuICAgICAgICAgICAgaWYgKGF4aXMpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbi5heGlzID0gYXhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2V0QW5nbGUgPSBmdW5jdGlvbiAoYW5nbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcm90YXRpb24uYW5nbGUgPSBhbmdsZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2V0QXhpcyA9IGZ1bmN0aW9uIChheGlzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uLmF4aXMgPSBheGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5yb3RhdGVBbmdsZSA9IGZ1bmN0aW9uIChhbmdsZSkge1xyXG4gICAgICAgICAgICBpZiAoYW5nbGUgPT09IHZvaWQgMCkgeyBhbmdsZSA9IDA7IH1cclxuICAgICAgICAgICAgdGhpcy5fcm90YXRpb24uYW5nbGUgKz0gYW5nbGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLm1vdmVBeGlzID0gZnVuY3Rpb24gKHgsIHksIHopIHtcclxuICAgICAgICAgICAgaWYgKHggPT09IHZvaWQgMCkgeyB4ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAoeSA9PT0gdm9pZCAwKSB7IHkgPSAwOyB9XHJcbiAgICAgICAgICAgIGlmICh6ID09PSB2b2lkIDApIHsgeiA9IDA7IH1cclxuICAgICAgICAgICAgdmFyIG9wZXJhbmQxID0gdGhpcy5fcm90YXRpb24uYXhpcztcclxuICAgICAgICAgICAgdmFyIG9wZXJhbmQyID0gdmVjMy5jcmVhdGUoW3gsIHksIHpdKTtcclxuICAgICAgICAgICAgdmVjMy5hZGQob3BlcmFuZDEsIG9wZXJhbmQyLCB0aGlzLl9yb3RhdGlvbi5heGlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKG1hdHJpeFN0YWNrKSB7XHJcbiAgICAgICAgICAgIG1hdHJpeFN0YWNrLnB1c2goKTtcclxuICAgICAgICAgICAgbWF0cml4U3RhY2suTW9kZWxWaWV3KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeCA9IG1hdHJpeFN0YWNrLm12TWF0cml4O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcG9zaXRpb24gIT0gdm9pZCAwKVxyXG4gICAgICAgICAgICAgICAgbWF0NC50cmFuc2xhdGUodGhpcy5fbWF0cml4LCB0aGlzLl9wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zaXplICE9IHZvaWQgMClcclxuICAgICAgICAgICAgICAgIG1hdDQuc2NhbGUodGhpcy5fbWF0cml4LCB0aGlzLl9zaXplKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3JvdGF0aW9uICE9IHZvaWQgMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhZCA9IHRoaXMuX3JvdGF0aW9uLmFuZ2xlICogTWF0aC5QSSAvIDE4MDtcclxuICAgICAgICAgICAgICAgIG1hdDQucm90YXRlKHRoaXMuX21hdHJpeCwgcmFkLCB0aGlzLl9yb3RhdGlvbi5heGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXRyaXhTdGFjay5zZXRVcCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKG1hdHJpeFN0YWNrKSB7XHJcbiAgICAgICAgICAgIG1hdHJpeFN0YWNrLnBvcCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFRyYW5zZm9ybUVudGl0eTtcclxuICAgIH0oRW50aXR5KSk7XHJcbiAgICBCbGF6ZS5UcmFuc2Zvcm1FbnRpdHkgPSBUcmFuc2Zvcm1FbnRpdHk7XHJcbiAgICB2YXIgTGlnaHRFbnRpdHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhMaWdodEVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBMaWdodEVudGl0eShncmFwaF9pZCwgYW1iaWVudCwgZGlmZnVzZSwgcG9zaXRpb24sIHNwZWN1bGFyLCBkaXJlY3Rpb24sIGN1dG9mZikge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FtYmllbnQgPSBhbWJpZW50ID8gdmVjNC5jcmVhdGUoYW1iaWVudCkgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9kaWZmdXNlID0gZGlmZnVzZSA/IHZlYzQuY3JlYXRlKGRpZmZ1c2UpIDogbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBwb3NpdGlvbiA/IHZlYzQuY3JlYXRlKHBvc2l0aW9uKSA6IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3NwZWN1bGFyID0gc3BlY3VsYXIgPyB2ZWM0LmNyZWF0ZShzcGVjdWxhcikgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb24gPyB2ZWMzLmNyZWF0ZShkaXJlY3Rpb24pIDogbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fY3V0b2ZmID0gY3V0b2ZmO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGlnaHRFbnRpdHkucHJvdG90eXBlLCBcImFtYmllbnRcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbWJpZW50O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChhbWJpZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hbWJpZW50ID0gdXRpbHMubm9ybWFsaXplTmFOKHZlYzQuY3JlYXRlKGFtYmllbnQpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExpZ2h0RW50aXR5LnByb3RvdHlwZSwgXCJkaWZmdXNlXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlmZnVzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGlmZnVzZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlmZnVzZSA9IHV0aWxzLm5vcm1hbGl6ZU5hTih2ZWM0LmNyZWF0ZShkaWZmdXNlKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaWdodEVudGl0eS5wcm90b3R5cGUsIFwic3BlY3VsYXJcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zcGVjdWxhcjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoc3BlY3VsYXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NwZWN1bGFyID0gdXRpbHMubm9ybWFsaXplTmFOKHZlYzQuY3JlYXRlKHNwZWN1bGFyKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaWdodEVudGl0eS5wcm90b3R5cGUsIFwicG9zaXRpb25cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaWZmdXNlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSB1dGlscy5ub3JtYWxpemVOYU4odmVjMy5jcmVhdGUocG9zaXRpb24pKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExpZ2h0RW50aXR5LnByb3RvdHlwZSwgXCJkaXJlY3Rpb25cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kaXJlY3Rpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlyZWN0aW9uID0gdXRpbHMubm9ybWFsaXplTmFOKHZlYzMuY3JlYXRlKGRpcmVjdGlvbikpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGlnaHRFbnRpdHkucHJvdG90eXBlLCBcImN1dE9mZlwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1dG9mZjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoY3V0b2ZmKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXRvZmYgPSBjdXRvZmY7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIExpZ2h0RW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9hbWJpZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdUxpZ2h0QW1iaWVudCA9IHRoaXMuZ2V0VW5pZm9ybShcInVMaWdodEFtYmllbnRcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodUxpZ2h0QW1iaWVudClcclxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVMaWdodEFtYmllbnQsIHRoaXMuX2FtYmllbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaWZmdXNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdUxpZ2h0RGlmZnVzZSA9IHRoaXMuZ2V0VW5pZm9ybShcInVMaWdodERpZmZ1c2VcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodUxpZ2h0RGlmZnVzZSlcclxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVMaWdodERpZmZ1c2UsIHRoaXMuX2RpZmZ1c2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zcGVjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVMaWdodFNwZWN1bGFyID0gdGhpcy5nZXRVbmlmb3JtKFwidUxpZ2h0U3BlY3VsYXJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodUxpZ2h0U3BlY3VsYXIpXHJcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TGlnaHRTcGVjdWxhciwgdGhpcy5fc3BlY3VsYXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9wb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVMaWdodFBvc2l0aW9uID0gdGhpcy5nZXRVbmlmb3JtKFwidUxpZ2h0UG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodUxpZ2h0UG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih1TGlnaHRQb3NpdGlvbiwgdGhpcy5fcG9zaXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9kaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciB1RGlyZWN0aW9uID0gdGhpcy5nZXRVbmlmb3JtKFwidUxpZ2h0RGlyZWN0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVEaXJlY3Rpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih1RGlyZWN0aW9uLCB0aGlzLl9kaXJlY3Rpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qIGlmICh0aGlzLl9jdXRvZmYpIHtcclxuICAgICAgICAgICAgICAgICB2YXIgdUN1dE9mZiA9IHRoaXMuZ2V0VW5pZm9ybShcInVDdXRPZmZcIik7XHJcbiAgICAgICAgICAgICAgICAgaWYgKHVDdXRPZmYpXHJcbiAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xZih1Q3V0T2ZmLCB0aGlzLl9jdXRvZmYpO1xyXG4gICAgICAgICAgICAgfSovXHJcbiAgICAgICAgfTtcclxuICAgICAgICBMaWdodEVudGl0eS5wcm90b3R5cGUuZW5kRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBMaWdodEVudGl0eTtcclxuICAgIH0oRW50aXR5KSk7XHJcbiAgICBCbGF6ZS5MaWdodEVudGl0eSA9IExpZ2h0RW50aXR5O1xyXG4gICAgdmFyIENhbWVyYUVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKENhbWVyYUVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBDYW1lcmFFbnRpdHkoZ3JhcGhfaWQsIHR5cGUpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZSB8fCBDQU1FUkFfVFlQRS5PUkJJVElORztcclxuICAgICAgICAgICAgdGhpcy5fY21hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIG1hdDQuaWRlbnRpdHkodGhpcy5fY21hdHJpeCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwID0gdmVjMy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fcmlnaHQgPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9ub3JtYWwgPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHZlYzMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2F6aW11dGggPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZXZhdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fc3RlcHMgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2FtZXJhRW50aXR5LnByb3RvdHlwZSwgXCJ0eXBlXCIsIHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW1lcmFFbnRpdHkucHJvdG90eXBlLCBcInBvc2l0aW9uXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHBvcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBwb3M7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW1lcmFFbnRpdHkucHJvdG90eXBlLCBcImF6aW11dGhcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hemltdXRoO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChheikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBfYXogPSBheiAtIHRoaXMuX2F6aW11dGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hemltdXRoICs9IHRlbXBfYXo7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYXppbXV0aCA+IDM2MCB8fCB0aGlzLl9hemltdXRoIDwgLTM2MCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F6aW11dGggPSB0aGlzLl9hemltdXRoICUgMzYwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2FtZXJhRW50aXR5LnByb3RvdHlwZSwgXCJlbGV2YXRpb25cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbGV2YXRpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGVsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVtcF9lbCA9IGVsIC0gdGhpcy5fZWxldmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWxldmF0aW9uICs9IHRlbXBfZWw7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZWxldmF0aW9uID4gMzYwIHx8IHRoaXMuX2VsZXZhdGlvbiA8IC0zNjApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbGV2YXRpb24gPSB0aGlzLl9lbGV2YXRpb24gJSAzNjA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW1lcmFFbnRpdHkucHJvdG90eXBlLCBcInpvb21cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdGVwcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAob2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHZlYzMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHZlYzMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBwID0gdGhpcy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIHZhciBzdGVwID0gb2Zmc2V0IC0gdGhpcy5fc3RlcHM7XHJcbiAgICAgICAgICAgICAgICB2ZWMzLm5vcm1hbGl6ZSh0aGlzLl9ub3JtYWwsIG4pO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld19wb3NpdGlvbiA9IHZlYzMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdHlwZSA9PT0gQ0FNRVJBX1RZUEUuVFJBQ0tJTkcpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdfcG9zaXRpb25bMF0gPSBwWzBdIC0gc3RlcCAqIG5bMF07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3X3Bvc2l0aW9uWzFdID0gcFsxXSAtIHN0ZXAgKiBuWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld19wb3NpdGlvblsyXSA9IHBbMl0gLSBzdGVwICogblsyXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld19wb3NpdGlvblswXSA9IHBbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3X3Bvc2l0aW9uWzFdID0gcFsxXTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdfcG9zaXRpb25bMl0gPSBwWzJdIC0gc3RlcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXdfcG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGVwcyA9IG9mZnNldDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgQ2FtZXJhRW50aXR5LnByb3RvdHlwZS5jYWxjdWxhdGVPcmllbnRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIG0gPSB0aGlzLl9jbWF0cml4O1xyXG4gICAgICAgICAgICBtYXQ0Lm11bHRpcGx5VmVjNChtLCBbMSwgMCwgMCwgMF0sIHRoaXMuX3JpZ2h0KTtcclxuICAgICAgICAgICAgbWF0NC5tdWx0aXBseVZlYzQobSwgWzAsIDEsIDAsIDBdLCB0aGlzLl91cCk7XHJcbiAgICAgICAgICAgIG1hdDQubXVsdGlwbHlWZWM0KG0sIFswLCAwLCAxLCAwXSwgdGhpcy5fbm9ybWFsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIENhbWVyYUVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBtYXQ0LmlkZW50aXR5KHRoaXMuX2NtYXRyaXgpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZU9yaWVudGF0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90eXBlID09PSBDQU1FUkFfVFlQRS5UUkFDS0lORykge1xyXG4gICAgICAgICAgICAgICAgbWF0NC50cmFuc2xhdGUodGhpcy5fY21hdHJpeCwgdGhpcy5fcG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgbWF0NC5yb3RhdGVZKHRoaXMuX2NtYXRyaXgsIHRoaXMuX2F6aW11dGggKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgICAgICAgIG1hdDQucm90YXRlWCh0aGlzLl9jbWF0cml4LCB0aGlzLl9lbGV2YXRpb24gKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG1hdDQucm90YXRlWSh0aGlzLl9jbWF0cml4LCB0aGlzLl9hemltdXRoICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LnJvdGF0ZVgodGhpcy5fY21hdHJpeCwgdGhpcy5fZWxldmF0aW9uICogTWF0aC5QSSAvIDE4MCk7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LnRyYW5zbGF0ZSh0aGlzLl9jbWF0cml4LCB0aGlzLl9wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVPcmllbnRhdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdHlwZSA9PT0gQ0FNRVJBX1RZUEUuVFJBQ0tJTkcpIHtcclxuICAgICAgICAgICAgICAgIG1hdDQubXVsdGlwbHlWZWM0KG0sIFswLCAwLCAwLCAxXSwgdGhpcy5fcG9zaXRpb24pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2FtZXJhRW50aXR5LnByb3RvdHlwZSwgXCJtb2RlbFZpZXdcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICAgICAgICAgIG1hdDQuaW52ZXJzZSh0aGlzLl9jbWF0cml4LCBtKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBDYW1lcmFFbnRpdHkucHJvdG90eXBlLmVuZERyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gQ2FtZXJhRW50aXR5O1xyXG4gICAgfShFbnRpdHkpKTtcclxuICAgIEJsYXplLkNhbWVyYUVudGl0eSA9IENhbWVyYUVudGl0eTtcclxuICAgIHZhciBOb2RlRWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gTm9kZUVsZW1lbnQocGFyZW50LCB0eXBlLCBlbnRpdHkpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyZW50Tm9kZSA9IHBhcmVudDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BhcmVudE5vZGUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnROb2RlLmFkZENoaWxkTm9kZSh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hpbGROb2RlcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgdGhpcy5fb2lkID0gdXRpbHMudXVpZCh0aGlzLl90eXBlIHx8IHRoaXMuY29uc3RydWN0b3IubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VudGl0eSA9IGVudGl0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVFbGVtZW50LnByb3RvdHlwZSwgXCJvaWRcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vaWQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlRWxlbWVudC5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVFbGVtZW50LnByb3RvdHlwZSwgXCJlbnRpdHlcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbnRpdHk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGVudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50aXR5ID0gZW50aXR5O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZUVsZW1lbnQucHJvdG90eXBlLCBcImNoaWxkTm9kZXNcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuYWRkQ2hpbGROb2RlID0gZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkTm9kZXMucHVzaChjaGlsZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQ2hpbGROb2RlID0gZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjaGlsZCk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hpbGROb2Rlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmdldENoaWxkTm9kZUJ5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkTm9kZXNbaW5kZXhdIHx8IHZvaWQgMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5leGlzdHNDaGlsZE5vZGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkTm9kZXNbaW5kZXhdICE9PSB2b2lkIDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnROb2RlLnJlbW92ZUNoaWxkTm9kZSh0aGlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDaGlsZE5vZGUgPSBmdW5jdGlvbiAodHlwZSwgZW50aXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZUVsZW1lbnQodGhpcywgdHlwZSwgZW50aXR5KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5pc1Jvb3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnROb2RlID09PSB2b2lkIDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICB2YXIgb2lkID0gY2hpbGQub2lkO1xyXG4gICAgICAgICAgICByZXR1cm4gXy5maW5kSW5kZXgodGhpcy5fY2hpbGROb2RlcywgZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMub2lkID09PSBvaWQ7IH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmluZGV4SW5QYXJlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSb290KCkpXHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuX3BhcmVudE5vZGUuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmhhc1NpYmxpbmcgPSBmdW5jdGlvbiAocHJldikge1xyXG4gICAgICAgICAgICB2YXIgX2hhdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUm9vdCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9wYXJlbnROb2RlLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYXJlbnROb2RlLmdldENoaWxkTm9kZUJ5SW5kZXgoaW5kZXggLSAxKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oYXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYXJlbnROb2RlLmdldENoaWxkTm9kZUJ5SW5kZXgoaW5kZXggKyAxKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oYXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9oYXZlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLm5leHRTaWJsaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc2libGluZyA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Jvb3QoKSAmJiB0aGlzLmhhc1NpYmxpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fcGFyZW50Tm9kZS5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgc2libGluZyA9IHRoaXMuX3BhcmVudE5vZGUuZ2V0Q2hpbGROb2RlQnlJbmRleChpbmRleCArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzaWJsaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLnByZXZpb3VzU2libGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSb290KCkgJiYgdGhpcy5oYXNTaWJsaW5nKHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9wYXJlbnROb2RlLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nID0gdGhpcy5fcGFyZW50Tm9kZS5nZXRDaGlsZE5vZGVCeUluZGV4KGluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNpYmxpbmc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuZmlyc3RDaGlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGROb2RlQnlJbmRleCgwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5sYXN0Q2hpbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkTm9kZUJ5SW5kZXgodGhpcy5fY2hpbGROb2Rlcy5sZW5ndGggLSAxKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVDaGlsZE5vZGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZE5vZGVzID0gW107XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChtYXRyaXhTdGFjaykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZW50aXR5KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50aXR5LmJlZ2luRHJhdyhtYXRyaXhTdGFjayk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5fY2hpbGROb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIGNoaWxkLmRyYXcobWF0cml4U3RhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbnRpdHkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbnRpdHkuZW5kRHJhdyhtYXRyaXhTdGFjayk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTm9kZUVsZW1lbnQ7XHJcbiAgICB9KCkpO1xyXG4gICAgQmxhemUuTm9kZUVsZW1lbnQgPSBOb2RlRWxlbWVudDtcclxuICAgIHZhciBTY2VuZUdyYXBoID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoU2NlbmVHcmFwaCwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBTY2VuZUdyYXBoKCkge1xyXG4gICAgICAgICAgICB2YXIgb2lkID0gdXRpbHMudXVpZCgpO1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBvaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9vaWQgPSBvaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3NjZW5lID0gbmV3IE5vZGVFbGVtZW50KHZvaWQgMCwgXCJTY2VuZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5fbWF0cml4U3RhY2sgPSBuZXcgTWF0cml4U3RhY2sodGhpcy5fb2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fbG9hZGVyQnVmZmVyID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuX2lzRHJhd2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBLZXRjaC5jcmVhdGVWaWV3KHRoaXMuX29pZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2VuZUdyYXBoLnByb3RvdHlwZSwgXCJzY2VuZVwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2NlbmVHcmFwaC5wcm90b3R5cGUsIFwiaXNEcmF3aW5nXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNEcmF3aW5nO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5FbnZpcm9ubWVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkRFUFRIX1RFU1QpO1xyXG4gICAgICAgICAgICBnbC5kZXB0aEZ1bmMoZ2wuTEVRVUFMKTtcclxuICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcclxuICAgICAgICAgICAgZ2wuYmxlbmRGdW5jKGdsLlNSQ19BTFBIQSwgZ2wuT05FX01JTlVTX1NSQ19BTFBIQSk7XHJcbiAgICAgICAgICAgIGdsLnBpeGVsU3RvcmVpKGdsLlVOUEFDS19GTElQX1lfV0VCR0wsIHRydWUpO1xyXG4gICAgICAgICAgICBnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDEpO1xyXG4gICAgICAgICAgICBnbC5jbGVhckRlcHRoKDEuMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB0aGlzLl9pc0RyYXdpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICBnbC52aWV3cG9ydCgwLCAwLCBnbC52aWV3cG9ydFdpZHRoLCBnbC52aWV3cG9ydEhlaWdodCk7XHJcbiAgICAgICAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuICAgICAgICAgICAgdGhpcy5fc2NlbmUuZHJhdyh0aGlzLl9tYXRyaXhTdGFjayk7XHJcbiAgICAgICAgICAgIHRoaXMuX2lzRHJhd2luZyA9IGZhbHNlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlTWFpbkNoaWxkTm9kZSA9IGZ1bmN0aW9uICh0eXBlLCBlbnRpdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lLmNyZWF0ZUNoaWxkTm9kZSh0eXBlLCBlbnRpdHkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjZW5lR3JhcGgucHJvdG90eXBlLCBcIm9pZFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29pZDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChjYW52YXMpIHtcclxuICAgICAgICAgICAgS2V0Y2guc2V0Q2FudmFzVG9Db250ZXh0KHRoaXMub2lkLCBjYW52YXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuUHJvZ3JhbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgS2V0Y2guY3JlYXRlUHJvZ3JhbSh0aGlzLl9vaWQsIHtcclxuICAgICAgICAgICAgICAgIGZyYWdtZW50OiBTaGFkZXJzLkZyYWdtZW50Lk1haW4sXHJcbiAgICAgICAgICAgICAgICB2ZXJ0ZXg6IFNoYWRlcnMuVmVydGV4Lk1haW5cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVNZXNoID0gZnVuY3Rpb24gKG1lc2gsIG1hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNoRW50aXR5ID0gbmV3IE1lc2hFbnRpdHkodGhpcy5vaWQpO1xyXG4gICAgICAgICAgICBpZiAobWVzaCkge1xyXG4gICAgICAgICAgICAgICAgbWVzaEVudGl0eS5sb2FkTWVzaEJ5T2JqZWN0KG1lc2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChtYXRlcmlhbCkge1xyXG4gICAgICAgICAgICAgICAgbWVzaEVudGl0eS5sb2FkTWF0ZXJpYWxCeU9iamVjdChtYXRlcmlhbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG1lc2hFbnRpdHk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVNZXNoQnlMb2FkZXIgPSBmdW5jdGlvbiAoY29uZmlnKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNoID0gbmV3IE1lc2hFbnRpdHkodGhpcy5vaWQsIGNvbmZpZy5tZXNoLCBjb25maWcubWF0ZXJpYWwsIGNvbmZpZy50ZXh0dXJlKTtcclxuICAgICAgICAgICAgdGhpcy5fbG9hZGVyQnVmZmVyLnB1c2gobWVzaCk7XHJcbiAgICAgICAgICAgIHJldHVybiBtZXNoO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlVHJhbnNmb3JtID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybUVudGl0eSh0aGlzLm9pZCwgcG9zaXRpb24sIHNpemUsIHJvdGF0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZUxpZ2h0ID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IExpZ2h0RW50aXR5KHRoaXMub2lkLCBjb25maWcuYW1iaWVudCwgY29uZmlnLmRpZmZ1c2UsIGNvbmZpZy5wb3NpdGlvbiwgY29uZmlnLnNwZWN1bGFyLCBjb25maWcuZGlyZWN0aW9uLCBjb25maWcuY3V0b2ZmKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZUNhbWVyYSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2FtZXJhRW50aXR5KHRoaXMub2lkLCB0eXBlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2VuZUdyYXBoLnByb3RvdHlwZSwgXCJNYWluQ2FtZXJhXCIsIHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoY2FtZXJhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRyaXhTdGFjay5NYWluQ2FtZXJhID0gY2FtZXJhO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5zdGFydExvYWRlciA9IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICBhc3luYy5lYWNoU2VyaWVzKHRoaXMuX2xvYWRlckJ1ZmZlciwgZnVuY3Rpb24gKGl0ZW0sIG5leHQpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0ubG9hZE1lc2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9LCBjYik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jb25maWd1cmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgc2VsZi5FbnZpcm9ubWVudCgpO1xyXG4gICAgICAgICAgICBzZWxmLlByb2dyYW0oKTtcclxuICAgICAgICAgICAgS2V0Y2guc2V0QXR0cmlidXRlTG9jYXRpb25zKHNlbGYuX29pZCwgU2NlbmVHcmFwaC5BVFRSSUJVVEVTKTtcclxuICAgICAgICAgICAgS2V0Y2guc2V0VW5pZm9ybUxvY2F0aW9ucyhzZWxmLl9vaWQsIFNjZW5lR3JhcGguVU5JRk9STVMpO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRyaXhTdGFjay5pbml0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jb25maWd1cmVXaXRoTG9hZGVyID0gZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgc2VsZi5jb25maWd1cmUoKTtcclxuICAgICAgICAgICAgc2VsZi5zdGFydExvYWRlcihjYik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLlVOSUZPUk1TID0gW1xyXG4gICAgICAgICAgICAndVBNYXRyaXgnLFxyXG4gICAgICAgICAgICAndU1WTWF0cml4JyxcclxuICAgICAgICAgICAgJ3VOTWF0cml4JyxcclxuICAgICAgICAgICAgJ3VMaWdodERpcmVjdGlvbicsXHJcbiAgICAgICAgICAgICd1TGlnaHRBbWJpZW50JyxcclxuICAgICAgICAgICAgJ3VNYXRlcmlhbEFtYmllbnQnLFxyXG4gICAgICAgICAgICAndUxpZ2h0RGlmZnVzZScsXHJcbiAgICAgICAgICAgICd1TWF0ZXJpYWxEaWZmdXNlJyxcclxuICAgICAgICAgICAgJ3VMaWdodFNwZWN1bGFyJyxcclxuICAgICAgICAgICAgJ3VNYXRlcmlhbFNwZWN1bGFyJyxcclxuICAgICAgICAgICAgJ3VTaGluaW5lc3MnLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5BVFRSSUJVVEVTID0gWydhX3Bvc2l0aW9uJywgJ2Ffbm9ybWFsJ107XHJcbiAgICAgICAgcmV0dXJuIFNjZW5lR3JhcGg7XHJcbiAgICB9KFJlbmRlcmFibGUpKTtcclxuICAgIEJsYXplLlNjZW5lR3JhcGggPSBTY2VuZUdyYXBoO1xyXG59KShCbGF6ZSB8fCAoQmxhemUgPSB7fSkpO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
