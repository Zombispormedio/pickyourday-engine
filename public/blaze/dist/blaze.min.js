var __extends=this&&this.__extends||function(e,t){function i(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)},Blaze;!function(e){var t;!function(e){function t(e){for(var t=null,i=["webgl","experimental-webgl","webkit-3d","moz-webgl"],n=0;n<i.length;++n){try{t=e.getContext(i[n])}catch(r){}if(t)break}return null===t?(alert("Could not initialise WebGL"),null):(t.viewportWidth=e.width,t.viewportHeight=e.height,t)}function i(t,i,n,r){var o=t.createBuffer();switch(t.bindBuffer(t.ARRAY_BUFFER,o),r){case e.BUFFER_DRAW.STATIC:t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STATIC_DRAW);break;case e.BUFFER_DRAW.DYNAMIC:t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.DYNAMIC_DRAW);break;case e.BUFFER_DRAW.STREAM:t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STREAM_DRAW);break;default:t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STATIC_DRAW)}return t.bindBuffer(t.ARRAY_BUFFER,null),n?(o.itemSize=2,o.numItems=i.length/2):(o.itemSize=3,o.numItems=i.length/3),o}function n(t,i,n){var r=t.createBuffer(t.ELEMENT_ARRAY_BUFFER);switch(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r),n){case e.BUFFER_DRAW.STATIC:t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),t.STATIC_DRAW);break;case e.BUFFER_DRAW.DYNAMIC:t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),t.DYNAMIC_DRAW);break;case e.BUFFER_DRAW.STREAM:t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),t.STREAM_DRAW);break;default:t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),t.STATIC_DRAW)}return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),r.itemSize=1,r.numItems=i.length,r}function r(e,t){var i=e.createTexture();return e.bindTexture(e.TEXTURE_2D,i),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.bindTexture(e.TEXTURE_2D,null),i}function o(e,t,i){var n=e.createShader(t);return e.shaderSource(n,i),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS)?n:(console.log(e.getShaderInfoLog(n)),null)}function a(e,t){return o(e,e.FRAGMENT_SHADER,t)}function u(e,t){return o(e,e.VERTEX_SHADER,t)}function s(e,t){var i=a(e,t.fragment),n=u(e,t.vertex),r=e.createProgram();return e.attachShader(r,n),e.attachShader(r,i),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS)||console.log(e.getProgramInfoLog(r)),r}e.getGLContext=t,function(e){e[e.STATIC=0]="STATIC",e[e.STREAM=1]="STREAM",e[e.DYNAMIC=2]="DYNAMIC"}(e.BUFFER_DRAW||(e.BUFFER_DRAW={}));e.BUFFER_DRAW;e.createBuffer=i,e.createIndexBuffer=n,e.createTexture=r,e.createShader=o,e.createFragmentShader=a,e.createVertexShader=u,e.createProgram=s}(t=e.WebGLUtils||(e.WebGLUtils={}));var i;!function(e){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}function i(e){var i=t()+t();return e?e+i:i}function n(e){return e.map(function(e){return Number.isNaN(e)&&(e=0),e})}function r(e,t){var i=new XMLHttpRequest;i.open("GET",e,!0),i.addEventListener("load",function(){t(i.responseText)}),i.send()}function o(e){var t=e.split(".");return t[t.length-1]}function a(){return(new Date).getTime()}function u(e){return e*Math.PI/180}function s(e,t){for(var i=0,n=1,r=2,o=[],a=0;a<e.length;a++)o[a]=0;for(var a=0;a<t.length;a+=3){var u=[],s=[],f=[];u[i]=e[3*t[a+1]+i]-e[3*t[a]+i],u[n]=e[3*t[a+1]+n]-e[3*t[a]+n],u[r]=e[3*t[a+1]+r]-e[3*t[a]+r],s[i]=e[3*t[a+2]+i]-e[3*t[a+1]+i],s[n]=e[3*t[a+2]+n]-e[3*t[a+1]+n],s[r]=e[3*t[a+2]+r]-e[3*t[a+1]+r],f[i]=u[n]*s[r]-u[r]*s[n],f[n]=u[r]*s[i]-u[i]*s[r],f[r]=u[i]*s[n]-u[n]*s[i];for(var c=0;3>c;c++)o[3*t[a+c]+i]=o[3*t[a+c]+i]+f[i],o[3*t[a+c]+n]=o[3*t[a+c]+n]+f[n],o[3*t[a+c]+r]=o[3*t[a+c]+r]+f[r]}for(var a=0;a<e.length;a+=3){var l=[];l[i]=o[a+i],l[n]=o[a+n],l[r]=o[a+r];var h=Math.sqrt(l[i]*l[i]+l[n]*l[n]+l[r]*l[r]);0==h&&(h=1e-5),l[i]=l[i]/h,l[n]=l[n]/h,l[r]=l[r]/h,o[a+i]=l[i],o[a+n]=l[n],o[a+r]=l[r]}return o}e.s4=t,e.uuid=i,e.normalizeNaN=n,e.load=r,e.getExtension=o,e.nowInMilliseconds=a,e.degToRad=u,e.calculateNormals=s}(i=e.utils||(e.utils={})),function(e){e[e.ORBITING=0]="ORBITING",e[e.TRACKING=1]="TRACKING"}(e.CAMERA_TYPE||(e.CAMERA_TYPE={}));var n=e.CAMERA_TYPE,r=function(){function e(){}return e.setCanvasToContext=function(i,n){var r=t.getGLContext(n);e.setContext(i,r)},e.setContext=function(t,i){e._views[t].context=i},e.getContext=function(t){return e._views[t].context},e.createProgram=function(i,n){var r=e.getContext(i),o=t.createProgram(r,n);e.setProgram(i,o)},e.setProgram=function(t,i){e._views[t].program=i},e.getProgram=function(t){return e._views[t].program},e.useProgram=function(t){var i=e._views[t],n=i.context,r=i.program;n.useProgram(r)},e.createView=function(t){e._views[t]={}},e.setAttributeLocations=function(t,i){var n=e._views[t],r=n.context,o=n.program;n.attribs=i.reduce(function(e,t){return e[t]=r.getAttribLocation(o,t),e},{})},e.getAttrib=function(t,i){return e._views[t].attribs[i]},e.getUniform=function(t,i){return e._views[t].uniforms[i]},e.setUniformLocations=function(t,i){var n=e._views[t],r=n.context,o=n.program;n.uniforms=i.reduce(function(e,t){return e[t]=r.getUniformLocation(o,t),e},{})},e.enableAttrib=function(t,i,n){var r=e.getAttrib(t,i),o=e.getContext(t);o.enableVertexAttribArray(r),n?o.vertexAttribPointer(r,n.size||3,o.FLOAT,n.normalized||!1,n.stride||0,n.offset||0):o.vertexAttribPointer(r,3,o.FLOAT,!1,0,0)},e.disableAttrib=function(t,i){var n=e.getAttrib(t,i),r=e.getContext(t);r.disableVertexAttribArray(n)},e.renderLoop=function(e){setInterval(e,30)},e.addTexture=function(t,i){var n=e._views[t];n.textures=n.textures||[],n.textures.push(i)},e.removeTexture=function(t,i){var n=e._views[t];n.textures=n.textures||[];var r=n.textures.indexOf(i);n.textures.splice(r,1)},e.activeTexture=function(t,i,n){var r=e._views[t],o=r.context,a=(r.program,r.textures.indexOf(i));if(a>-1){o.activeTexture(0===a?o.TEXTURE0:o.TEXTURE0+a),o.bindTexture(o.TEXTURE_2D,n);var u=e.getUniform(t,"uSampler");o.uniform1i(u,a)}},e.isOffScreen=function(t){return e._views[t].offscreen},e.enableOffScreen=function(t){e._views[t].offscreen=!0},e.disableOffScreen=function(t){e._views[t].offscreen=!0},e.fillSelectorBuffer=function(t,i){var n=e._views[t];n.selectObjects=n.selectObjects||[],n.selectObjects.push(i)},e.clearSelectorBuffer=function(t){var i=e._views[t];i.selectObjects=[]},e.getSelectByColor=function(t,i){var n=e._views[t];return n.selectObjects=n.selectObjects||[],_.find(n.selectObjects,function(e){return _.isEqual(e.color,i)})},e._views={},e}();e.Ketch=r;var o=function(){function e(e){this._graph_id=e}return Object.defineProperty(e.prototype,"graphID",{get:function(){return this._graph_id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"gl",{get:function(){return r.getContext(this.graphID)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"program",{get:function(){return r.getProgram(this.graphID)},enumerable:!0,configurable:!0}),e.prototype.getUniform=function(e){return r.getUniform(this.graphID,e)},e}();e.Renderable=o;var a=function(e){function t(t){e.call(this,t)}return __extends(t,e),t.prototype.beginDraw=function(e){},t.prototype.endDraw=function(e){},t}(o);e.Entity=a;var u=function(e){function t(t){e.call(this,t),this._stack=[],this._mvMatrix=mat4.create(),this._pMatrix=mat4.create(),this._nMatrix=mat4.create()}return __extends(t,e),t.prototype.push=function(){var e=mat4.create();mat4.set(this._mvMatrix,e),this._stack.push(e)},t.prototype.pop=function(){if(0==this._stack.length)throw"invalid popMatrix";this._mvMatrix=this._stack.pop()},t.prototype.ModelView=function(){this._camera?this._mvMatrix=this._camera.modelView:mat4.identity(this._mvMatrix)},Object.defineProperty(t.prototype,"mvMatrix",{get:function(){return this._mvMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pMatrix",{get:function(){return this._pMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nMatrix",{get:function(){return this._nMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"MainCamera",{set:function(e){this._camera=e},enumerable:!0,configurable:!0}),t.prototype.Perspective=function(){var e=this.gl;mat4.identity(this._pMatrix),mat4.perspective(45,e.viewportWidth/e.viewportHeight,.1,1e3,this._pMatrix)},t.prototype.Normal=function(){mat4.identity(this._nMatrix),mat4.set(this._mvMatrix,this._nMatrix),mat4.inverse(this._nMatrix),mat4.transpose(this._nMatrix)},t.prototype.init=function(){this.ModelView(),this.Perspective(),this.Normal()},t.prototype.setUp=function(){var e=this.gl;this.Normal();var t=this.getUniform("uMVMatrix");t&&e.uniformMatrix4fv(t,!1,this._mvMatrix);var i=this.getUniform("uPMatrix");i&&e.uniformMatrix4fv(i,!1,this._pMatrix);var n=this.getUniform("uNMatrix");n&&e.uniformMatrix4fv(n,!1,this._nMatrix)},t}(o);e.MatrixStack=u;var s;!function(e){var n=function(e){function n(t){e.call(this,t)}return __extends(n,e),Object.defineProperty(n.prototype,"onload",{set:function(e){this._onload=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(e){var t=this,n=this,r=i.getExtension(e);i.load(e,function(e){var i;switch(r){case"obj":i=n.parseOBJ(e);break;case"json":i=n.parseJSON(e)}n.createBuffers(i),t._onload&&t._onload()})},enumerable:!0,configurable:!0}),n.prototype.parseJSON=function(e){var t={};try{t=JSON.parse(e)}catch(i){console.log(i)}return t},n.prototype.parseOBJ=function(e){var t={v:[],vn:[],vt:[],iv:[],"in":[],it:[]},i=e.split("\n"),n=i.filter(function(e){return"v"===e[0]}),r=i.filter(function(e){return"f"===e[0]});n.forEach(function(e){var i=e.replace("\r","").split(" "),n=i[0];t[n]=t[n].concat(i.slice(1).filter(function(e){return""!==e}))});var o=[];return r.forEach(function(e){var t=e.replace("\r","").replace("f","").split(" ");o=o.concat(t.slice(1).filter(function(e){return""!==e}))}),o.forEach(function(e){var i=e.split("/");t.iv.push(parseInt(i[0])-1),t["in"].push(parseInt(i[1])-1),t.it.push(parseInt(i[2])-1)}),t},n.prototype.createBuffers=function(e){function n(e){return t.createBuffer(o,e)}function r(e){return t.createIndexBuffer(o,e)}var o=this.gl;_.defaults(e,{v:[],vn:[],vt:[],iv:[],"in":[],it:[]}),e.v.length>0&&(this._vbo=n(e.v)),e.v.length>0&&e.iv.length>0&&(this._nbo=n(i.calculateNormals(e.v,e.iv))),e.vt.length>0&&(this._tbo=t.createBuffer(o,e.vt,!0)),e.iv.length>0&&(this._ivbo=r(e.iv)),e["in"].length>0&&(this._inbo=r(e["in"])),e.it.length>0&&(this._itbo=r(e.it))},Object.defineProperty(n.prototype,"vbo",{get:function(){return this._vbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"nbo",{get:function(){return this._nbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"tbo",{get:function(){return this._tbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"ivbo",{get:function(){return this._ivbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"inbo",{get:function(){return this._inbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"itbo",{get:function(){return this._itbo},enumerable:!0,configurable:!0}),n}(o);e.MeshBuffers=n;var a=function(e){function n(t){e.call(this,t),this._image=new Image,this._oid=i.uuid(this.constructor.name)}return __extends(n,e),Object.defineProperty(n.prototype,"onload",{set:function(e){this._onload=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(e){this._image.onload=this.loadTextureImage(this._onload),this._image.src=e},enumerable:!0,configurable:!0}),n.prototype.loadTextureImage=function(e){var i=this,n=this;return function(){i._texture=t.createTexture(n.gl,n._image),r.addTexture(n.graphID,n._oid),e&&e()}},Object.defineProperty(n.prototype,"content",{get:function(){return this._texture},enumerable:!0,configurable:!0}),n}(o);e.MeshTexture=a;var u=function(e){function t(t,i,n,r,o){e.call(this,t),this._ambient=i?vec4.create(i):vec4.create(),this._diffuse=n?vec4.create(n):void 0,this._specular=r?vec4.create(r):vec4.create(),this._shininess=o||200}return __extends(t,e),Object.defineProperty(t.prototype,"onload",{set:function(e){this._onload=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"src",{set:function(e){var t=this,n=this;i.load(e,function(e){var i=n.parse(e);t._ambient=i.Ka,t._diffuse=i.Kd,t._specular=i.Ks,t.shininess=i.Ns,t._onload&&t._onload()})},enumerable:!0,configurable:!0}),t.prototype.parse=function(e){var t={},i=["Ka","Kd","Ks","Ns"],n=e.split("\n");return n.forEach(function(e){var n=e.split(" "),r=n[0];if(i.indexOf(r)>-1)switch(r){case"Ns":t.Ns=Number(n[1]);break;default:var o=n.slice(1).map(function(e){return Number(e)});o.push(1),t[r]=o}}),t},Object.defineProperty(t.prototype,"ambient",{get:function(){return this._ambient},set:function(e){this._ambient=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"diffuse",{get:function(){return this._diffuse},set:function(e){this._diffuse=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"specular",{get:function(){return this._specular},set:function(e){this._specular=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"shininess",{get:function(){return this._shininess},set:function(e){this._shininess=e},enumerable:!0,configurable:!0}),t}(o);e.MeshMaterial=u}(s=e.Resources||(e.Resources={}));var f;!function(e){var t=function(){function e(){}return e.All_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D uSampler;\nuniform float uTime;\nuniform sampler2D uNoiseSampler;\nuniform vec2 uInverseTextureSize;\n\nvarying vec2 vTextureCoord;\n\nconst float speed = 15.0;\nconst float magnitude = 0.015;\n\nconst float grainIntensity = 0.1;\nconst float scrollSpeed = 4000.0;\n\nvec4 offsetLookup(float xOff, float yOff) {\n    return texture2D(uSampler, vec2(vTextureCoord.x + xOff*uInverseTextureSize.x, vTextureCoord.y + yOff*uInverseTextureSize.y));\n}\n\nvoid main(){\n\n     vec4 frameColor = offsetLookup(-4.0, 0.0) * 0.05;\n    frameColor += offsetLookup(-3.0, 0.0) * 0.09;\n    frameColor += offsetLookup(-2.0, 0.0) * 0.12;\n    frameColor += offsetLookup(-1.0, 0.0) * 0.15;\n    frameColor += offsetLookup(0.0, 0.0) * 0.16;\n    frameColor += offsetLookup(1.0, 0.0) * 0.15;\n    frameColor += offsetLookup(2.0, 0.0) * 0.12;\n    frameColor += offsetLookup(3.0, 0.0) * 0.09;\n    frameColor += offsetLookup(4.0, 0.0) * 0.05;\n    \n    vec4 grain=texture2D(uNoiseSampler, vTextureCoord*2.0+uTime*scrollSpeed*uInverseTextureSize);\n     \n      frameColor +=texture2D(uSampler, vTextureCoord)-(grain*grainIntensity);\n          vec2 wavyCoord;\n    wavyCoord.s=vTextureCoord.s+(sin(uTime+vTextureCoord.t*speed)*magnitude);\n    wavyCoord.t=vTextureCoord.t+(sin(uTime+vTextureCoord.s*speed)*magnitude);\n    \n    frameColor+=texture2D(uSampler, wavyCoord);\n    gl_FragColor=frameColor;\n}",e.Blur_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D uSampler;\nuniform vec2 uInverseTextureSize;\n\nvarying vec2 vTextureCoord;\n\nvec4 offsetLookup(float xOff, float yOff) {\n    return texture2D(uSampler, vec2(vTextureCoord.x + xOff*uInverseTextureSize.x, vTextureCoord.y + yOff*uInverseTextureSize.y));\n}\n\nvoid main(void)\n{\n    vec4 frameColor = offsetLookup(-4.0, 0.0) * 0.05;\n    frameColor += offsetLookup(-3.0, 0.0) * 0.09;\n    frameColor += offsetLookup(-2.0, 0.0) * 0.12;\n    frameColor += offsetLookup(-1.0, 0.0) * 0.15;\n    frameColor += offsetLookup(0.0, 0.0) * 0.16;\n    frameColor += offsetLookup(1.0, 0.0) * 0.15;\n    frameColor += offsetLookup(2.0, 0.0) * 0.12;\n    frameColor += offsetLookup(3.0, 0.0) * 0.09;\n    frameColor += offsetLookup(4.0, 0.0) * 0.05;\n\n    gl_FragColor = frameColor;\n}",e.Film_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D uSampler;\nuniform sampler2D uNoiseSampler;\nuniform vec2 uInverseTextureSize;\nuniform float uTime;\n\nvarying vec2 vTextureCoord;\n\nconst float grainIntensity = 0.1;\nconst float scrollSpeed = 4000.0;\n\n\nvoid main()\n{\n    vec4 frameColor=texture2D(uSampler, vTextureCoord);\n    vec4 grain=texture2D(uNoiseSampler, vTextureCoord*2.0+uTime*scrollSpeed*uInverseTextureSize);\n    gl_FragColor=frameColor-(grain*grainIntensity);\n\n}",e.Grey_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D uSampler;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    vec4 frameColor = texture2D(uSampler, vTextureCoord);\n    float luminance = frameColor.r * 0.3 + frameColor.g * 0.59 + frameColor.b * 0.11;\n    gl_FragColor = vec4(luminance, luminance, luminance, frameColor.a);\n}",e.Invert_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform sampler2D uSampler;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    vec4 frameColor = texture2D(uSampler, vTextureCoord);\n    gl_FragColor = vec4(1.0-frameColor.r, 1.0-frameColor.g, 1.0-frameColor.b, frameColor.a);\n}",e.No_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D uSampler;\nvarying vec2 vTextureCoord;\n\nvoid main(){\n    vec4 frameColor=texture2D(uSampler, vTextureCoord);\n    \n    gl_FragColor=frameColor;\n\n}\n",e.Particle="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform bool uWireframe;\n\nuniform sampler2D uSampler;\n\nvarying vec4 vColor;\n\n\nbool isBlack(vec4 color){\nreturn color.r==0.0 &&color.g==0.0&&color.b==0.0;\n}\nvoid main(void) { \n     if(uWireframe){\n         gl_FragColor = vColor;\n        }else{\n    gl_FragColor = texture2D(uSampler, gl_PointCoord);\n    if(gl_FragColor.a < 0.5 || isBlack(gl_FragColor)) discard;\n    }\n}",e.Phong="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform float uShininess;\nuniform vec3 uLightDirection;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\nuniform vec4 uLightSpecular;\n\nuniform bool uWireframe;\n\nuniform bool uOffscreen;\nuniform vec4 uSelectColor;\n\nuniform vec4 uMaterialAmbient;\nuniform vec4 uMaterialDiffuse;\nuniform vec4 uMaterialSpecular;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec4 vColor;\n\nvoid main(){\n\n        if(uWireframe){\n            gl_FragColor = vColor;\n            return;\n        }\n      \n\n        if(uOffscreen){\n            gl_FragColor=uSelectColor;\n            return;\n        }\n\n       \n        vec3 L= normalize(uLightDirection);\n        vec3 N= normalize(vNormal);\n        float lambertTerm=dot(N, -L);\n        \n        vec4 Ia= uLightAmbient*uMaterialAmbient;\n        \n        vec4 Id=vec4(0.0,0.0,0.0,1.0);\n        \n        vec4 Is=vec4(0.0,0.0,0.0,1.0);\n        \n        if(lambertTerm>0.0)\n        {\n            Id=uLightDiffuse*uMaterialDiffuse*lambertTerm;\n            \n            vec3 E= normalize(vEyeVec);\n            vec3 R= reflect(L, N);\n            float specular=pow(max(dot(R,E),0.0), uShininess);\n            Is=uLightSpecular*uMaterialSpecular*specular;\n        }\n        \n        vec4 finalColor=Ia+Id+Is;\n        finalColor.a=1.0;\n    \n        gl_FragColor =finalColor;\n        \n        \n}\n\n\n",e.Phong_lights="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nconst int NumLights=16;\n\nuniform float uShininess;\nuniform vec3 uLightDirection[NumLights];\nuniform float uCutOff[NumLights];\n\nuniform vec4 uLightAmbient[NumLights];\nuniform vec4 uLightDiffuse[NumLights];\nuniform vec4 uLightSpecular[NumLights];\n\nuniform bool uWireframe;\n\nuniform bool uOffscreen;\nuniform vec4 uSelectColor;\n\nuniform vec4 uMaterialAmbient;\nuniform vec4 uMaterialDiffuse;\nuniform vec4 uMaterialSpecular;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec4 vColor;\n\nvoid main(){\n\n        if(uWireframe){\n            gl_FragColor = vColor;\n            return;\n        }\n      \n\n        if(uOffscreen){\n            gl_FragColor=uSelectColor;\n            return;\n        }\n\n        vec4 finalColor=vec4(0.0,0.0,0.0,1.0);\n        for(int i=0; i<NumLights;i++){\n        \n        vec3 L= normalize(uLightDirection[i]);\n        vec3 N= normalize(vNormal);\n        float lambertTerm=dot(N, -L);\n        \n        vec4 Ia= uLightAmbient[i]*uMaterialAmbient;\n        \n        vec4 Id=vec4(0.0,0.0,0.0,1.0);\n        \n        vec4 Is=vec4(0.0,0.0,0.0,1.0);\n        \n        if(lambertTerm>uCutOff[i])\n        {\n            Id=uLightDiffuse[i]*uMaterialDiffuse*lambertTerm;\n            \n            vec3 E= normalize(vEyeVec);\n            vec3 R= reflect(L, N);\n            float specular=pow(max(dot(R,E),0.0), uShininess);\n            Is=uLightSpecular[i]*uMaterialSpecular*specular;\n        }\n        \n        finalColor+=Ia+Id+Is;\n        \n        }\n        finalColor.a=1.0;\n    \n        gl_FragColor =finalColor;\n        \n        \n}\n\n\n",e.Phong_positional="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float uShininess;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\n\n\nuniform bool uWireframe;\n\nuniform bool uOffscreen;\nuniform vec4 uSelectColor;\n\n\nuniform vec4 uMaterialDiffuse;\n\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec3 vLightDir;\nvarying vec4 vColor;\n\nvoid main(){\n\n        if(uWireframe){\n            gl_FragColor = vColor;\n            return;\n        }\n      \n\n        if(uOffscreen){\n            gl_FragColor=uSelectColor;\n            return;\n        }\n\n       \n        vec3 L= normalize(vLightDir);\n        vec3 N= normalize(vNormal);\n        float lambertTerm=dot(N, -L);\n        \n        vec4 Ia= uLightAmbient;\n        \n        vec4 Id=vec4(0.0,0.0,0.0,1.0);\n        \n        vec4 Is=vec4(0.0,0.0,0.0,1.0);\n        \n        if(lambertTerm>0.0)\n        {\n            Id=uMaterialDiffuse*lambertTerm;\n            \n            vec3 E= normalize(vEyeVec);\n            vec3 R= reflect(L, N);\n            float specular=pow(max(dot(R,E),0.0), uShininess);\n            Is=uLightDiffuse*specular;\n        }\n        \n        vec4 finalColor=Ia+Id+Is;\n        finalColor.a=1.0;\n    \n        gl_FragColor =finalColor;\n        \n        \n}\n\n\n",e.Toon="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float uShininess;\nuniform vec3 uLightDirection;\n\nuniform mat4 uMVMatrix;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\nuniform vec4 uMaterialDiffuse;\n\nuniform bool uWireframe;\n\nuniform bool uOffscreen;\nuniform vec4 uSelectColor;\n\nvarying vec4 vColor;\n\nvarying vec3 vNormal;\nvarying vec3 vVertex;\n\nvoid main(){\n\n       if(uWireframe){\n            gl_FragColor = vColor;\n            return;\n        }\n      \n\n        if(uOffscreen){\n            gl_FragColor=uSelectColor;\n            return;\n        }\n\n        vec4 color0=vec4(uMaterialDiffuse.rgb,1.0);\n        vec4 color1=vec4(0.0,0.0,0.0, 1.0);\n        vec4 color2=vec4(uMaterialDiffuse.rgb, 1.0);\n        \n        vec3 N= vNormal;\n        vec3 L = normalize(uLightDirection);\n        \n        vec4 eyePos= uMVMatrix*vec4(0.0,0.0,0.0,1.0);\n        \n        vec3 EyeVert = normalize(-eyePos.xyz);\n        \n        vec3 EyeLight=normalize(L+EyeVert);\n        \n        float sil= max(dot(N, EyeVert), 0.0);\n        \n        if( sil<0.4){\n            gl_FragColor=color1;\n        }else{\n             gl_FragColor=color0;\n             \n             float spec=pow(max(dot(N, EyeLight), 0.0), uShininess);\n             \n             if(spec<0.2) gl_FragColor*=0.8;\n             else gl_FragColor=color2;\n             \n             float diffuse=max(dot(N, L), 0.0);\n             if(diffuse<0.5)gl_FragColor*=0.8;\n        }\n\n\n\n\n\n}\n\n\n\n",e.Wavy_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\nuniform sampler2D uSampler;\nuniform float uTime;\n\nvarying vec2 vTextureCoord;\n\nconst float speed = 15.0;\nconst float magnitude = 0.015;\n\nvoid main(){\n    \n    vec2 wavyCoord;\n    wavyCoord.s=vTextureCoord.s+(sin(uTime+vTextureCoord.t*speed)*magnitude);\n    wavyCoord.t=vTextureCoord.t+(sin(uTime+vTextureCoord.s*speed)*magnitude);\n    \n    vec4 frameColor=texture2D(uSampler, wavyCoord);\n    gl_FragColor=frameColor;\n\n\n}",e}();e.Fragment=t;var i=function(){function e(){}return e.Effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec2 a_position;\nattribute vec2 a_texture_coords;\n\nvarying vec2 vTextureCoord;\n\nvoid main(){\n    vTextureCoord=a_texture_coords;\n\n    gl_Position=vec4(a_position, 0.0,1.0);\n    \n}",e.Particle="#ifdef GL_ES\nprecision mediump float;\n#endif\nattribute vec3 a_position;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform float uPointSize;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\n\nvarying vec4 vColor;\n\nvoid main(void) {\n\n if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }\n    \n    gl_Position = uPMatrix * uMVMatrix * vec4(a_position.xyz, 1.0);\n    gl_PointSize = uPointSize;\n}",e.Phong="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec4 vColor;\n\nvoid main(){\n\n    vec4 vertex = uMVMatrix * vec4(a_position, 1.0);\n	\n	\n	 if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }else{\n	\n	vNormal = vec3(uNMatrix * vec4(a_normal, 1.0));\n	vEyeVec=-vec3(vertex.xyz);  \n	\n	}\n	 \n	gl_Position =uPMatrix * vertex;\n\n}\n\n\n",e.Phong_lights="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec4 vColor;\n\nvoid main(){\n\n    vec4 vertex = uMVMatrix * vec4(a_position, 1.0);\n	\n	\n	 if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }else{\n	\n	vNormal = vec3(uNMatrix * vec4(a_normal, 1.0));\n	vEyeVec=-vec3(vertex.xyz);  \n	\n	}\n	 \n	gl_Position =uPMatrix * vertex;\n\n}\n\n\n",e.Phong_positional="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nuniform vec3 uLightPosition;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec3 vLightDir;\n\nvarying vec4 vColor;\n\nvoid main(){\n\n    vec4 vertex = uMVMatrix * vec4(a_position, 1.0);\n	\n	\n	 if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }else{\n	\n	vNormal = vec3(uNMatrix * vec4(a_normal, 1.0));\n    vLightDir=vertex.xyz-uLightPosition;  \n	vEyeVec=-vec3(vertex.xyz);  \n	\n	}\n	 \n	gl_Position =uPMatrix * vertex;\n\n}\n\n\n",e.Toon="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\nvarying vec3 vNormal;\nvarying vec3 vVertex;\nvarying vec4 vColor;\n\nvoid main(){\n    \n    vec4 normal= uNMatrix * vec4(a_normal,1.0);\n    \n     if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }else{\n    \n    vNormal=normal.xyz;\n    vVertex=a_position;\n    }\n    \n    gl_Position=uPMatrix*uMVMatrix*vec4(a_position, 1.0);\n    \n    \n    \n    \n\n}",e}();e.Vertex=i}(f=e.Shaders||(e.Shaders={}));var c=function(e){function t(t,i,n,r){e.call(this,t),this._frequency=i,this._interval_id=null,this._callback=r}return __extends(t,e),t.prototype.onFrame=function(){if(t.ElapseTime=i.nowInMilliseconds(),!(t.ElapseTime<5)){for(var e=Math.floor(t.ElapseTime/this._frequency);e>0&&t.Count!=this._times;)this._callback(),e--,t.Count++;t.Count===this._times&&this.stop()}},t.prototype.start=function(){this._intime=i.nowInMilliseconds(),this._interval_id=setInterval(this.onFrame,this._frequency/1e3)},t.prototype.stop=function(){this._interval_id&&clearInterval(this._interval_id)},t.prototype.beginDraw=function(){},t.prototype.endDraw=function(){},t.Count=0,t}(a);e.AnimationEntity=c;var l=function(e){function t(t,i,n,r){e.call(this,t),this._material=null,this._texture=null,this._buffers=null,this._meshfile=i||null,this._materialfile=n||null,this._texturefile=r||null}return __extends(t,e),t.prototype.loadBuffers=function(e,t){this._buffers=new s.MeshBuffers(this.graphID),this._buffers.onload=t,this._buffers.src=e},t.prototype.loadTexture=function(e,t){this._texture=new s.MeshTexture(this.graphID),this._texture.onload=t,this._texture.src=e},Object.defineProperty(t.prototype,"material",{set:function(e){this._material=e},enumerable:!0,configurable:!0}),t.prototype.loadMaterial=function(e,t){this._material=new s.MeshMaterial(this.graphID),this._material.onload=t,this._material.src=e},t.prototype.loadMesh=function(e){var t=this,i=this;async.waterfall([function(e){return i._meshfile?(console.log("Loading Buffers"),void i.loadBuffers(i._meshfile,function(){console.log("Loaded Buffers"),e()})):e()},function(e){return t._texturefile?(console.log("Loading Texture"),void i.loadTexture(i._texturefile,function(){console.log("Loaded Texture"),e()})):e()},function(e){return i._materialfile?(console.log("Loading Material"),void i.loadMaterial(i._materialfile,function(){console.log("Loaded Material"),e()})):e()}],function(t){return t?console.log(t):void(e&&e())})},t.prototype.loadMeshByObject=function(e){this._buffers=new s.MeshBuffers(this.graphID),this._buffers.createBuffers(e)},t.prototype.loadMaterialByObject=function(e){this._material=new s.MeshMaterial(this.graphID),e.ambient&&(this._material.ambient=e.ambient),e.specular&&(this._material.specular=e.specular),e.diffuse&&(this._material.diffuse=e.diffuse),e.shininess&&(this._material.shininess=e.shininess)},t.prototype.setMaterialUniforms=function(){if(this._material){var e=this.gl;if(this._material.ambient){var t=this.getUniform("uMaterialAmbient");t&&e.uniform4fv(t,this._material.ambient)}if(this._material.diffuse){var i=this.getUniform("uMaterialDiffuse");i&&e.uniform4fv(i,this._material.diffuse)}if(this._material.specular){var n=this.getUniform("uMaterialSpecular");n&&e.uniform4fv(n,this._material.specular)}if(this._material.shininess){var r=this.getUniform("uShininess");r&&e.uniform1f(r,this._material.shininess)}}},t.prototype.beginDraw=function(){var e=this.gl;this.setMaterialUniforms(),e.bindBuffer(e.ARRAY_BUFFER,this._buffers.vbo),r.enableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ARRAY_BUFFER,this._buffers.nbo),r.enableAttrib(this.graphID,"a_normal");var t=this._buffers.ivbo;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t),e.drawElements(e.TRIANGLES,t.numItems,e.UNSIGNED_SHORT,0)},t.prototype.endDraw=function(){var e=this.gl;r.disableAttrib(this.graphID,"a_position"),r.disableAttrib(this.graphID,"a_normal"),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t}(a);e.MeshEntity=l;var h=function(e){function t(t,i,n,r){e.call(this,t),this._matrix=mat4.create(),this._position=i||vec3.create(),this._size=n||vec3.create([1,1,1]),this._rotation=r||{angle:0,axis:vec3.create()}}return __extends(t,e),t.prototype.identity=function(){mat4.identity(this._matrix)},t.prototype.setMatrix=function(e){this._matrix=e},t.prototype.transpose=function(){mat4.transpose(this._matrix,this._matrix);
},Object.defineProperty(t.prototype,"position",{get:function(){return this._position},set:function(e){this._position=e},enumerable:!0,configurable:!0}),t.prototype.setAbsolutePosition=function(e,t,i){this._position=[e,t,i]},t.prototype.translate=function(e,t,i){void 0===e&&(e=0),void 0===t&&(t=0),void 0===i&&(i=0);var n=this._position,r=vec3.create([e,t,i]);vec3.add(n,r,this._position)},Object.defineProperty(t.prototype,"size",{get:function(){return this._size},set:function(e){this._size=e},enumerable:!0,configurable:!0}),t.prototype.setSize=function(e,t,i){this._size=[e,t,i]},t.prototype.scale=function(e,t,i){void 0===e&&(e=0),void 0===t&&(t=0),void 0===i&&(i=0);var n=this._size,r=vec3.create([e,t,i]);vec3.add(n,r,this._size)},Object.defineProperty(t.prototype,"rotation",{get:function(){return this._rotation},set:function(e){this._rotation=e},enumerable:!0,configurable:!0}),t.prototype.setRotation=function(e,t){e&&(this._rotation.angle=e),t&&(this._rotation.axis=t)},t.prototype.setAngle=function(e){this._rotation.angle=e},t.prototype.setAxis=function(e){this._rotation.axis=e},t.prototype.rotateAngle=function(e){void 0===e&&(e=0),this._rotation.angle+=e},t.prototype.moveAxis=function(e,t,i){void 0===e&&(e=0),void 0===t&&(t=0),void 0===i&&(i=0);var n=this._rotation.axis,r=vec3.create([e,t,i]);vec3.add(n,r,this._rotation.axis)},t.prototype.beginDraw=function(e){if(e.push(),e.ModelView(),this._matrix=e.mvMatrix,void 0!=this._position&&mat4.translate(this._matrix,this._position),void 0!=this._size&&mat4.scale(this._matrix,this._size),void 0!=this._rotation){var t=this._rotation.angle*Math.PI/180;mat4.rotate(this._matrix,t,this._rotation.axis)}e.setUp()},t.prototype.endDraw=function(e){e.pop()},t}(a);e.TransformEntity=h;var m=function(e){function t(t,i,n,r,o,a,u){e.call(this,t),this._ambient=i?vec4.create(i):null,this._diffuse=n?vec4.create(n):null,this._position=r?vec3.create(r):null,this._specular=o?vec4.create(o):null,this._direction=a?vec3.create(a):null,this._cutoff=u||0}return __extends(t,e),Object.defineProperty(t.prototype,"ambient",{get:function(){return this._ambient},set:function(e){this._ambient=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"diffuse",{get:function(){return this._diffuse},set:function(e){this._diffuse=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"specular",{get:function(){return this._specular},set:function(e){this._specular=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"position",{get:function(){return this._diffuse},set:function(e){this._position=i.normalizeNaN(vec3.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"direction",{get:function(){return this._direction},set:function(e){this._direction=i.normalizeNaN(vec3.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cutOff",{get:function(){return this._cutoff},set:function(e){this._cutoff=e},enumerable:!0,configurable:!0}),t.prototype.beginDraw=function(){var e=this.gl;if(this._ambient){var t=this.getUniform("uLightAmbient");t&&e.uniform4fv(t,this._ambient)}if(this._diffuse){var i=this.getUniform("uLightDiffuse");i&&e.uniform4fv(i,this._diffuse)}if(this._specular){var n=this.getUniform("uLightSpecular");n&&e.uniform4fv(n,this._specular)}if(this._position){var r=this.getUniform("uLightPosition");r&&e.uniform3fv(r,this._position)}if(this._direction){var o=this.getUniform("uLightDirection");o&&e.uniform3fv(o,this._direction)}if(this._cutoff){var a=this.getUniform("uCutOff");a&&e.uniform1f(a,this._cutoff)}},t.prototype.endDraw=function(){},t}(a);e.LightEntity=m;var p=function(e){function t(t,i){e.call(this,t),this._value=i}return __extends(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(e){this._value=e},enumerable:!0,configurable:!0}),t.prototype.beginDraw=function(){var e=this.gl,t=this.getUniform("uMaterialDiffuse");t&&e.uniform4fv(t,this._value)},t.prototype.endDraw=function(){},t}(a);e.DiffuseEntity=p;var d=function(e){function n(t,i){e.call(this,t),this._pointSize=i||1,this._buffer=null,this._texture_id=""}return __extends(n,e),n.prototype.configure=function(e,n){var o=this.gl;this._buffer=o.createBuffer(),o.bindBuffer(o.ARRAY_BUFFER,this._buffer),o.bufferData(o.ARRAY_BUFFER,new Float32Array(e),o.STATIC_DRAW),o.bindBuffer(o.ARRAY_BUFFER,null),this._numItems=e.length,this._texture_id=i.uuid("Texture"),this._texture=t.createTexture(o,n),r.addTexture(this.graphID,this._texture_id)},n.prototype.update=function(e){var t=this.gl;t.bindBuffer(t.ARRAY_BUFFER,this._buffer),t.bufferData(t.ARRAY_BUFFER,new Float32Array(e),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),this._numItems=e.length},Object.defineProperty(n.prototype,"textureID",{get:function(){return this._texture_id},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"pointSize",{set:function(e){this._pointSize=e},enumerable:!0,configurable:!0}),n.prototype.beginDraw=function(){var e=this.gl,t=this.getUniform("uPointSize");t&&e.uniform1f(t,this._pointSize),e.bindBuffer(e.ARRAY_BUFFER,this._buffer),r.enableAttrib(this.graphID,"a_position"),r.activeTexture(this.graphID,this._texture_id,this._texture),e.drawArrays(e.POINTS,0,this._numItems/3)},n.prototype.endDraw=function(){var e=this.gl;r.disableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ARRAY_BUFFER,null)},n}(a);e.ParticleEntity=d;var v=function(e){function t(t){e.call(this,t),this._lights=[]}return __extends(t,e),t.prototype.addLight=function(e){this._lights.push(e)},t.prototype.getArraysObject=function(){return this._lights.reduce(function(e,t){var i=Array.prototype.slice.call(t.ambient),n=Array.prototype.slice.call(t.diffuse),r=Array.prototype.slice.call(t.specular),o=Array.prototype.slice.call(t.direction);return e.ambient=e.ambient.concat(i),e.diffuse=e.diffuse.concat(n),e.specular=e.specular.concat(r),e.direction=e.direction.concat(o),e.cutoff=e.cutoff.concat(t.cutoff),e},{ambient:[],diffuse:[],specular:[],direction:[],cutoff:[]})},t.prototype.beginDraw=function(){var e=this.gl;if(this._lights.length>0){var t=this.getArraysObject();if(t.ambient){var i=this.getUniform("uLightAmbient");i&&e.uniform4fv(i,t.ambient)}if(t.diffuse){var n=this.getUniform("uLightDiffuse");n&&e.uniform4fv(n,t.diffuse)}if(t.specular){var r=this.getUniform("uLightSpecular");r&&e.uniform4fv(r,t.specular)}if(t.direction){var o=this.getUniform("uLightDirection");o&&e.uniform3fv(o,t.direction)}if(t.cutoff){var a=this.getUniform("uCutOff");a&&e.uniform1f(a,t.cutoff)}}},t}(a);e.LightArrayEntity=v;var g=function(e){function t(t,i){e.call(this,t),this._type=i||n.ORBITING,this._cmatrix=mat4.create(),mat4.identity(this._cmatrix),this._up=vec3.create(),this._right=vec3.create(),this._normal=vec3.create(),this._position=vec3.create(),this._azimuth=0,this._elevation=0,this._steps=0}return __extends(t,e),Object.defineProperty(t.prototype,"type",{set:function(e){this._type=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"position",{get:function(){return this._position},set:function(e){this._position=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"azimuth",{get:function(){return this._azimuth},set:function(e){var t=e-this._azimuth;this.changeAzimuth(t)},enumerable:!0,configurable:!0}),t.prototype.changeAzimuth=function(e){this._azimuth+=e,(this._azimuth>360||this._azimuth<-360)&&(this._azimuth=this._azimuth%360)},Object.defineProperty(t.prototype,"elevation",{get:function(){return this._elevation},set:function(e){var t=e-this._elevation;this.changeElevation(t)},enumerable:!0,configurable:!0}),t.prototype.changeElevation=function(e){this._elevation+=e,(this._elevation>360||this._elevation<-360)&&(this._elevation=this._elevation%360)},Object.defineProperty(t.prototype,"zoom",{get:function(){return this._steps},set:function(e){var t=vec3.create(),i=vec3.create();t=this.position;var r=e-this._steps;vec3.normalize(this._normal,i);var o=vec3.create();this._type===n.TRACKING?(o[0]=t[0]-r*i[0],o[1]=t[1]-r*i[1],o[2]=t[2]-r*i[2]):(o[0]=t[0],o[1]=t[1],o[2]=t[2]-r),this.position=o,this._steps=e},enumerable:!0,configurable:!0}),t.prototype.calculateOrientation=function(){var e=this._cmatrix;mat4.multiplyVec4(e,[1,0,0,0],this._right),mat4.multiplyVec4(e,[0,1,0,0],this._up),mat4.multiplyVec4(e,[0,0,1,0],this._normal)},t.prototype.beginDraw=function(){mat4.identity(this._cmatrix),this.calculateOrientation(),this._type===n.TRACKING?(mat4.translate(this._cmatrix,this._position),mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180)):(mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180),mat4.translate(this._cmatrix,this._position)),this.calculateOrientation(),this._type===n.TRACKING&&mat4.multiplyVec4(this._cmatrix,[0,0,0,1],this._position)},Object.defineProperty(t.prototype,"modelView",{get:function(){var e=mat4.create();return mat4.inverse(this._cmatrix,e),e},enumerable:!0,configurable:!0}),t.prototype.endDraw=function(){},t}(a);e.CameraEntity=g;var b=function(e){function t(t,i){e.call(this,t),i=i||100,this._vertices=[0,0,0,i,0,0,0,0,0,0,i,0,0,0,0,0,0,i],this._indices=[0,1,2,3,4,5],this._colors=[1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1]}return __extends(t,e),t.prototype.init=function(){var e=this.gl;this._vbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this._vertices),e.STATIC_DRAW),this._ibo=e.createBuffer(),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._ibo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),e.STATIC_DRAW),this._cbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._cbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this._colors),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t.prototype.beginDraw=function(){var e=this.gl,t=this.getUniform("uWireframe");t&&e.uniform1i(t,!0);var i=this.getUniform("uPerVertexColor");i&&e.uniform1i(i,!0),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),r.enableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ARRAY_BUFFER,this._cbo),r.enableAttrib(this.graphID,"a_color",{size:4}),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._ibo),e.drawElements(e.LINES,this._indices.length,e.UNSIGNED_SHORT,0)},t.prototype.endDraw=function(){var e=this.gl,t=this.getUniform("uWireframe");t&&e.uniform1i(t,!1);var i=this.getUniform("uPerVertexColor");i&&e.uniform1i(i,!1),r.disableAttrib(this.graphID,"a_position"),r.disableAttrib(this.graphID,"a_color"),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t}(a);e.AxisEntity=b;var y=function(e){function t(t,i,n){e.call(this,t),this._dimesions={dim:i||50,lines:n||50}}return __extends(t,e),t.prototype.init=function(){var e=this.gl;this.build(),this._vbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this._vertices),e.STATIC_DRAW),this._ibo=e.createBuffer(),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._ibo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t.prototype.build=function(){for(var e=2*this._dimesions.dim/this._dimesions.lines,t=[],i=[],n=0;n<=this._dimesions.lines;n++)t[6*n]=-this._dimesions.dim,t[6*n+1]=-.5,t[6*n+2]=-this._dimesions.dim+n*e,t[6*n+3]=this._dimesions.dim,t[6*n+4]=-.5,t[6*n+5]=-this._dimesions.dim+n*e,t[6*(this._dimesions.lines+1)+6*n]=-this._dimesions.dim+n*e,t[6*(this._dimesions.lines+1)+6*n+1]=-.5,t[6*(this._dimesions.lines+1)+6*n+2]=-this._dimesions.dim,t[6*(this._dimesions.lines+1)+6*n+3]=-this._dimesions.dim+n*e,t[6*(this._dimesions.lines+1)+6*n+4]=-.5,t[6*(this._dimesions.lines+1)+6*n+5]=this._dimesions.dim,i[2*n]=2*n,i[2*n+1]=2*n+1,i[2*(this._dimesions.lines+1)+2*n]=2*(this._dimesions.lines+1)+2*n,i[2*(this._dimesions.lines+1)+2*n+1]=2*(this._dimesions.lines+1)+2*n+1;this._vertices=t,this._indices=i},t.prototype.beginDraw=function(){var e=this.gl,t=this.getUniform("uWireframe");t&&e.uniform1i(t,!0);var i=this.getUniform("uMaterialDiffuse");i&&e.uniform4fv(i,[.7,.7,.7,1]),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),r.enableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._ibo),e.drawElements(e.LINES,this._indices.length,e.UNSIGNED_SHORT,0)},t.prototype.endDraw=function(){var e=this.gl,t=this.getUniform("uWireframe");t&&e.uniform1i(t,!1),r.disableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t}(a);e.GridEntity=y;var E=function(e){function t(t,i){e.call(this,t),this._color=this.generateUniqueColor(),this._data=i}return __extends(t,e),Object.defineProperty(t.prototype,"data",{get:function(){return this._data},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},enumerable:!0,configurable:!0}),t.prototype.generateUniqueColor=function(){for(var e,t=function(e){return void 0!=r.getSelectByColor(this.graphID,e)}.bind(this),i=!0;i;)e=[Number(Math.random().toFixed(2)),Number(Math.random().toFixed(2)),Number(Math.random().toFixed(2)),1],i=t(e);return e},t.prototype.beginDraw=function(){if(r.isOffScreen(this.graphID)){var e=this.gl,t=this.getUniform("uSelectColor");t&&e.uniform4fv(t,this._color)}},t.prototype.endDraw=function(){},t}(a);e.SelectEntity=E;var x=function(e){function t(t,i){e.call(this,t),this._dimensions=i,this._framebuffer=null,this._renderbuffer=null,this._texture=null,this.configure()}return __extends(t,e),t.prototype.configure=function(){var e=this.gl;this._texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this._texture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this._dimensions.width,this._dimensions.height,0,e.RGBA,e.UNSIGNED_BYTE,null),this._renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,this._renderbuffer),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,this._dimensions.width,this._dimensions.height),this._framebuffer=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,this._framebuffer),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this._texture,0),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,this._renderbuffer),e.bindTexture(e.TEXTURE_2D,null),e.bindRenderbuffer(e.RENDERBUFFER,null),e.bindFramebuffer(e.FRAMEBUFFER,null)},t.prototype.fill=function(e){r.fillSelectorBuffer(this.graphID,e)},t.prototype.clear=function(){r.clearSelectorBuffer(this.graphID)},t.prototype.find=function(e){var t=this.gl,i=new Uint8Array(4);t.bindFramebuffer(t.FRAMEBUFFER,this._framebuffer),t.readPixels(e.x,e.y,1,1,t.RGBA,t.UNSIGNED_BYTE,i),t.bindFramebuffer(t.FRAMEBUFFER,null);var n=[].slice.call(i).map(function(e){return parseFloat((e/255).toFixed(2))}),o=r.getSelectByColor(this.graphID,n);return o?o.data:void 0},t.prototype.render=function(e){var t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,this._framebuffer);var i=this.getUniform("uOffscreen");t.uniform1i(i,!0),r.enableOffScreen(this.graphID),e(),t.uniform1i(i,!1),r.disableOffScreen(this.graphID),t.bindFramebuffer(t.FRAMEBUFFER,null)},t}(o);e.Selector=x;var R=function(e){function i(t,i,n){e.call(this,t),this._texture=null,this._framebuffer=null,this._renderbuffer=null,this._vbo=null,this._tbo=null,this._shader=null,this._uniforms=null,this._attribs=null,this._noisetexture=null,this._start=Date.now(),this._canvas=i,this._type=n||"no",this.configure(),this.Geometry(),this.setEffect()}return __extends(i,e),i.prototype.configure=function(){var e=this.gl,t=this._canvas.width,i=this._canvas.height;this._texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this._texture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,i,0,e.RGBA,e.UNSIGNED_BYTE,null),this._renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,this._renderbuffer),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,t,i),this._framebuffer=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,this._framebuffer),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this._texture,0),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,this._renderbuffer),e.bindTexture(e.TEXTURE_2D,null),e.bindRenderbuffer(e.RENDERBUFFER,null),e.bindFramebuffer(e.FRAMEBUFFER,null)},i.prototype.Geometry=function(){var e=this.gl,t=[-1,-1,1,-1,-1,1,-1,1,1,-1,1,1],i=[0,0,1,0,0,1,0,1,1,0,1,1];this._vbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),this._tbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._tbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null)},i.prototype.setEffect=function(e){this._type=e||this._type;var i=this.gl,n={};switch(n.vertex=f.Vertex.Effect,this._type){case"all":n.fragment=f.Fragment.All_effect;break;case"invert":n.fragment=f.Fragment.Invert_effect;break;case"grey":n.fragment=f.Fragment.Grey_effect;break;case"blur":n.fragment=f.Fragment.Blur_effect;break;case"film":n.fragment=f.Fragment.Film_effect;break;case"wavy":n.fragment=f.Fragment.Wavy_effect;break;case"no":default:n.fragment=f.Fragment.No_effect}this._shader&&i.deleteProgram(this._shader),this._shader=t.createProgram(i,n);var r;this._attribs={},r=i.getProgramParameter(this._shader,i.ACTIVE_ATTRIBUTES);for(var o=0;r>o;o++){var a=i.getActiveAttrib(this._shader,o);this._attribs[a.name]=i.getAttribLocation(this._shader,a.name)}this._uniforms={},r=i.getProgramParameter(this._shader,i.ACTIVE_UNIFORMS);for(var o=0;r>o;o++){var u=i.getActiveUniform(this._shader,o);this._uniforms[u.name]=i.getUniformLocation(this._shader,u.name)}},i.prototype.Size=function(){var e=this.gl,t=this._canvas.width,i=this._canvas.height;e.bindTexture(e.TEXTURE_2D,this._texture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,i,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindRenderbuffer(e.RENDERBUFFER,this._renderbuffer),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,t,i),e.bindTexture(e.TEXTURE_2D,null),e.bindRenderbuffer(e.RENDERBUFFER,null)},i.prototype.setNoiseTexture=function(e){var i=this.gl;this._noisetexture=t.createTexture(i,e)},i.prototype.Bind=function(){var e=this.gl,t=this._canvas.width,i=this._canvas.height;e.useProgram(this._shader),e.enableVertexAttribArray(this._attribs.a_position),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),e.vertexAttribPointer(this._attribs.a_position,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(this._attribs.a_texture_coords),e.bindBuffer(e.ARRAY_BUFFER,this._tbo),e.vertexAttribPointer(this._attribs.a_texture_coords,2,e.FLOAT,!1,0,0),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this._texture),e.uniform1i(this._uniforms.uSampler,0),this._uniforms.uTime&&e.uniform1f(this._uniforms.uTime,(Date.now()-this._start)/1e3),this._uniforms.uInverseTextureSize&&e.uniform2f(this._uniforms.uInverseTextureSize,1/t,1/i),this._uniforms.uNoiseSampler&&this._noisetexture&&(e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,this._noisetexture),e.uniform1i(this._uniforms.uNoiseSampler,1))},i.prototype.bindFrameBuffer=function(){var e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,this._framebuffer)},i.prototype.unbindFrameBuffer=function(){var e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,null)},i.prototype.draw=function(){var e=this.gl;e.drawArrays(e.TRIANGLES,0,6),e.bindBuffer(e.ARRAY_BUFFER,null),e.disableVertexAttribArray(this._attribs.a_position),e.disableVertexAttribArray(this._attribs.a_texture_coords)},i}(o);e.Effects=R;var A=function(){function e(e,t,n){this._parentNode=e,this._parentNode&&this._parentNode.addChildNode(this),this._childNodes=[],this._type=t,this._oid=i.uuid(this._type||this.constructor.name),this._entity=n}return Object.defineProperty(e.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this._parentNode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"entity",{get:function(){return this._entity},set:function(e){this._entity=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this._childNodes},enumerable:!0,configurable:!0}),e.prototype.addChildNode=function(e){this._childNodes.push(e)},e.prototype.removeChildNode=function(e){var t=this.indexOf(e);t>-1&&this._childNodes.splice(t,1)},e.prototype.getChildNodeByIndex=function(e){return this._childNodes[e]||void 0},e.prototype.existsChildNode=function(e){return void 0!==this._childNodes[e]},e.prototype["delete"]=function(){this._parentNode.removeChildNode(this)},e.prototype.createChildNode=function(t,i){return new e(this,t,i)},e.prototype.isRoot=function(){return void 0===this._parentNode},e.prototype.indexOf=function(e){var t=e.oid;return _.findIndex(this._childNodes,function(e){return e.oid===t})},e.prototype.indexInParent=function(){var e=-1;return this.isRoot()||(e=this._parentNode.indexOf(this)),e},e.prototype.hasSibling=function(e){var t=!1;if(!this.isRoot()){var i=this._parentNode.indexOf(this);i>-1&&(e?this._parentNode.getChildNodeByIndex(i-1)&&(t=!0):this._parentNode.getChildNodeByIndex(i+1)&&(t=!0))}return t},e.prototype.nextSibling=function(){var e=null;if(!this.isRoot()&&this.hasSibling()){var t=this._parentNode.indexOf(this);e=this._parentNode.getChildNodeByIndex(t+1)}return e},e.prototype.previousSibling=function(){var e=null;if(!this.isRoot()&&this.hasSibling(!0)){var t=this._parentNode.indexOf(this);e=this._parentNode.getChildNodeByIndex(t-1)}return e},e.prototype.firstChild=function(){return this.getChildNodeByIndex(0)},e.prototype.lastChild=function(){return this.getChildNodeByIndex(this._childNodes.length-1)},e.prototype.removeChildNodes=function(){this._childNodes=[]},e.prototype.draw=function(e){this._entity&&this._entity.beginDraw(e);for(var t=0;t<this._childNodes.length;t++){var i=this._childNodes[t];i.draw(e)}this._entity&&this._entity.endDraw(e)},e}();e.NodeElement=A;var T=function(e){function t(){var t=i.uuid();e.call(this,t),this._oid=t,this._scene=new A(void 0,"Scene"),this._matrixStack=new u(this._oid),this._loaderBuffer=[],r.createView(this._oid),this._selector=null,this._effects=null}return __extends(t,e),Object.defineProperty(t.prototype,"scene",{get:function(){return this._scene},enumerable:!0,configurable:!0}),t.prototype.Environment=function(e){var t=this.gl;e=e||[],t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.clearColor(e[0]||0,e[1]||0,e[2]||0,1),t.clearDepth(1)},t.prototype.render=function(){this._effects?this.drawWithEffects():this.drawScene()},t.prototype.drawScene=function(){var e=this.gl;this.useProgram();var t=function(){e.viewport(0,0,e.viewportWidth,e.viewportHeight),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),this._scene.draw(this._matrixStack)}.bind(this);this._selector&&this._selector.render(t),t()},t.prototype.drawWithEffects=function(){this._effects.Size(),this._effects.bindFrameBuffer(),this.drawScene(),this._effects.unbindFrameBuffer(),this._effects.Bind(),this._effects.draw()},t.prototype.useProgram=function(){r.useProgram(this.oid)},t.prototype.createMainChildNode=function(e,t){return this._scene.createChildNode(e,t)},t.prototype.removeMainChildNode=function(e){this._scene.removeChildNode(e)},Object.defineProperty(t.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),t.prototype.setContext=function(e){r.setCanvasToContext(this.oid,e)},t.prototype.Program=function(e){e=e||"Phong",r.createProgram(this._oid,{fragment:f.Fragment[e]||f.Fragment.Phong,vertex:f.Vertex[e]||f.Vertex.Phong})},t.prototype.createMesh=function(e){var t=new l(this.oid);return e.mesh&&t.loadMeshByObject(e.mesh),e.material&&t.loadMaterialByObject(e.material),t},t.prototype.createDiffuse=function(e){return new p(this.oid,e)},t.prototype.createMeshByLoader=function(e){var t=new l(this.oid,e.mesh,e.material,e.texture);return this._loaderBuffer.push(t),t},t.prototype.createTransform=function(e,t,i){return new h(this.oid,e,t,i)},t.prototype.createLight=function(e){return new m(this.oid,e.ambient,e.diffuse,e.position,e.specular,e.direction,e.cutoff)},t.prototype.createCamera=function(e){return new g(this.oid,e)},t.prototype.createParticle=function(e){return new d(this.oid,e)},t.prototype.createAxis=function(e){return new b(this.oid,e)},t.prototype.createGrid=function(e,t){return new y(this.oid,e,t)},t.prototype.createSelect=function(e){return new E(this.oid,e)},t.prototype.createSelector=function(e){this._selector=new x(this.oid,e)},t.prototype.fillSelector=function(e){this._selector&&this._selector.fill(e)},t.prototype.clearSelector=function(e){this._selector&&this._selector.clear()},t.prototype.select=function(e){return this._selector?this._selector.find(e):void 0},t.prototype.createEffects=function(e,t){this._effects=new R(this.oid,e,t)},t.prototype.setNoiseEffect=function(e){this._effects&&this._effects.setNoiseTexture(e)},t.prototype.setEffect=function(e){this._effects&&this._effects.setEffect(e)},t.prototype.createLightArray=function(){return new v(this.oid)},Object.defineProperty(t.prototype,"MainCamera",{set:function(e){this._matrixStack.MainCamera=e},enumerable:!0,configurable:!0}),t.prototype.removeTexture=function(e){r.removeTexture(this.oid,e)},t.prototype.startLoader=function(e){async.eachSeries(this._loaderBuffer,function(e,t){e.loadMesh(function(){console.log(e),t()})},e)},t.prototype.configure=function(e){var i=this;e=e||{},i.Environment(e.background),i.Program(e.typeShader),r.setAttributeLocations(i._oid,t.ATTRIBUTES),r.setUniformLocations(i._oid,t.UNIFORMS),this._matrixStack.init()},t.prototype.configureWithLoader=function(e){var t=this;t.configure(),t.startLoader(e)},t.UNIFORMS=["uPMatrix","uMVMatrix","uNMatrix","uLightPosition","uLightDirection","uCutOff","uLightAmbient","uMaterialAmbient","uLightDiffuse","uMaterialDiffuse","uLightSpecular","uMaterialSpecular","uShininess","uPointSize","uSampler","uWireframe","uPerVertexColor","uSelectColor","uOffscreen","uInverseTextureSize","uNoiseSampler","uTime"],t.ATTRIBUTES=["a_position","a_normal","a_color","a_texture_coords"],t}(o);e.SceneGraph=T}(Blaze||(Blaze={}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJsYXplLmpzIl0sIm5hbWVzIjpbIl9fZXh0ZW5kcyIsInRoaXMiLCJkIiwiYiIsIl9fIiwiY29uc3RydWN0b3IiLCJwIiwiaGFzT3duUHJvcGVydHkiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJCbGF6ZSIsIldlYkdMVXRpbHMiLCJnZXRHTENvbnRleHQiLCJjYW52YXMiLCJjdHgiLCJuYW1lcyIsImkiLCJsZW5ndGgiLCJnZXRDb250ZXh0IiwiZSIsImFsZXJ0Iiwidmlld3BvcnRXaWR0aCIsIndpZHRoIiwidmlld3BvcnRIZWlnaHQiLCJoZWlnaHQiLCJjcmVhdGVCdWZmZXIiLCJnbCIsImRhdGEiLCJpczJEIiwidHlwZV9kcmF3IiwiYnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsIkJVRkZFUl9EUkFXIiwiU1RBVElDIiwiYnVmZmVyRGF0YSIsIkZsb2F0MzJBcnJheSIsIlNUQVRJQ19EUkFXIiwiRFlOQU1JQyIsIkRZTkFNSUNfRFJBVyIsIlNUUkVBTSIsIlNUUkVBTV9EUkFXIiwiaXRlbVNpemUiLCJudW1JdGVtcyIsImNyZWF0ZUluZGV4QnVmZmVyIiwiaW5kZXhCdWZmZXIiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsIlVpbnQxNkFycmF5IiwiY3JlYXRlVGV4dHVyZSIsInRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhJbWFnZTJEIiwiUkdCQSIsIlVOU0lHTkVEX0JZVEUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiTElORUFSIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiY3JlYXRlU2hhZGVyIiwidHlwZSIsInNoYWRlclNvdXJjZSIsInNoYWRlciIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImNvbnNvbGUiLCJsb2ciLCJnZXRTaGFkZXJJbmZvTG9nIiwiY3JlYXRlRnJhZ21lbnRTaGFkZXIiLCJGUkFHTUVOVF9TSEFERVIiLCJjcmVhdGVWZXJ0ZXhTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwiY3JlYXRlUHJvZ3JhbSIsInNoYWRlcnMiLCJmcmFnbWVudFNoYWRlciIsImZyYWdtZW50IiwidmVydGV4U2hhZGVyIiwidmVydGV4IiwicHJvZ3JhbSIsImF0dGFjaFNoYWRlciIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJ1dGlscyIsInM0IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidG9TdHJpbmciLCJzdWJzdHJpbmciLCJ1dWlkIiwibmFtZSIsImlkIiwibm9ybWFsaXplTmFOIiwidmVjIiwibWFwIiwiYSIsIk51bWJlciIsImlzTmFOIiwibG9hZCIsInVybCIsImNhbGxiYWNrIiwicmVxdWVzdCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZXNwb25zZVRleHQiLCJzZW5kIiwiZ2V0RXh0ZW5zaW9uIiwic3RyIiwiZWxlbXMiLCJzcGxpdCIsIm5vd0luTWlsbGlzZWNvbmRzIiwiRGF0ZSIsImdldFRpbWUiLCJkZWdUb1JhZCIsIlBJIiwiY2FsY3VsYXRlTm9ybWFscyIsInZzIiwiaW5kIiwieCIsInkiLCJ6IiwibnMiLCJ2MSIsInYyIiwibm9ybWFsIiwiaiIsIm5uIiwibGVuIiwic3FydCIsIkNBTUVSQV9UWVBFIiwiS2V0Y2giLCJzZXRDYW52YXNUb0NvbnRleHQiLCJrZXkiLCJjb250ZXh0Iiwic2V0Q29udGV4dCIsIl92aWV3cyIsInNldFByb2dyYW0iLCJnZXRQcm9ncmFtIiwidXNlUHJvZ3JhbSIsInZpZXciLCJwcmciLCJjcmVhdGVWaWV3Iiwic2V0QXR0cmlidXRlTG9jYXRpb25zIiwiYXR0cmlic19uYW1lcyIsImF0dHJpYnMiLCJyZWR1Y2UiLCJwcmV2IiwiYXR0ciIsImdldEF0dHJpYkxvY2F0aW9uIiwiZ2V0QXR0cmliIiwidmlld19rZXkiLCJhdHRyX2tleSIsImdldFVuaWZvcm0iLCJ1bmlmb3JtX2tleSIsInVuaWZvcm1zIiwic2V0VW5pZm9ybUxvY2F0aW9ucyIsInVuaWZvcm1fbmFtZXMiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJlbmFibGVBdHRyaWIiLCJwb2ludGVyIiwiaW5kZXgiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJzaXplIiwiRkxPQVQiLCJub3JtYWxpemVkIiwic3RyaWRlIiwib2Zmc2V0IiwiZGlzYWJsZUF0dHJpYiIsImRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInJlbmRlckxvb3AiLCJjYiIsInNldEludGVydmFsIiwiYWRkVGV4dHVyZSIsInRleHR1cmVfaWQiLCJ0ZXh0dXJlcyIsInB1c2giLCJyZW1vdmVUZXh0dXJlIiwiaW5kZXhPZiIsInNwbGljZSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsInVTYW1wbGVyIiwidW5pZm9ybTFpIiwiaXNPZmZTY3JlZW4iLCJvZmZzY3JlZW4iLCJlbmFibGVPZmZTY3JlZW4iLCJkaXNhYmxlT2ZmU2NyZWVuIiwiZmlsbFNlbGVjdG9yQnVmZmVyIiwib2JqIiwic2VsZWN0T2JqZWN0cyIsImNsZWFyU2VsZWN0b3JCdWZmZXIiLCJnZXRTZWxlY3RCeUNvbG9yIiwiY29sb3IiLCJfIiwiZmluZCIsIm8iLCJpc0VxdWFsIiwiUmVuZGVyYWJsZSIsImdyYXBoX2lkIiwiX2dyYXBoX2lkIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiZ3JhcGhJRCIsIkVudGl0eSIsIl9zdXBlciIsImNhbGwiLCJiZWdpbkRyYXciLCJtYXRyaXhTdGFjayIsImVuZERyYXciLCJNYXRyaXhTdGFjayIsIl9zdGFjayIsIl9tdk1hdHJpeCIsIm1hdDQiLCJfcE1hdHJpeCIsIl9uTWF0cml4IiwiY29weSIsInNldCIsInBvcCIsIk1vZGVsVmlldyIsIl9jYW1lcmEiLCJtb2RlbFZpZXciLCJpZGVudGl0eSIsImNhbWVyYSIsIlBlcnNwZWN0aXZlIiwicGVyc3BlY3RpdmUiLCJOb3JtYWwiLCJpbnZlcnNlIiwidHJhbnNwb3NlIiwiaW5pdCIsInNldFVwIiwibXZNYXRyaXgiLCJ1bmlmb3JtTWF0cml4NGZ2IiwicE1hdHJpeCIsIm5NYXRyaXgiLCJSZXNvdXJjZXMiLCJNZXNoQnVmZmVycyIsIl9vbmxvYWQiLCJzcmMiLCJfdGhpcyIsInNlbGYiLCJleHQiLCJwYXJzZU9CSiIsInBhcnNlSlNPTiIsImNyZWF0ZUJ1ZmZlcnMiLCJKU09OIiwicGFyc2UiLCJ2Iiwidm4iLCJ2dCIsIml2IiwiaW4iLCJpdCIsImxpbmVzIiwiZmlsdGVyIiwiZm9yRWFjaCIsIml0ZW0iLCJyZXBsYWNlIiwiY29uY2F0Iiwic2xpY2UiLCJ0ZW1wSW5kZXgiLCJwYXJzZUludCIsImRlZmF1bHRzIiwiX3ZibyIsIl9uYm8iLCJfdGJvIiwiX2l2Ym8iLCJfaW5ibyIsIl9pdGJvIiwiTWVzaFRleHR1cmUiLCJfaW1hZ2UiLCJJbWFnZSIsIl9vaWQiLCJmaWxlbmFtZSIsIm9ubG9hZCIsImxvYWRUZXh0dXJlSW1hZ2UiLCJfdGV4dHVyZSIsIk1lc2hNYXRlcmlhbCIsImFtYmllbnQiLCJkaWZmdXNlIiwic3BlY3VsYXIiLCJzaGluaW5lc3MiLCJfYW1iaWVudCIsInZlYzQiLCJfZGlmZnVzZSIsIl9zcGVjdWxhciIsIl9zaGluaW5lc3MiLCJ0ZW1wIiwiS2EiLCJLZCIsIktzIiwiTnMiLCJrZXlzIiwibGluZSIsIlNoYWRlcnMiLCJGcmFnbWVudCIsIkFsbF9lZmZlY3QiLCJCbHVyX2VmZmVjdCIsIkZpbG1fZWZmZWN0IiwiR3JleV9lZmZlY3QiLCJJbnZlcnRfZWZmZWN0IiwiTm9fZWZmZWN0IiwiUGFydGljbGUiLCJQaG9uZyIsIlBob25nX2xpZ2h0cyIsIlBob25nX3Bvc2l0aW9uYWwiLCJUb29uIiwiV2F2eV9lZmZlY3QiLCJWZXJ0ZXgiLCJFZmZlY3QiLCJBbmltYXRpb25FbnRpdHkiLCJmcmVxdWVuY3kiLCJ0aW1lcyIsIl9mcmVxdWVuY3kiLCJfaW50ZXJ2YWxfaWQiLCJfY2FsbGJhY2siLCJvbkZyYW1lIiwiRWxhcHNlVGltZSIsInN0ZXBzIiwiQ291bnQiLCJfdGltZXMiLCJzdG9wIiwic3RhcnQiLCJfaW50aW1lIiwiY2xlYXJJbnRlcnZhbCIsIk1lc2hFbnRpdHkiLCJtZXNoZmlsZSIsIm1hdGVyaWFsZmlsZSIsInRleHR1cmVmaWxlIiwiX21hdGVyaWFsIiwiX2J1ZmZlcnMiLCJfbWVzaGZpbGUiLCJfbWF0ZXJpYWxmaWxlIiwiX3RleHR1cmVmaWxlIiwibG9hZEJ1ZmZlcnMiLCJsb2FkVGV4dHVyZSIsImxvYWRNYXRlcmlhbCIsImxvYWRNZXNoIiwiYXN5bmMiLCJ3YXRlcmZhbGwiLCJuZXh0IiwiZXJyIiwibG9hZE1lc2hCeU9iamVjdCIsImxvYWRNYXRlcmlhbEJ5T2JqZWN0Iiwic2V0TWF0ZXJpYWxVbmlmb3JtcyIsInVNYXRlcmlhbEFtYmllbnQiLCJ1bmlmb3JtNGZ2IiwidU1hdGVyaWFsRGlmZnVzZSIsInVNYXRlcmlhbFNwZWN1bGFyIiwidVNoaW5pbmVzcyIsInVuaWZvcm0xZiIsInZibyIsIm5ibyIsIml2Ym8iLCJkcmF3RWxlbWVudHMiLCJUUklBTkdMRVMiLCJVTlNJR05FRF9TSE9SVCIsIlRyYW5zZm9ybUVudGl0eSIsInBvc2l0aW9uIiwicm90YXRpb24iLCJfbWF0cml4IiwiX3Bvc2l0aW9uIiwidmVjMyIsIl9zaXplIiwiX3JvdGF0aW9uIiwiYW5nbGUiLCJheGlzIiwic2V0TWF0cml4IiwibmV3X21hdHJpeCIsInNldEFic29sdXRlUG9zaXRpb24iLCJ0cmFuc2xhdGUiLCJvcGVyYW5kMSIsIm9wZXJhbmQyIiwiYWRkIiwic2V0U2l6ZSIsInNjYWxlIiwic2V0Um90YXRpb24iLCJzZXRBbmdsZSIsInNldEF4aXMiLCJyb3RhdGVBbmdsZSIsIm1vdmVBeGlzIiwicmFkIiwicm90YXRlIiwiTGlnaHRFbnRpdHkiLCJkaXJlY3Rpb24iLCJjdXRvZmYiLCJfZGlyZWN0aW9uIiwiX2N1dG9mZiIsInVMaWdodEFtYmllbnQiLCJ1TGlnaHREaWZmdXNlIiwidUxpZ2h0U3BlY3VsYXIiLCJ1TGlnaHRQb3NpdGlvbiIsInVuaWZvcm0zZnYiLCJ1RGlyZWN0aW9uIiwidUN1dE9mZiIsIkRpZmZ1c2VFbnRpdHkiLCJfdmFsdWUiLCJQYXJ0aWNsZUVudGl0eSIsInBvaW50U2l6ZSIsIl9wb2ludFNpemUiLCJfYnVmZmVyIiwiX3RleHR1cmVfaWQiLCJjb25maWd1cmUiLCJkYXRhX21lc2giLCJkYXRhX3RleHR1cmUiLCJfbnVtSXRlbXMiLCJ1cGRhdGUiLCJ1UG9pbnRTaXplIiwiZHJhd0FycmF5cyIsIlBPSU5UUyIsIkxpZ2h0QXJyYXlFbnRpdHkiLCJfbGlnaHRzIiwiYWRkTGlnaHQiLCJsaWdodCIsImdldEFycmF5c09iamVjdCIsIkFycmF5IiwibGlnaHRzIiwiQ2FtZXJhRW50aXR5IiwiX3R5cGUiLCJPUkJJVElORyIsIl9jbWF0cml4IiwiX3VwIiwiX3JpZ2h0IiwiX25vcm1hbCIsIl9hemltdXRoIiwiX2VsZXZhdGlvbiIsIl9zdGVwcyIsInBvcyIsImF6IiwidGVtcF9heiIsImNoYW5nZUF6aW11dGgiLCJlbCIsInRlbXBfZWwiLCJjaGFuZ2VFbGV2YXRpb24iLCJuIiwic3RlcCIsIm5vcm1hbGl6ZSIsIm5ld19wb3NpdGlvbiIsIlRSQUNLSU5HIiwiY2FsY3VsYXRlT3JpZW50YXRpb24iLCJtIiwibXVsdGlwbHlWZWM0Iiwicm90YXRlWSIsInJvdGF0ZVgiLCJBeGlzRW50aXR5IiwiX3ZlcnRpY2VzIiwiX2luZGljZXMiLCJfY29sb3JzIiwiX2libyIsIl9jYm8iLCJ1V2lyZWZyYW1lIiwidVBlclZlcnRleENvbG9yIiwiTElORVMiLCJHcmlkRW50aXR5IiwiX2RpbWVzaW9ucyIsImRpbSIsImJ1aWxkIiwiaW5jIiwibCIsIlNlbGVjdEVudGl0eSIsIl9jb2xvciIsImdlbmVyYXRlVW5pcXVlQ29sb3IiLCJfZGF0YSIsImNvbnRhaW5zIiwiYmluZCIsImZvdW5kIiwidG9GaXhlZCIsInVTZWxlY3RDb2xvciIsIlNlbGVjdG9yIiwiZGltZW5zaW9ucyIsIl9kaW1lbnNpb25zIiwiX2ZyYW1lYnVmZmVyIiwiX3JlbmRlcmJ1ZmZlciIsImNyZWF0ZVJlbmRlcmJ1ZmZlciIsImJpbmRSZW5kZXJidWZmZXIiLCJSRU5ERVJCVUZGRVIiLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiREVQVEhfQ09NUE9ORU5UMTYiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImJpbmRGcmFtZWJ1ZmZlciIsIkZSQU1FQlVGRkVSIiwiZnJhbWVidWZmZXJUZXh0dXJlMkQiLCJDT0xPUl9BVFRBQ0hNRU5UMCIsImZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyIiwiREVQVEhfQVRUQUNITUVOVCIsImZpbGwiLCJjbGVhciIsInJlYWRvdXQiLCJVaW50OEFycmF5IiwicmVhZFBpeGVscyIsImZpeGVkIiwicGFyc2VGbG9hdCIsInJlbmRlciIsImRyYXciLCJ1T2Zmc2NyZWVuIiwiRWZmZWN0cyIsIl9zaGFkZXIiLCJfdW5pZm9ybXMiLCJfYXR0cmlicyIsIl9ub2lzZXRleHR1cmUiLCJfc3RhcnQiLCJub3ciLCJfY2FudmFzIiwiR2VvbWV0cnkiLCJzZXRFZmZlY3QiLCJORUFSRVNUIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJ2ZXJ0aWNlcyIsInRleHR1cmVDb29yZHMiLCJzb3VyY2UiLCJkZWxldGVQcm9ncmFtIiwiY291bnQiLCJBQ1RJVkVfQVRUUklCVVRFUyIsImF0dHJpYiIsImdldEFjdGl2ZUF0dHJpYiIsIkFDVElWRV9VTklGT1JNUyIsInVuaWZvcm0iLCJnZXRBY3RpdmVVbmlmb3JtIiwiU2l6ZSIsInNldE5vaXNlVGV4dHVyZSIsIkJpbmQiLCJhX3Bvc2l0aW9uIiwiYV90ZXh0dXJlX2Nvb3JkcyIsInVUaW1lIiwidUludmVyc2VUZXh0dXJlU2l6ZSIsInVuaWZvcm0yZiIsInVOb2lzZVNhbXBsZXIiLCJURVhUVVJFMSIsImJpbmRGcmFtZUJ1ZmZlciIsInVuYmluZEZyYW1lQnVmZmVyIiwiTm9kZUVsZW1lbnQiLCJwYXJlbnQiLCJlbnRpdHkiLCJfcGFyZW50Tm9kZSIsImFkZENoaWxkTm9kZSIsIl9jaGlsZE5vZGVzIiwiX2VudGl0eSIsImNoaWxkIiwicmVtb3ZlQ2hpbGROb2RlIiwiZ2V0Q2hpbGROb2RlQnlJbmRleCIsImV4aXN0c0NoaWxkTm9kZSIsImNyZWF0ZUNoaWxkTm9kZSIsImlzUm9vdCIsIm9pZCIsImZpbmRJbmRleCIsInMiLCJpbmRleEluUGFyZW50IiwiaGFzU2libGluZyIsIl9oYXZlIiwibmV4dFNpYmxpbmciLCJzaWJsaW5nIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsInJlbW92ZUNoaWxkTm9kZXMiLCJTY2VuZUdyYXBoIiwiX3NjZW5lIiwiX21hdHJpeFN0YWNrIiwiX2xvYWRlckJ1ZmZlciIsIl9zZWxlY3RvciIsIl9lZmZlY3RzIiwiRW52aXJvbm1lbnQiLCJlbmFibGUiLCJERVBUSF9URVNUIiwiZGVwdGhGdW5jIiwiTEVRVUFMIiwiQkxFTkQiLCJibGVuZEZ1bmMiLCJTUkNfQUxQSEEiLCJPTkVfTUlOVVNfU1JDX0FMUEhBIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfRkxJUF9ZX1dFQkdMIiwiY2xlYXJDb2xvciIsImNsZWFyRGVwdGgiLCJkcmF3V2l0aEVmZmVjdHMiLCJkcmF3U2NlbmUiLCJ2aWV3cG9ydCIsIkNPTE9SX0JVRkZFUl9CSVQiLCJERVBUSF9CVUZGRVJfQklUIiwiY3JlYXRlTWFpbkNoaWxkTm9kZSIsInJlbW92ZU1haW5DaGlsZE5vZGUiLCJub2RlIiwiUHJvZ3JhbSIsImNyZWF0ZU1lc2giLCJjb25maWciLCJtZXNoRW50aXR5IiwibWVzaCIsIm1hdGVyaWFsIiwiY3JlYXRlRGlmZnVzZSIsImNyZWF0ZU1lc2hCeUxvYWRlciIsImNyZWF0ZVRyYW5zZm9ybSIsImNyZWF0ZUxpZ2h0IiwiY3JlYXRlQ2FtZXJhIiwiY3JlYXRlUGFydGljbGUiLCJjcmVhdGVBeGlzIiwiY3JlYXRlR3JpZCIsImNyZWF0ZVNlbGVjdCIsImNyZWF0ZVNlbGVjdG9yIiwiZmlsbFNlbGVjdG9yIiwiY2xlYXJTZWxlY3RvciIsInNlbGVjdCIsImNyZWF0ZUVmZmVjdHMiLCJzZXROb2lzZUVmZmVjdCIsImNyZWF0ZUxpZ2h0QXJyYXkiLCJNYWluQ2FtZXJhIiwic3RhcnRMb2FkZXIiLCJlYWNoU2VyaWVzIiwiYmFja2dyb3VuZCIsInR5cGVTaGFkZXIiLCJBVFRSSUJVVEVTIiwiVU5JRk9STVMiLCJjb25maWd1cmVXaXRoTG9hZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFJQSxXQUFhQyxNQUFRQSxLQUFLRCxXQUFjLFNBQVVFLEVBQUdDLEdBRXJELFFBQVNDLEtBQU9ILEtBQUtJLFlBQWNILEVBRG5DLElBQUssR0FBSUksS0FBS0gsR0FBT0EsRUFBRUksZUFBZUQsS0FBSUosRUFBRUksR0FBS0gsRUFBRUcsR0FFbkRKLEdBQUVNLFVBQWtCLE9BQU5MLEVBQWFNLE9BQU9DLE9BQU9QLElBQU1DLEVBQUdJLFVBQVlMLEVBQUVLLFVBQVcsR0FBSUosS0FFL0VPLE9BQ0osU0FBV0EsR0FDUCxHQUFJQyxJQUNKLFNBQVdBLEdBQ1AsUUFBU0MsR0FBYUMsR0FHbEIsSUFBSyxHQUZEQyxHQUFNLEtBQ05DLEdBQVMsUUFBUyxxQkFBc0IsWUFBYSxhQUNoREMsRUFBSSxFQUFHQSxFQUFJRCxFQUFNRSxTQUFVRCxFQUFHLENBQ25DLElBQ0lGLEVBQU1ELEVBQU9LLFdBQVdILEVBQU1DLElBRWxDLE1BQU9HLElBQ1AsR0FBSUwsRUFDQSxNQUdSLE1BQVksUUFBUkEsR0FDQU0sTUFBTSw4QkFDQyxPQUdQTixFQUFJTyxjQUFnQlIsRUFBT1MsTUFDM0JSLEVBQUlTLGVBQWlCVixFQUFPVyxPQUNyQlYsR0FVZixRQUFTVyxHQUFhQyxFQUFJQyxFQUFNQyxFQUFNQyxHQUNsQyxHQUFJQyxHQUFTSixFQUFHRCxjQUVoQixRQURBQyxFQUFHSyxXQUFXTCxFQUFHTSxhQUFjRixHQUN2QkQsR0FDSixJQUFLbEIsR0FBV3NCLFlBQVlDLE9BQ3hCUixFQUFHUyxXQUFX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c0JvRyxFQUFLZ0MsS0FBTTZSLEVBQVdzRCxZQUNsRG5lLEVBQU15QixvQkFBb0J1RixFQUFLZ0MsS0FBTTZSLEVBQVd1RCxVQUNoRDFtQixLQUFLcWpCLGFBQWExVSxRQUV0QndVLEVBQVc1aUIsVUFBVW9tQixvQkFBc0IsU0FBVTViLEdBQ2pELEdBQUl1RSxHQUFPdFAsSUFDWHNQLEdBQUtrSyxZQUNMbEssRUFBSytXLFlBQVl0YixJQUVyQm9ZLEVBQVd1RCxVQUNQLFdBQ0EsWUFDQSxXQUNBLGlCQUNBLGtCQUNBLFVBQ0EsZ0JBQ0EsbUJBQ0EsZ0JBQ0EsbUJBQ0EsaUJBQ0Esb0JBQ0EsYUFDQSxhQUNBLFdBQ0EsYUFDQSxrQkFDQSxlQUNBLGFBQ0Esc0JBQ0EsZ0JBQ0EsU0FFSnZELEVBQVdzRCxZQUFjLGFBQWMsV0FBWSxVQUFXLG9CQUN2RHRELEdBQ1R6VyxFQUNGaE0sR0FBTXlpQixXQUFhQSxHQUNwQnppQixRQUFVQSIsImZpbGUiOiJibGF6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcclxuICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn07XHJcbnZhciBCbGF6ZTtcclxuKGZ1bmN0aW9uIChCbGF6ZSkge1xyXG4gICAgdmFyIFdlYkdMVXRpbHM7XHJcbiAgICAoZnVuY3Rpb24gKFdlYkdMVXRpbHMpIHtcclxuICAgICAgICBmdW5jdGlvbiBnZXRHTENvbnRleHQoY2FudmFzKSB7XHJcbiAgICAgICAgICAgIHZhciBjdHggPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgbmFtZXMgPSBbXCJ3ZWJnbFwiLCBcImV4cGVyaW1lbnRhbC13ZWJnbFwiLCBcIndlYmtpdC0zZFwiLCBcIm1vei13ZWJnbFwiXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChuYW1lc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY3R4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGN0eCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgYWxlcnQoXCJDb3VsZCBub3QgaW5pdGlhbGlzZSBXZWJHTFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3R4LnZpZXdwb3J0V2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBjdHgudmlld3BvcnRIZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGN0eDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBXZWJHTFV0aWxzLmdldEdMQ29udGV4dCA9IGdldEdMQ29udGV4dDtcclxuICAgICAgICAoZnVuY3Rpb24gKEJVRkZFUl9EUkFXKSB7XHJcbiAgICAgICAgICAgIEJVRkZFUl9EUkFXW0JVRkZFUl9EUkFXW1wiU1RBVElDXCJdID0gMF0gPSBcIlNUQVRJQ1wiO1xyXG4gICAgICAgICAgICBCVUZGRVJfRFJBV1tCVUZGRVJfRFJBV1tcIlNUUkVBTVwiXSA9IDFdID0gXCJTVFJFQU1cIjtcclxuICAgICAgICAgICAgQlVGRkVSX0RSQVdbQlVGRkVSX0RSQVdbXCJEWU5BTUlDXCJdID0gMl0gPSBcIkRZTkFNSUNcIjtcclxuICAgICAgICB9KShXZWJHTFV0aWxzLkJVRkZFUl9EUkFXIHx8IChXZWJHTFV0aWxzLkJVRkZFUl9EUkFXID0ge30pKTtcclxuICAgICAgICB2YXIgQlVGRkVSX0RSQVcgPSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlcihnbCwgZGF0YSwgaXMyRCwgdHlwZV9kcmF3KSB7XHJcbiAgICAgICAgICAgIHZhciBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIGJ1ZmZlcik7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZV9kcmF3KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFdlYkdMVXRpbHMuQlVGRkVSX0RSQVcuU1RBVElDOlxyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KGRhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFdlYkdMVXRpbHMuQlVGRkVSX0RSQVcuRFlOQU1JQzpcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShkYXRhKSwgZ2wuRFlOQU1JQ19EUkFXKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgV2ViR0xVdGlscy5CVUZGRVJfRFJBVy5TVFJFQU06XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoZGF0YSksIGdsLlNUUkVBTV9EUkFXKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KGRhdGEpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBpZiAoaXMyRCkge1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyLml0ZW1TaXplID0gMjtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5udW1JdGVtcyA9IGRhdGEubGVuZ3RoIC8gMjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5pdGVtU2l6ZSA9IDM7XHJcbiAgICAgICAgICAgICAgICBidWZmZXIubnVtSXRlbXMgPSBkYXRhLmxlbmd0aCAvIDM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViR0xVdGlscy5jcmVhdGVCdWZmZXIgPSBjcmVhdGVCdWZmZXI7XHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlSW5kZXhCdWZmZXIoZ2wsIGRhdGEsIHR5cGVfZHJhdykge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXhCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBpbmRleEJ1ZmZlcik7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZV9kcmF3KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFdlYkdMVXRpbHMuQlVGRkVSX0RSQVcuU1RBVElDOlxyXG4gICAgICAgICAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheShkYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXLkRZTkFNSUM6XHJcbiAgICAgICAgICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KGRhdGEpLCBnbC5EWU5BTUlDX0RSQVcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBXZWJHTFV0aWxzLkJVRkZFUl9EUkFXLlNUUkVBTTpcclxuICAgICAgICAgICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkoZGF0YSksIGdsLlNUUkVBTV9EUkFXKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGdsLmJ1ZmZlckRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG5ldyBVaW50MTZBcnJheShkYXRhKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBpbmRleEJ1ZmZlci5pdGVtU2l6ZSA9IDE7XHJcbiAgICAgICAgICAgIGluZGV4QnVmZmVyLm51bUl0ZW1zID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHJldHVybiBpbmRleEJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViR0xVdGlscy5jcmVhdGVJbmRleEJ1ZmZlciA9IGNyZWF0ZUluZGV4QnVmZmVyO1xyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoZ2wsIGRhdGEpIHtcclxuICAgICAgICAgICAgdmFyIHRleHR1cmUgPSBnbC5jcmVhdGVUZXh0dXJlKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRleHR1cmUpO1xyXG4gICAgICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIGRhdGEpO1xyXG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUFHX0ZJTFRFUiwgZ2wuTElORUFSKTtcclxuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLkxJTkVBUik7XHJcbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIG51bGwpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dHVyZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViR0xVdGlscy5jcmVhdGVUZXh0dXJlID0gY3JlYXRlVGV4dHVyZTtcclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVTaGFkZXIoZ2wsIHR5cGUsIHNoYWRlclNvdXJjZSkge1xyXG4gICAgICAgICAgICB2YXIgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xyXG4gICAgICAgICAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBzaGFkZXJTb3VyY2UpO1xyXG4gICAgICAgICAgICBnbC5jb21waWxlU2hhZGVyKHNoYWRlcik7XHJcbiAgICAgICAgICAgIGlmICghZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhnbC5nZXRTaGFkZXJJbmZvTG9nKHNoYWRlcikpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNoYWRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViR0xVdGlscy5jcmVhdGVTaGFkZXIgPSBjcmVhdGVTaGFkZXI7XHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRTaGFkZXIoZ2wsIHNoYWRlclNvdXJjZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlU2hhZGVyKGdsLCBnbC5GUkFHTUVOVF9TSEFERVIsIHNoYWRlclNvdXJjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdlYkdMVXRpbHMuY3JlYXRlRnJhZ21lbnRTaGFkZXIgPSBjcmVhdGVGcmFnbWVudFNoYWRlcjtcclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVWZXJ0ZXhTaGFkZXIoZ2wsIHNoYWRlclNvdXJjZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlU2hhZGVyKGdsLCBnbC5WRVJURVhfU0hBREVSLCBzaGFkZXJTb3VyY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBXZWJHTFV0aWxzLmNyZWF0ZVZlcnRleFNoYWRlciA9IGNyZWF0ZVZlcnRleFNoYWRlcjtcclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVQcm9ncmFtKGdsLCBzaGFkZXJzKSB7XHJcbiAgICAgICAgICAgIHZhciBmcmFnbWVudFNoYWRlciA9IGNyZWF0ZUZyYWdtZW50U2hhZGVyKGdsLCBzaGFkZXJzLmZyYWdtZW50KTtcclxuICAgICAgICAgICAgdmFyIHZlcnRleFNoYWRlciA9IGNyZWF0ZVZlcnRleFNoYWRlcihnbCwgc2hhZGVycy52ZXJ0ZXgpO1xyXG4gICAgICAgICAgICB2YXIgcHJvZ3JhbSA9IGdsLmNyZWF0ZVByb2dyYW0oKTtcclxuICAgICAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHZlcnRleFNoYWRlcik7XHJcbiAgICAgICAgICAgIGdsLmF0dGFjaFNoYWRlcihwcm9ncmFtLCBmcmFnbWVudFNoYWRlcik7XHJcbiAgICAgICAgICAgIGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG4gICAgICAgICAgICBpZiAoIWdsLmdldFByb2dyYW1QYXJhbWV0ZXIocHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvZ3JhbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgV2ViR0xVdGlscy5jcmVhdGVQcm9ncmFtID0gY3JlYXRlUHJvZ3JhbTtcclxuICAgIH0pKFdlYkdMVXRpbHMgPSBCbGF6ZS5XZWJHTFV0aWxzIHx8IChCbGF6ZS5XZWJHTFV0aWxzID0ge30pKTtcclxuICAgIHZhciB1dGlscztcclxuICAgIChmdW5jdGlvbiAodXRpbHMpIHtcclxuICAgICAgICBmdW5jdGlvbiBzNCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXHJcbiAgICAgICAgICAgICAgICAudG9TdHJpbmcoMTYpXHJcbiAgICAgICAgICAgICAgICAuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5zNCA9IHM0O1xyXG4gICAgICAgIGZ1bmN0aW9uIHV1aWQobmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgaWQgPSBzNCgpICsgczQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5hbWUgPyBuYW1lICsgaWQgOiBpZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXRpbHMudXVpZCA9IHV1aWQ7XHJcbiAgICAgICAgZnVuY3Rpb24gbm9ybWFsaXplTmFOKHZlYykge1xyXG4gICAgICAgICAgICByZXR1cm4gdmVjLm1hcChmdW5jdGlvbiAoYSkgeyBpZiAoTnVtYmVyLmlzTmFOKGEpKVxyXG4gICAgICAgICAgICAgICAgYSA9IDA7IHJldHVybiBhOyB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXRpbHMubm9ybWFsaXplTmFOID0gbm9ybWFsaXplTmFOO1xyXG4gICAgICAgIGZ1bmN0aW9uIGxvYWQodXJsLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJlcXVlc3Quc2VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5sb2FkID0gbG9hZDtcclxuICAgICAgICBmdW5jdGlvbiBnZXRFeHRlbnNpb24oc3RyKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtcyA9IHN0ci5zcGxpdChcIi5cIik7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtc1tlbGVtcy5sZW5ndGggLSAxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXRpbHMuZ2V0RXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uO1xyXG4gICAgICAgIGZ1bmN0aW9uIG5vd0luTWlsbGlzZWNvbmRzKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXRpbHMubm93SW5NaWxsaXNlY29uZHMgPSBub3dJbk1pbGxpc2Vjb25kcztcclxuICAgICAgICBmdW5jdGlvbiBkZWdUb1JhZChkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBkICogTWF0aC5QSSAvIDE4MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdXRpbHMuZGVnVG9SYWQgPSBkZWdUb1JhZDtcclxuICAgICAgICBmdW5jdGlvbiBjYWxjdWxhdGVOb3JtYWxzKHZzLCBpbmQpIHtcclxuICAgICAgICAgICAgdmFyIHggPSAwO1xyXG4gICAgICAgICAgICB2YXIgeSA9IDE7XHJcbiAgICAgICAgICAgIHZhciB6ID0gMjtcclxuICAgICAgICAgICAgdmFyIG5zID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG5zW2ldID0gMC4wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kLmxlbmd0aDsgaSA9IGkgKyAzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdjEgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciB2MiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy9wMSAtIHAwXHJcbiAgICAgICAgICAgICAgICB2MVt4XSA9IHZzWzMgKiBpbmRbaSArIDFdICsgeF0gLSB2c1szICogaW5kW2ldICsgeF07XHJcbiAgICAgICAgICAgICAgICB2MVt5XSA9IHZzWzMgKiBpbmRbaSArIDFdICsgeV0gLSB2c1szICogaW5kW2ldICsgeV07XHJcbiAgICAgICAgICAgICAgICB2MVt6XSA9IHZzWzMgKiBpbmRbaSArIDFdICsgel0gLSB2c1szICogaW5kW2ldICsgel07XHJcbiAgICAgICAgICAgICAgICAvLyBwMCAtIHAxXHJcbiAgICAgICAgICAgICAgICB2Mlt4XSA9IHZzWzMgKiBpbmRbaSArIDJdICsgeF0gLSB2c1szICogaW5kW2kgKyAxXSArIHhdO1xyXG4gICAgICAgICAgICAgICAgdjJbeV0gPSB2c1szICogaW5kW2kgKyAyXSArIHldIC0gdnNbMyAqIGluZFtpICsgMV0gKyB5XTtcclxuICAgICAgICAgICAgICAgIHYyW3pdID0gdnNbMyAqIGluZFtpICsgMl0gKyB6XSAtIHZzWzMgKiBpbmRbaSArIDFdICsgel07XHJcbiAgICAgICAgICAgICAgICAvL3AyIC0gcDFcclxuICAgICAgICAgICAgICAgIC8vIHYxW3hdID0gdnNbMyppbmRbaSsyXSt4XSAtIHZzWzMqaW5kW2krMV0reF07XHJcbiAgICAgICAgICAgICAgICAvLyB2MVt5XSA9IHZzWzMqaW5kW2krMl0reV0gLSB2c1szKmluZFtpKzFdK3ldO1xyXG4gICAgICAgICAgICAgICAgLy8gdjFbel0gPSB2c1szKmluZFtpKzJdK3pdIC0gdnNbMyppbmRbaSsxXSt6XTtcclxuICAgICAgICAgICAgICAgIC8vIHAwIC0gcDFcclxuICAgICAgICAgICAgICAgIC8vIHYyW3hdID0gdnNbMyppbmRbaV0reF0gLSB2c1szKmluZFtpKzFdK3hdO1xyXG4gICAgICAgICAgICAgICAgLy8gdjJbeV0gPSB2c1szKmluZFtpXSt5XSAtIHZzWzMqaW5kW2krMV0reV07XHJcbiAgICAgICAgICAgICAgICAvLyB2Mlt6XSA9IHZzWzMqaW5kW2ldK3pdIC0gdnNbMyppbmRbaSsxXSt6XTtcclxuICAgICAgICAgICAgICAgIC8vY3Jvc3MgcHJvZHVjdCBieSBTYXJydXMgUnVsZVxyXG4gICAgICAgICAgICAgICAgbm9ybWFsW3hdID0gdjFbeV0gKiB2Mlt6XSAtIHYxW3pdICogdjJbeV07XHJcbiAgICAgICAgICAgICAgICBub3JtYWxbeV0gPSB2MVt6XSAqIHYyW3hdIC0gdjFbeF0gKiB2Mlt6XTtcclxuICAgICAgICAgICAgICAgIG5vcm1hbFt6XSA9IHYxW3hdICogdjJbeV0gLSB2MVt5XSAqIHYyW3hdO1xyXG4gICAgICAgICAgICAgICAgLy8gbnNbMyppbmRbaV0reF0gKz0gbm9ybWFsW3hdO1xyXG4gICAgICAgICAgICAgICAgLy8gbnNbMyppbmRbaV0reV0gKz0gbm9ybWFsW3ldO1xyXG4gICAgICAgICAgICAgICAgLy8gbnNbMyppbmRbaV0rel0gKz0gbm9ybWFsW3pdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCAzOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBuc1szICogaW5kW2kgKyBqXSArIHhdID0gbnNbMyAqIGluZFtpICsgal0gKyB4XSArIG5vcm1hbFt4XTtcclxuICAgICAgICAgICAgICAgICAgICBuc1szICogaW5kW2kgKyBqXSArIHldID0gbnNbMyAqIGluZFtpICsgal0gKyB5XSArIG5vcm1hbFt5XTtcclxuICAgICAgICAgICAgICAgICAgICBuc1szICogaW5kW2kgKyBqXSArIHpdID0gbnNbMyAqIGluZFtpICsgal0gKyB6XSArIG5vcm1hbFt6XTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL25vcm1hbGl6ZSB0aGUgcmVzdWx0XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdnMubGVuZ3RoOyBpID0gaSArIDMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBubiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbm5beF0gPSBuc1tpICsgeF07XHJcbiAgICAgICAgICAgICAgICBublt5XSA9IG5zW2kgKyB5XTtcclxuICAgICAgICAgICAgICAgIG5uW3pdID0gbnNbaSArIHpdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IE1hdGguc3FydCgobm5beF0gKiBublt4XSkgKyAobm5beV0gKiBublt5XSkgKyAobm5bel0gKiBublt6XSkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxlbiA9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIGxlbiA9IDAuMDAwMDE7XHJcbiAgICAgICAgICAgICAgICBublt4XSA9IG5uW3hdIC8gbGVuO1xyXG4gICAgICAgICAgICAgICAgbm5beV0gPSBublt5XSAvIGxlbjtcclxuICAgICAgICAgICAgICAgIG5uW3pdID0gbm5bel0gLyBsZW47XHJcbiAgICAgICAgICAgICAgICBuc1tpICsgeF0gPSBublt4XTtcclxuICAgICAgICAgICAgICAgIG5zW2kgKyB5XSA9IG5uW3ldO1xyXG4gICAgICAgICAgICAgICAgbnNbaSArIHpdID0gbm5bel07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5zO1xyXG4gICAgICAgIH1cclxuICAgICAgICB1dGlscy5jYWxjdWxhdGVOb3JtYWxzID0gY2FsY3VsYXRlTm9ybWFscztcclxuICAgIH0pKHV0aWxzID0gQmxhemUudXRpbHMgfHwgKEJsYXplLnV0aWxzID0ge30pKTtcclxuICAgIChmdW5jdGlvbiAoQ0FNRVJBX1RZUEUpIHtcclxuICAgICAgICBDQU1FUkFfVFlQRVtDQU1FUkFfVFlQRVtcIk9SQklUSU5HXCJdID0gMF0gPSBcIk9SQklUSU5HXCI7XHJcbiAgICAgICAgQ0FNRVJBX1RZUEVbQ0FNRVJBX1RZUEVbXCJUUkFDS0lOR1wiXSA9IDFdID0gXCJUUkFDS0lOR1wiO1xyXG4gICAgfSkoQmxhemUuQ0FNRVJBX1RZUEUgfHwgKEJsYXplLkNBTUVSQV9UWVBFID0ge30pKTtcclxuICAgIHZhciBDQU1FUkFfVFlQRSA9IEJsYXplLkNBTUVSQV9UWVBFO1xyXG4gICAgdmFyIEtldGNoID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBLZXRjaCgpIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgS2V0Y2guc2V0Q2FudmFzVG9Db250ZXh0ID0gZnVuY3Rpb24gKGtleSwgY2FudmFzKSB7XHJcbiAgICAgICAgICAgIHZhciBjb250ZXh0ID0gV2ViR0xVdGlscy5nZXRHTENvbnRleHQoY2FudmFzKTtcclxuICAgICAgICAgICAgS2V0Y2guc2V0Q29udGV4dChrZXksIGNvbnRleHQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guc2V0Q29udGV4dCA9IGZ1bmN0aW9uIChrZXksIGNvbnRleHQpIHtcclxuICAgICAgICAgICAgS2V0Y2guX3ZpZXdzW2tleV0uY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5nZXRDb250ZXh0ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gS2V0Y2guX3ZpZXdzW2tleV0uY29udGV4dDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmNyZWF0ZVByb2dyYW0gPSBmdW5jdGlvbiAoa2V5LCBzaGFkZXJzKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IEtldGNoLmdldENvbnRleHQoa2V5KTtcclxuICAgICAgICAgICAgdmFyIHByb2dyYW0gPSBXZWJHTFV0aWxzLmNyZWF0ZVByb2dyYW0oZ2wsIHNoYWRlcnMpO1xyXG4gICAgICAgICAgICBLZXRjaC5zZXRQcm9ncmFtKGtleSwgcHJvZ3JhbSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5zZXRQcm9ncmFtID0gZnVuY3Rpb24gKGtleSwgcHJvZ3JhbSkge1xyXG4gICAgICAgICAgICBLZXRjaC5fdmlld3Nba2V5XS5wcm9ncmFtID0gcHJvZ3JhbTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmdldFByb2dyYW0gPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5fdmlld3Nba2V5XS5wcm9ncmFtO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2gudXNlUHJvZ3JhbSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBLZXRjaC5fdmlld3Nba2V5XTtcclxuICAgICAgICAgICAgdmFyIGdsID0gdmlldy5jb250ZXh0O1xyXG4gICAgICAgICAgICB2YXIgcHJnID0gdmlldy5wcm9ncmFtO1xyXG4gICAgICAgICAgICBnbC51c2VQcm9ncmFtKHByZyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5jcmVhdGVWaWV3ID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICBLZXRjaC5fdmlld3Nba2V5XSA9IHt9O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guc2V0QXR0cmlidXRlTG9jYXRpb25zID0gZnVuY3Rpb24gKGtleSwgYXR0cmlic19uYW1lcykge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IEtldGNoLl92aWV3c1trZXldO1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB2aWV3LmNvbnRleHQ7XHJcbiAgICAgICAgICAgIHZhciBwcmcgPSB2aWV3LnByb2dyYW07XHJcbiAgICAgICAgICAgIHZpZXcuYXR0cmlicyA9IGF0dHJpYnNfbmFtZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBhdHRyKSB7XHJcbiAgICAgICAgICAgICAgICBwcmV2W2F0dHJdID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24ocHJnLCBhdHRyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5nZXRBdHRyaWIgPSBmdW5jdGlvbiAodmlld19rZXksIGF0dHJfa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5fdmlld3Nbdmlld19rZXldLmF0dHJpYnNbYXR0cl9rZXldO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZ2V0VW5pZm9ybSA9IGZ1bmN0aW9uICh2aWV3X2tleSwgdW5pZm9ybV9rZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEtldGNoLl92aWV3c1t2aWV3X2tleV0udW5pZm9ybXNbdW5pZm9ybV9rZXldO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guc2V0VW5pZm9ybUxvY2F0aW9ucyA9IGZ1bmN0aW9uIChrZXksIHVuaWZvcm1fbmFtZXMpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBLZXRjaC5fdmlld3Nba2V5XTtcclxuICAgICAgICAgICAgdmFyIGdsID0gdmlldy5jb250ZXh0O1xyXG4gICAgICAgICAgICB2YXIgcHJnID0gdmlldy5wcm9ncmFtO1xyXG4gICAgICAgICAgICB2aWV3LnVuaWZvcm1zID0gdW5pZm9ybV9uYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGF0dHIpIHtcclxuICAgICAgICAgICAgICAgIHByZXZbYXR0cl0gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJnLCBhdHRyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5lbmFibGVBdHRyaWIgPSBmdW5jdGlvbiAodmlld19rZXksIGF0dHJfa2V5LCBwb2ludGVyKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IEtldGNoLmdldEF0dHJpYih2aWV3X2tleSwgYXR0cl9rZXkpO1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSBLZXRjaC5nZXRDb250ZXh0KHZpZXdfa2V5KTtcclxuICAgICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xyXG4gICAgICAgICAgICBpZiAocG9pbnRlcikge1xyXG4gICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihpbmRleCwgcG9pbnRlci5zaXplIHx8IDMsIGdsLkZMT0FULCBwb2ludGVyLm5vcm1hbGl6ZWQgfHwgZmFsc2UsIHBvaW50ZXIuc3RyaWRlIHx8IDAsIHBvaW50ZXIub2Zmc2V0IHx8IDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihpbmRleCwgMywgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZGlzYWJsZUF0dHJpYiA9IGZ1bmN0aW9uICh2aWV3X2tleSwgYXR0cl9rZXkpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gS2V0Y2guZ2V0QXR0cmliKHZpZXdfa2V5LCBhdHRyX2tleSk7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IEtldGNoLmdldENvbnRleHQodmlld19rZXkpO1xyXG4gICAgICAgICAgICBnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaW5kZXgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2gucmVuZGVyTG9vcCA9IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICBzZXRJbnRlcnZhbChjYiwgMzApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guYWRkVGV4dHVyZSA9IGZ1bmN0aW9uIChrZXksIHRleHR1cmVfaWQpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBLZXRjaC5fdmlld3Nba2V5XTtcclxuICAgICAgICAgICAgdmlldy50ZXh0dXJlcyA9IHZpZXcudGV4dHVyZXMgfHwgW107XHJcbiAgICAgICAgICAgIHZpZXcudGV4dHVyZXMucHVzaCh0ZXh0dXJlX2lkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLnJlbW92ZVRleHR1cmUgPSBmdW5jdGlvbiAoa2V5LCB0ZXh0dXJlX2lkKSB7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gS2V0Y2guX3ZpZXdzW2tleV07XHJcbiAgICAgICAgICAgIHZpZXcudGV4dHVyZXMgPSB2aWV3LnRleHR1cmVzIHx8IFtdO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB2aWV3LnRleHR1cmVzLmluZGV4T2YodGV4dHVyZV9pZCk7XHJcbiAgICAgICAgICAgIHZpZXcudGV4dHVyZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmFjdGl2ZVRleHR1cmUgPSBmdW5jdGlvbiAoa2V5LCB0ZXh0dXJlX2lkLCB0ZXh0dXJlKSB7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gS2V0Y2guX3ZpZXdzW2tleV07XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHZpZXcuY29udGV4dDtcclxuICAgICAgICAgICAgdmFyIHByZyA9IHZpZXcucHJvZ3JhbTtcclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdmlldy50ZXh0dXJlcy5pbmRleE9mKHRleHR1cmVfaWQpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgZ2wuYWN0aXZlVGV4dHVyZShpbmRleCA9PT0gMCA/IGdsLlRFWFRVUkUwIDogZ2wuVEVYVFVSRTAgKyBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcclxuICAgICAgICAgICAgICAgIHZhciB1U2FtcGxlciA9IEtldGNoLmdldFVuaWZvcm0oa2V5LCBcInVTYW1wbGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFpKHVTYW1wbGVyLCBpbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmlzT2ZmU2NyZWVuID0gZnVuY3Rpb24gKHZpZXdfa2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBLZXRjaC5fdmlld3Nbdmlld19rZXldLm9mZnNjcmVlbjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmVuYWJsZU9mZlNjcmVlbiA9IGZ1bmN0aW9uICh2aWV3X2tleSkge1xyXG4gICAgICAgICAgICBLZXRjaC5fdmlld3Nbdmlld19rZXldLm9mZnNjcmVlbiA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBLZXRjaC5kaXNhYmxlT2ZmU2NyZWVuID0gZnVuY3Rpb24gKHZpZXdfa2V5KSB7XHJcbiAgICAgICAgICAgIEtldGNoLl92aWV3c1t2aWV3X2tleV0ub2Zmc2NyZWVuID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEtldGNoLmZpbGxTZWxlY3RvckJ1ZmZlciA9IGZ1bmN0aW9uICh2aWV3X2tleSwgb2JqKSB7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gS2V0Y2guX3ZpZXdzW3ZpZXdfa2V5XTtcclxuICAgICAgICAgICAgdmlldy5zZWxlY3RPYmplY3RzID0gdmlldy5zZWxlY3RPYmplY3RzIHx8IFtdO1xyXG4gICAgICAgICAgICB2aWV3LnNlbGVjdE9iamVjdHMucHVzaChvYmopO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guY2xlYXJTZWxlY3RvckJ1ZmZlciA9IGZ1bmN0aW9uICh2aWV3X2tleSkge1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IEtldGNoLl92aWV3c1t2aWV3X2tleV07XHJcbiAgICAgICAgICAgIHZpZXcuc2VsZWN0T2JqZWN0cyA9IFtdO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guZ2V0U2VsZWN0QnlDb2xvciA9IGZ1bmN0aW9uICh2aWV3X2tleSwgY29sb3IpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBLZXRjaC5fdmlld3Nbdmlld19rZXldO1xyXG4gICAgICAgICAgICB2aWV3LnNlbGVjdE9iamVjdHMgPSB2aWV3LnNlbGVjdE9iamVjdHMgfHwgW107XHJcbiAgICAgICAgICAgIHJldHVybiBfLmZpbmQodmlldy5zZWxlY3RPYmplY3RzLCBmdW5jdGlvbiAobykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uaXNFcXVhbChvLmNvbG9yLCBjb2xvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgS2V0Y2guX3ZpZXdzID0ge307XHJcbiAgICAgICAgcmV0dXJuIEtldGNoO1xyXG4gICAgfSgpKTtcclxuICAgIEJsYXplLktldGNoID0gS2V0Y2g7XHJcbiAgICB2YXIgUmVuZGVyYWJsZSA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gUmVuZGVyYWJsZShncmFwaF9pZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ncmFwaF9pZCA9IGdyYXBoX2lkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVuZGVyYWJsZS5wcm90b3R5cGUsIFwiZ3JhcGhJRFwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dyYXBoX2lkO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVuZGVyYWJsZS5wcm90b3R5cGUsIFwiZ2xcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBLZXRjaC5nZXRDb250ZXh0KHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZW5kZXJhYmxlLnByb3RvdHlwZSwgXCJwcm9ncmFtXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gS2V0Y2guZ2V0UHJvZ3JhbSh0aGlzLmdyYXBoSUQpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBSZW5kZXJhYmxlLnByb3RvdHlwZS5nZXRVbmlmb3JtID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgICAgICByZXR1cm4gS2V0Y2guZ2V0VW5pZm9ybSh0aGlzLmdyYXBoSUQsIGtleSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gUmVuZGVyYWJsZTtcclxuICAgIH0oKSk7XHJcbiAgICBCbGF6ZS5SZW5kZXJhYmxlID0gUmVuZGVyYWJsZTtcclxuICAgIHZhciBFbnRpdHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhFbnRpdHksIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gRW50aXR5KGdyYXBoX2lkKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAobWF0cml4U3RhY2spIHtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEVudGl0eS5wcm90b3R5cGUuZW5kRHJhdyA9IGZ1bmN0aW9uIChtYXRyaXhTdGFjaykge1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEVudGl0eTtcclxuICAgIH0oUmVuZGVyYWJsZSkpO1xyXG4gICAgQmxhemUuRW50aXR5ID0gRW50aXR5O1xyXG4gICAgdmFyIE1hdHJpeFN0YWNrID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoTWF0cml4U3RhY2ssIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gTWF0cml4U3RhY2soZ3JhcGhfaWQpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFjayA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl9tdk1hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3BNYXRyaXggPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9uTWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgTWF0cml4U3RhY2sucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3B5ID0gbWF0NC5jcmVhdGUoKTtcclxuICAgICAgICAgICAgbWF0NC5zZXQodGhpcy5fbXZNYXRyaXgsIGNvcHkpO1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFjay5wdXNoKGNvcHkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWF0cml4U3RhY2sucHJvdG90eXBlLnBvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3N0YWNrLmxlbmd0aCA9PSAwKVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgXCJpbnZhbGlkIHBvcE1hdHJpeFwiO1xyXG4gICAgICAgICAgICB0aGlzLl9tdk1hdHJpeCA9IHRoaXMuX3N0YWNrLnBvcCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWF0cml4U3RhY2sucHJvdG90eXBlLk1vZGVsVmlldyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2NhbWVyYSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbXZNYXRyaXggPSB0aGlzLl9jYW1lcmEubW9kZWxWaWV3O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0NC5pZGVudGl0eSh0aGlzLl9tdk1hdHJpeCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXRyaXhTdGFjay5wcm90b3R5cGUsIFwibXZNYXRyaXhcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tdk1hdHJpeDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hdHJpeFN0YWNrLnByb3RvdHlwZSwgXCJwTWF0cml4XCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcE1hdHJpeDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hdHJpeFN0YWNrLnByb3RvdHlwZSwgXCJuTWF0cml4XCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbk1hdHJpeDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hdHJpeFN0YWNrLnByb3RvdHlwZSwgXCJNYWluQ2FtZXJhXCIsIHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoY2FtZXJhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYW1lcmEgPSBjYW1lcmE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE1hdHJpeFN0YWNrLnByb3RvdHlwZS5QZXJzcGVjdGl2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgbWF0NC5pZGVudGl0eSh0aGlzLl9wTWF0cml4KTtcclxuICAgICAgICAgICAgbWF0NC5wZXJzcGVjdGl2ZSg0NSwgZ2wudmlld3BvcnRXaWR0aCAvIGdsLnZpZXdwb3J0SGVpZ2h0LCAwLjEsIDEwMDAuMCwgdGhpcy5fcE1hdHJpeCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUuTm9ybWFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBtYXQ0LmlkZW50aXR5KHRoaXMuX25NYXRyaXgpO1xyXG4gICAgICAgICAgICBtYXQ0LnNldCh0aGlzLl9tdk1hdHJpeCwgdGhpcy5fbk1hdHJpeCk7XHJcbiAgICAgICAgICAgIG1hdDQuaW52ZXJzZSh0aGlzLl9uTWF0cml4KTtcclxuICAgICAgICAgICAgbWF0NC50cmFuc3Bvc2UodGhpcy5fbk1hdHJpeCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNYXRyaXhTdGFjay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5Nb2RlbFZpZXcoKTtcclxuICAgICAgICAgICAgdGhpcy5QZXJzcGVjdGl2ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLk5vcm1hbCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWF0cml4U3RhY2sucHJvdG90eXBlLnNldFVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB0aGlzLk5vcm1hbCgpO1xyXG4gICAgICAgICAgICB2YXIgbXZNYXRyaXggPSB0aGlzLmdldFVuaWZvcm0oXCJ1TVZNYXRyaXhcIik7XHJcbiAgICAgICAgICAgIGlmIChtdk1hdHJpeClcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm1NYXRyaXg0ZnYobXZNYXRyaXgsIGZhbHNlLCB0aGlzLl9tdk1hdHJpeCk7XHJcbiAgICAgICAgICAgIHZhciBwTWF0cml4ID0gdGhpcy5nZXRVbmlmb3JtKFwidVBNYXRyaXhcIik7XHJcbiAgICAgICAgICAgIGlmIChwTWF0cml4KVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihwTWF0cml4LCBmYWxzZSwgdGhpcy5fcE1hdHJpeCk7XHJcbiAgICAgICAgICAgIHZhciBuTWF0cml4ID0gdGhpcy5nZXRVbmlmb3JtKFwidU5NYXRyaXhcIik7XHJcbiAgICAgICAgICAgIGlmIChuTWF0cml4KVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybU1hdHJpeDRmdihuTWF0cml4LCBmYWxzZSwgdGhpcy5fbk1hdHJpeCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTWF0cml4U3RhY2s7XHJcbiAgICB9KFJlbmRlcmFibGUpKTtcclxuICAgIEJsYXplLk1hdHJpeFN0YWNrID0gTWF0cml4U3RhY2s7XHJcbiAgICB2YXIgUmVzb3VyY2VzO1xyXG4gICAgKGZ1bmN0aW9uIChSZXNvdXJjZXMpIHtcclxuICAgICAgICB2YXIgTWVzaEJ1ZmZlcnMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgICAgICBfX2V4dGVuZHMoTWVzaEJ1ZmZlcnMsIF9zdXBlcik7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIE1lc2hCdWZmZXJzKGdyYXBoX2lkKSB7XHJcbiAgICAgICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hCdWZmZXJzLnByb3RvdHlwZSwgXCJvbmxvYWRcIiwge1xyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoY2IpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbmxvYWQgPSBjYjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcInNyY1wiLCB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0ID0gdXRpbHMuZ2V0RXh0ZW5zaW9uKHNyYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMubG9hZChzcmMsIGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYmo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwib2JqXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gc2VsZi5wYXJzZU9CSihkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJqc29uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gc2VsZi5wYXJzZUpTT04oZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jcmVhdGVCdWZmZXJzKG9iaik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdGhpcy5fb25sb2FkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX29ubG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE1lc2hCdWZmZXJzLnByb3RvdHlwZS5wYXJzZUpTT04gPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBvYmogPSBKU09OLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE1lc2hCdWZmZXJzLnByb3RvdHlwZS5wYXJzZU9CSiA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHY6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHZuOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICB2dDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgaXY6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGluOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBpdDogW11cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgbGluZXMgPSBkYXRhLnNwbGl0KFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZlcnRleCA9IGxpbmVzLmZpbHRlcihmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhWzBdID09PSAndic7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGxpbmVzLmZpbHRlcihmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhWzBdID09PSAnZic7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZlcnRleC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVsZW1zID0gaXRlbS5yZXBsYWNlKFwiXFxyXCIsIFwiXCIpLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gZWxlbXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqW2tleV0gPSBvYmpba2V5XS5jb25jYXQoZWxlbXMuc2xpY2UoMSkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhICE9PSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBJbmRleCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaW5kZXguZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtcyA9IGl0ZW0ucmVwbGFjZShcIlxcclwiLCBcIlwiKS5yZXBsYWNlKFwiZlwiLCBcIlwiKS5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcEluZGV4ID0gdGVtcEluZGV4LmNvbmNhdChlbGVtcy5zbGljZSgxKS5maWx0ZXIoZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgIT09IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0ZW1wSW5kZXguZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbGVtcyA9IGl0ZW0uc3BsaXQoXCIvXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5pdi5wdXNoKHBhcnNlSW50KGVsZW1zWzBdKSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5pbi5wdXNoKHBhcnNlSW50KGVsZW1zWzFdKSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9iai5pdC5wdXNoKHBhcnNlSW50KGVsZW1zWzJdKSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBNZXNoQnVmZmVycy5wcm90b3R5cGUuY3JlYXRlQnVmZmVycyA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgICAgICBfLmRlZmF1bHRzKG9iaiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHY6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIHZuOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICB2dDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgaXY6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGluOiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBpdDogW11cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gY3JlYXRlQnVmZmVyKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gV2ViR0xVdGlscy5jcmVhdGVCdWZmZXIoZ2wsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9iai52Lmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmJvID0gY3JlYXRlQnVmZmVyKG9iai52KTtcclxuICAgICAgICAgICAgICAgIGlmIChvYmoudi5sZW5ndGggPiAwICYmIG9iai5pdi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmJvID0gY3JlYXRlQnVmZmVyKHV0aWxzLmNhbGN1bGF0ZU5vcm1hbHMob2JqLnYsIG9iai5pdikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9iai52dC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGJvID0gV2ViR0xVdGlscy5jcmVhdGVCdWZmZXIoZ2wsIG9iai52dCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjcmVhdGVJbmRleEJ1ZmZlcihkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFdlYkdMVXRpbHMuY3JlYXRlSW5kZXhCdWZmZXIoZ2wsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9iai5pdi5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2l2Ym8gPSBjcmVhdGVJbmRleEJ1ZmZlcihvYmouaXYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iai5pbi5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luYm8gPSBjcmVhdGVJbmRleEJ1ZmZlcihvYmouaW4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iai5pdC5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0Ym8gPSBjcmVhdGVJbmRleEJ1ZmZlcihvYmouaXQpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcInZib1wiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmJvO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoQnVmZmVycy5wcm90b3R5cGUsIFwibmJvXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYm87XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hCdWZmZXJzLnByb3RvdHlwZSwgXCJ0Ym9cIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RibztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaEJ1ZmZlcnMucHJvdG90eXBlLCBcIml2Ym9cIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l2Ym87XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hCdWZmZXJzLnByb3RvdHlwZSwgXCJpbmJvXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbmJvO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoQnVmZmVycy5wcm90b3R5cGUsIFwiaXRib1wiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXRibztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gTWVzaEJ1ZmZlcnM7XHJcbiAgICAgICAgfShSZW5kZXJhYmxlKSk7XHJcbiAgICAgICAgUmVzb3VyY2VzLk1lc2hCdWZmZXJzID0gTWVzaEJ1ZmZlcnM7XHJcbiAgICAgICAgdmFyIE1lc2hUZXh0dXJlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICAgICAgX19leHRlbmRzKE1lc2hUZXh0dXJlLCBfc3VwZXIpO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBNZXNoVGV4dHVyZShncmFwaF9pZCkge1xyXG4gICAgICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29pZCA9IHV0aWxzLnV1aWQodGhpcy5jb25zdHJ1Y3Rvci5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaFRleHR1cmUucHJvdG90eXBlLCBcIm9ubG9hZFwiLCB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29ubG9hZCA9IGNiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoVGV4dHVyZS5wcm90b3R5cGUsIFwic3JjXCIsIHtcclxuICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGZpbGVuYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW1hZ2Uub25sb2FkID0gdGhpcy5sb2FkVGV4dHVyZUltYWdlKHRoaXMuX29ubG9hZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW1hZ2Uuc3JjID0gZmlsZW5hbWU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgTWVzaFRleHR1cmUucHJvdG90eXBlLmxvYWRUZXh0dXJlSW1hZ2UgPSBmdW5jdGlvbiAoY2IpIHtcclxuICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl90ZXh0dXJlID0gV2ViR0xVdGlscy5jcmVhdGVUZXh0dXJlKHNlbGYuZ2wsIHNlbGYuX2ltYWdlKTtcclxuICAgICAgICAgICAgICAgICAgICBLZXRjaC5hZGRUZXh0dXJlKHNlbGYuZ3JhcGhJRCwgc2VsZi5fb2lkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNiKCk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVzaFRleHR1cmUucHJvdG90eXBlLCBcImNvbnRlbnRcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RleHR1cmU7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIE1lc2hUZXh0dXJlO1xyXG4gICAgICAgIH0oUmVuZGVyYWJsZSkpO1xyXG4gICAgICAgIFJlc291cmNlcy5NZXNoVGV4dHVyZSA9IE1lc2hUZXh0dXJlO1xyXG4gICAgICAgIHZhciBNZXNoTWF0ZXJpYWwgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgICAgICBfX2V4dGVuZHMoTWVzaE1hdGVyaWFsLCBfc3VwZXIpO1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBNZXNoTWF0ZXJpYWwoZ3JhcGhfaWQsIGFtYmllbnQsIGRpZmZ1c2UsIHNwZWN1bGFyLCBzaGluaW5lc3MpIHtcclxuICAgICAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FtYmllbnQgPSBhbWJpZW50ID8gdmVjNC5jcmVhdGUoYW1iaWVudCkgOiB2ZWM0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlmZnVzZSA9IGRpZmZ1c2UgPyB2ZWM0LmNyZWF0ZShkaWZmdXNlKSA6IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NwZWN1bGFyID0gc3BlY3VsYXIgPyB2ZWM0LmNyZWF0ZShzcGVjdWxhcikgOiB2ZWM0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hpbmluZXNzID0gc2hpbmluZXNzIHx8IDIwMC4wO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcIm9ubG9hZFwiLCB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29ubG9hZCA9IGNiO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcInNyY1wiLCB7XHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzcmMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB1dGlscy5sb2FkKHNyYywgZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXAgPSBzZWxmLnBhcnNlKGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fYW1iaWVudCA9IHRlbXAuS2E7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9kaWZmdXNlID0gdGVtcC5LZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3NwZWN1bGFyID0gdGVtcC5LcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2hpbmluZXNzID0gdGVtcC5OcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLl9vbmxvYWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fb25sb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgTWVzaE1hdGVyaWFsLnByb3RvdHlwZS5wYXJzZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5cyA9IFtcIkthXCIsIFwiS2RcIiwgXCJLc1wiLCBcIk5zXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxpbmVzID0gZGF0YS5zcGxpdChcIlxcblwiKTtcclxuICAgICAgICAgICAgICAgIGxpbmVzLmZvckVhY2goZnVuY3Rpb24gKGxpbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbXMgPSBsaW5lLnNwbGl0KFwiIFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gZWxlbXNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleXMuaW5kZXhPZihrZXkpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJOc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtcIk5zXCJdID0gTnVtYmVyKGVsZW1zWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcCA9IGVsZW1zLnNsaWNlKDEpLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gTnVtYmVyKGEpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wLnB1c2goMS4wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpba2V5XSA9IHRlbXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmo7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcImFtYmllbnRcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FtYmllbnQ7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYW1iaWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FtYmllbnQgPSB1dGlscy5ub3JtYWxpemVOYU4odmVjNC5jcmVhdGUoYW1iaWVudCkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcImRpZmZ1c2VcIiwge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RpZmZ1c2U7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGlmZnVzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZ1c2UgPSB1dGlscy5ub3JtYWxpemVOYU4odmVjNC5jcmVhdGUoZGlmZnVzZSkpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoTWF0ZXJpYWwucHJvdG90eXBlLCBcInNwZWN1bGFyXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zcGVjdWxhcjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzcGVjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NwZWN1bGFyID0gdXRpbHMubm9ybWFsaXplTmFOKHZlYzQuY3JlYXRlKHNwZWN1bGFyKSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lc2hNYXRlcmlhbC5wcm90b3R5cGUsIFwic2hpbmluZXNzXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaGluaW5lc3M7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NoaW5pbmVzcyA9IHY7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIE1lc2hNYXRlcmlhbDtcclxuICAgICAgICB9KFJlbmRlcmFibGUpKTtcclxuICAgICAgICBSZXNvdXJjZXMuTWVzaE1hdGVyaWFsID0gTWVzaE1hdGVyaWFsO1xyXG4gICAgfSkoUmVzb3VyY2VzID0gQmxhemUuUmVzb3VyY2VzIHx8IChCbGF6ZS5SZXNvdXJjZXMgPSB7fSkpO1xyXG4gICAgdmFyIFNoYWRlcnM7XHJcbiAgICAoZnVuY3Rpb24gKFNoYWRlcnMpIHtcclxuICAgICAgICB2YXIgRnJhZ21lbnQgPSAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBGcmFnbWVudCgpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBGcmFnbWVudC5BbGxfZWZmZWN0ID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG51bmlmb3JtIGZsb2F0IHVUaW1lO1xcbnVuaWZvcm0gc2FtcGxlcjJEIHVOb2lzZVNhbXBsZXI7XFxudW5pZm9ybSB2ZWMyIHVJbnZlcnNlVGV4dHVyZVNpemU7XFxuXFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxuY29uc3QgZmxvYXQgc3BlZWQgPSAxNS4wO1xcbmNvbnN0IGZsb2F0IG1hZ25pdHVkZSA9IDAuMDE1O1xcblxcbmNvbnN0IGZsb2F0IGdyYWluSW50ZW5zaXR5ID0gMC4xO1xcbmNvbnN0IGZsb2F0IHNjcm9sbFNwZWVkID0gNDAwMC4wO1xcblxcbnZlYzQgb2Zmc2V0TG9va3VwKGZsb2F0IHhPZmYsIGZsb2F0IHlPZmYpIHtcXG4gICAgcmV0dXJuIHRleHR1cmUyRCh1U2FtcGxlciwgdmVjMih2VGV4dHVyZUNvb3JkLnggKyB4T2ZmKnVJbnZlcnNlVGV4dHVyZVNpemUueCwgdlRleHR1cmVDb29yZC55ICsgeU9mZip1SW52ZXJzZVRleHR1cmVTaXplLnkpKTtcXG59XFxuXFxudm9pZCBtYWluKCl7XFxuXFxuICAgICB2ZWM0IGZyYW1lQ29sb3IgPSBvZmZzZXRMb29rdXAoLTQuMCwgMC4wKSAqIDAuMDU7XFxuICAgIGZyYW1lQ29sb3IgKz0gb2Zmc2V0TG9va3VwKC0zLjAsIDAuMCkgKiAwLjA5O1xcbiAgICBmcmFtZUNvbG9yICs9IG9mZnNldExvb2t1cCgtMi4wLCAwLjApICogMC4xMjtcXG4gICAgZnJhbWVDb2xvciArPSBvZmZzZXRMb29rdXAoLTEuMCwgMC4wKSAqIDAuMTU7XFxuICAgIGZyYW1lQ29sb3IgKz0gb2Zmc2V0TG9va3VwKDAuMCwgMC4wKSAqIDAuMTY7XFxuICAgIGZyYW1lQ29sb3IgKz0gb2Zmc2V0TG9va3VwKDEuMCwgMC4wKSAqIDAuMTU7XFxuICAgIGZyYW1lQ29sb3IgKz0gb2Zmc2V0TG9va3VwKDIuMCwgMC4wKSAqIDAuMTI7XFxuICAgIGZyYW1lQ29sb3IgKz0gb2Zmc2V0TG9va3VwKDMuMCwgMC4wKSAqIDAuMDk7XFxuICAgIGZyYW1lQ29sb3IgKz0gb2Zmc2V0TG9va3VwKDQuMCwgMC4wKSAqIDAuMDU7XFxuICAgIFxcbiAgICB2ZWM0IGdyYWluPXRleHR1cmUyRCh1Tm9pc2VTYW1wbGVyLCB2VGV4dHVyZUNvb3JkKjIuMCt1VGltZSpzY3JvbGxTcGVlZCp1SW52ZXJzZVRleHR1cmVTaXplKTtcXG4gICAgIFxcbiAgICAgIGZyYW1lQ29sb3IgKz10ZXh0dXJlMkQodVNhbXBsZXIsIHZUZXh0dXJlQ29vcmQpLShncmFpbipncmFpbkludGVuc2l0eSk7XFxuICAgICAgICAgIHZlYzIgd2F2eUNvb3JkO1xcbiAgICB3YXZ5Q29vcmQucz12VGV4dHVyZUNvb3JkLnMrKHNpbih1VGltZSt2VGV4dHVyZUNvb3JkLnQqc3BlZWQpKm1hZ25pdHVkZSk7XFxuICAgIHdhdnlDb29yZC50PXZUZXh0dXJlQ29vcmQudCsoc2luKHVUaW1lK3ZUZXh0dXJlQ29vcmQucypzcGVlZCkqbWFnbml0dWRlKTtcXG4gICAgXFxuICAgIGZyYW1lQ29sb3IrPXRleHR1cmUyRCh1U2FtcGxlciwgd2F2eUNvb3JkKTtcXG4gICAgZ2xfRnJhZ0NvbG9yPWZyYW1lQ29sb3I7XFxufVwiO1xyXG4gICAgICAgICAgICBGcmFnbWVudC5CbHVyX2VmZmVjdCA9IFwiI2lmZGVmIEdMX0VTXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7XFxudW5pZm9ybSB2ZWMyIHVJbnZlcnNlVGV4dHVyZVNpemU7XFxuXFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudmVjNCBvZmZzZXRMb29rdXAoZmxvYXQgeE9mZiwgZmxvYXQgeU9mZikge1xcbiAgICByZXR1cm4gdGV4dHVyZTJEKHVTYW1wbGVyLCB2ZWMyKHZUZXh0dXJlQ29vcmQueCArIHhPZmYqdUludmVyc2VUZXh0dXJlU2l6ZS54LCB2VGV4dHVyZUNvb3JkLnkgKyB5T2ZmKnVJbnZlcnNlVGV4dHVyZVNpemUueSkpO1xcbn1cXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIHZlYzQgZnJhbWVDb2xvciA9IG9mZnNldExvb2t1cCgtNC4wLCAwLjApICogMC4wNTtcXG4gICAgZnJhbWVDb2xvciArPSBvZmZzZXRMb29rdXAoLTMuMCwgMC4wKSAqIDAuMDk7XFxuICAgIGZyYW1lQ29sb3IgKz0gb2Zmc2V0TG9va3VwKC0yLjAsIDAuMCkgKiAwLjEyO1xcbiAgICBmcmFtZUNvbG9yICs9IG9mZnNldExvb2t1cCgtMS4wLCAwLjApICogMC4xNTtcXG4gICAgZnJhbWVDb2xvciArPSBvZmZzZXRMb29rdXAoMC4wLCAwLjApICogMC4xNjtcXG4gICAgZnJhbWVDb2xvciArPSBvZmZzZXRMb29rdXAoMS4wLCAwLjApICogMC4xNTtcXG4gICAgZnJhbWVDb2xvciArPSBvZmZzZXRMb29rdXAoMi4wLCAwLjApICogMC4xMjtcXG4gICAgZnJhbWVDb2xvciArPSBvZmZzZXRMb29rdXAoMy4wLCAwLjApICogMC4wOTtcXG4gICAgZnJhbWVDb2xvciArPSBvZmZzZXRMb29rdXAoNC4wLCAwLjApICogMC4wNTtcXG5cXG4gICAgZ2xfRnJhZ0NvbG9yID0gZnJhbWVDb2xvcjtcXG59XCI7XHJcbiAgICAgICAgICAgIEZyYWdtZW50LkZpbG1fZWZmZWN0ID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG51bmlmb3JtIHNhbXBsZXIyRCB1Tm9pc2VTYW1wbGVyO1xcbnVuaWZvcm0gdmVjMiB1SW52ZXJzZVRleHR1cmVTaXplO1xcbnVuaWZvcm0gZmxvYXQgdVRpbWU7XFxuXFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxuY29uc3QgZmxvYXQgZ3JhaW5JbnRlbnNpdHkgPSAwLjE7XFxuY29uc3QgZmxvYXQgc2Nyb2xsU3BlZWQgPSA0MDAwLjA7XFxuXFxuXFxudm9pZCBtYWluKClcXG57XFxuICAgIHZlYzQgZnJhbWVDb2xvcj10ZXh0dXJlMkQodVNhbXBsZXIsIHZUZXh0dXJlQ29vcmQpO1xcbiAgICB2ZWM0IGdyYWluPXRleHR1cmUyRCh1Tm9pc2VTYW1wbGVyLCB2VGV4dHVyZUNvb3JkKjIuMCt1VGltZSpzY3JvbGxTcGVlZCp1SW52ZXJzZVRleHR1cmVTaXplKTtcXG4gICAgZ2xfRnJhZ0NvbG9yPWZyYW1lQ29sb3ItKGdyYWluKmdyYWluSW50ZW5zaXR5KTtcXG5cXG59XCI7XHJcbiAgICAgICAgICAgIEZyYWdtZW50LkdyZXlfZWZmZWN0ID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG5cXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIHZlYzQgZnJhbWVDb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlciwgdlRleHR1cmVDb29yZCk7XFxuICAgIGZsb2F0IGx1bWluYW5jZSA9IGZyYW1lQ29sb3IuciAqIDAuMyArIGZyYW1lQ29sb3IuZyAqIDAuNTkgKyBmcmFtZUNvbG9yLmIgKiAwLjExO1xcbiAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KGx1bWluYW5jZSwgbHVtaW5hbmNlLCBsdW1pbmFuY2UsIGZyYW1lQ29sb3IuYSk7XFxufVwiO1xyXG4gICAgICAgICAgICBGcmFnbWVudC5JbnZlcnRfZWZmZWN0ID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG51bmlmb3JtIHNhbXBsZXIyRCB1U2FtcGxlcjtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG52b2lkIG1haW4odm9pZClcXG57XFxuICAgIHZlYzQgZnJhbWVDb2xvciA9IHRleHR1cmUyRCh1U2FtcGxlciwgdlRleHR1cmVDb29yZCk7XFxuICAgIGdsX0ZyYWdDb2xvciA9IHZlYzQoMS4wLWZyYW1lQ29sb3IuciwgMS4wLWZyYW1lQ29sb3IuZywgMS4wLWZyYW1lQ29sb3IuYiwgZnJhbWVDb2xvci5hKTtcXG59XCI7XHJcbiAgICAgICAgICAgIEZyYWdtZW50Lk5vX2VmZmVjdCA9IFwiI2lmZGVmIEdMX0VTXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7XFxudmFyeWluZyB2ZWMyIHZUZXh0dXJlQ29vcmQ7XFxuXFxudm9pZCBtYWluKCl7XFxuICAgIHZlYzQgZnJhbWVDb2xvcj10ZXh0dXJlMkQodVNhbXBsZXIsIHZUZXh0dXJlQ29vcmQpO1xcbiAgICBcXG4gICAgZ2xfRnJhZ0NvbG9yPWZyYW1lQ29sb3I7XFxuXFxufVxcblwiO1xyXG4gICAgICAgICAgICBGcmFnbWVudC5QYXJ0aWNsZSA9IFwiI2lmZGVmIEdMX0VTXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxudW5pZm9ybSBib29sIHVXaXJlZnJhbWU7XFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7XFxuXFxudmFyeWluZyB2ZWM0IHZDb2xvcjtcXG5cXG5cXG5ib29sIGlzQmxhY2sodmVjNCBjb2xvcil7XFxucmV0dXJuIGNvbG9yLnI9PTAuMCAmJmNvbG9yLmc9PTAuMCYmY29sb3IuYj09MC4wO1xcbn1cXG52b2lkIG1haW4odm9pZCkgeyBcXG4gICAgIGlmKHVXaXJlZnJhbWUpe1xcbiAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZDb2xvcjtcXG4gICAgICAgIH1lbHNle1xcbiAgICBnbF9GcmFnQ29sb3IgPSB0ZXh0dXJlMkQodVNhbXBsZXIsIGdsX1BvaW50Q29vcmQpO1xcbiAgICBpZihnbF9GcmFnQ29sb3IuYSA8IDAuNSB8fCBpc0JsYWNrKGdsX0ZyYWdDb2xvcikpIGRpc2NhcmQ7XFxuICAgIH1cXG59XCI7XHJcbiAgICAgICAgICAgIEZyYWdtZW50LlBob25nID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG51bmlmb3JtIGZsb2F0IHVTaGluaW5lc3M7XFxudW5pZm9ybSB2ZWMzIHVMaWdodERpcmVjdGlvbjtcXG5cXG51bmlmb3JtIHZlYzQgdUxpZ2h0QW1iaWVudDtcXG51bmlmb3JtIHZlYzQgdUxpZ2h0RGlmZnVzZTtcXG51bmlmb3JtIHZlYzQgdUxpZ2h0U3BlY3VsYXI7XFxuXFxudW5pZm9ybSBib29sIHVXaXJlZnJhbWU7XFxuXFxudW5pZm9ybSBib29sIHVPZmZzY3JlZW47XFxudW5pZm9ybSB2ZWM0IHVTZWxlY3RDb2xvcjtcXG5cXG51bmlmb3JtIHZlYzQgdU1hdGVyaWFsQW1iaWVudDtcXG51bmlmb3JtIHZlYzQgdU1hdGVyaWFsRGlmZnVzZTtcXG51bmlmb3JtIHZlYzQgdU1hdGVyaWFsU3BlY3VsYXI7XFxuXFxudmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxudmFyeWluZyB2ZWMzIHZFeWVWZWM7XFxudmFyeWluZyB2ZWM0IHZDb2xvcjtcXG5cXG52b2lkIG1haW4oKXtcXG5cXG4gICAgICAgIGlmKHVXaXJlZnJhbWUpe1xcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZDb2xvcjtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgXFxuXFxuICAgICAgICBpZih1T2Zmc2NyZWVuKXtcXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3I9dVNlbGVjdENvbG9yO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgXFxuICAgICAgICB2ZWMzIEw9IG5vcm1hbGl6ZSh1TGlnaHREaXJlY3Rpb24pO1xcbiAgICAgICAgdmVjMyBOPSBub3JtYWxpemUodk5vcm1hbCk7XFxuICAgICAgICBmbG9hdCBsYW1iZXJ0VGVybT1kb3QoTiwgLUwpO1xcbiAgICAgICAgXFxuICAgICAgICB2ZWM0IElhPSB1TGlnaHRBbWJpZW50KnVNYXRlcmlhbEFtYmllbnQ7XFxuICAgICAgICBcXG4gICAgICAgIHZlYzQgSWQ9dmVjNCgwLjAsMC4wLDAuMCwxLjApO1xcbiAgICAgICAgXFxuICAgICAgICB2ZWM0IElzPXZlYzQoMC4wLDAuMCwwLjAsMS4wKTtcXG4gICAgICAgIFxcbiAgICAgICAgaWYobGFtYmVydFRlcm0+MC4wKVxcbiAgICAgICAge1xcbiAgICAgICAgICAgIElkPXVMaWdodERpZmZ1c2UqdU1hdGVyaWFsRGlmZnVzZSpsYW1iZXJ0VGVybTtcXG4gICAgICAgICAgICBcXG4gICAgICAgICAgICB2ZWMzIEU9IG5vcm1hbGl6ZSh2RXllVmVjKTtcXG4gICAgICAgICAgICB2ZWMzIFI9IHJlZmxlY3QoTCwgTik7XFxuICAgICAgICAgICAgZmxvYXQgc3BlY3VsYXI9cG93KG1heChkb3QoUixFKSwwLjApLCB1U2hpbmluZXNzKTtcXG4gICAgICAgICAgICBJcz11TGlnaHRTcGVjdWxhcip1TWF0ZXJpYWxTcGVjdWxhcipzcGVjdWxhcjtcXG4gICAgICAgIH1cXG4gICAgICAgIFxcbiAgICAgICAgdmVjNCBmaW5hbENvbG9yPUlhK0lkK0lzO1xcbiAgICAgICAgZmluYWxDb2xvci5hPTEuMDtcXG4gICAgXFxuICAgICAgICBnbF9GcmFnQ29sb3IgPWZpbmFsQ29sb3I7XFxuICAgICAgICBcXG4gICAgICAgIFxcbn1cXG5cXG5cXG5cIjtcclxuICAgICAgICAgICAgRnJhZ21lbnQuUGhvbmdfbGlnaHRzID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG5cXG5jb25zdCBpbnQgTnVtTGlnaHRzPTE2O1xcblxcbnVuaWZvcm0gZmxvYXQgdVNoaW5pbmVzcztcXG51bmlmb3JtIHZlYzMgdUxpZ2h0RGlyZWN0aW9uW051bUxpZ2h0c107XFxudW5pZm9ybSBmbG9hdCB1Q3V0T2ZmW051bUxpZ2h0c107XFxuXFxudW5pZm9ybSB2ZWM0IHVMaWdodEFtYmllbnRbTnVtTGlnaHRzXTtcXG51bmlmb3JtIHZlYzQgdUxpZ2h0RGlmZnVzZVtOdW1MaWdodHNdO1xcbnVuaWZvcm0gdmVjNCB1TGlnaHRTcGVjdWxhcltOdW1MaWdodHNdO1xcblxcbnVuaWZvcm0gYm9vbCB1V2lyZWZyYW1lO1xcblxcbnVuaWZvcm0gYm9vbCB1T2Zmc2NyZWVuO1xcbnVuaWZvcm0gdmVjNCB1U2VsZWN0Q29sb3I7XFxuXFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbEFtYmllbnQ7XFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbERpZmZ1c2U7XFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbFNwZWN1bGFyO1xcblxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbnZhcnlpbmcgdmVjMyB2RXllVmVjO1xcbnZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuXFxudm9pZCBtYWluKCl7XFxuXFxuICAgICAgICBpZih1V2lyZWZyYW1lKXtcXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2Q29sb3I7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcbiAgICAgIFxcblxcbiAgICAgICAgaWYodU9mZnNjcmVlbil7XFxuICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yPXVTZWxlY3RDb2xvcjtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2ZWM0IGZpbmFsQ29sb3I9dmVjNCgwLjAsMC4wLDAuMCwxLjApO1xcbiAgICAgICAgZm9yKGludCBpPTA7IGk8TnVtTGlnaHRzO2krKyl7XFxuICAgICAgICBcXG4gICAgICAgIHZlYzMgTD0gbm9ybWFsaXplKHVMaWdodERpcmVjdGlvbltpXSk7XFxuICAgICAgICB2ZWMzIE49IG5vcm1hbGl6ZSh2Tm9ybWFsKTtcXG4gICAgICAgIGZsb2F0IGxhbWJlcnRUZXJtPWRvdChOLCAtTCk7XFxuICAgICAgICBcXG4gICAgICAgIHZlYzQgSWE9IHVMaWdodEFtYmllbnRbaV0qdU1hdGVyaWFsQW1iaWVudDtcXG4gICAgICAgIFxcbiAgICAgICAgdmVjNCBJZD12ZWM0KDAuMCwwLjAsMC4wLDEuMCk7XFxuICAgICAgICBcXG4gICAgICAgIHZlYzQgSXM9dmVjNCgwLjAsMC4wLDAuMCwxLjApO1xcbiAgICAgICAgXFxuICAgICAgICBpZihsYW1iZXJ0VGVybT51Q3V0T2ZmW2ldKVxcbiAgICAgICAge1xcbiAgICAgICAgICAgIElkPXVMaWdodERpZmZ1c2VbaV0qdU1hdGVyaWFsRGlmZnVzZSpsYW1iZXJ0VGVybTtcXG4gICAgICAgICAgICBcXG4gICAgICAgICAgICB2ZWMzIEU9IG5vcm1hbGl6ZSh2RXllVmVjKTtcXG4gICAgICAgICAgICB2ZWMzIFI9IHJlZmxlY3QoTCwgTik7XFxuICAgICAgICAgICAgZmxvYXQgc3BlY3VsYXI9cG93KG1heChkb3QoUixFKSwwLjApLCB1U2hpbmluZXNzKTtcXG4gICAgICAgICAgICBJcz11TGlnaHRTcGVjdWxhcltpXSp1TWF0ZXJpYWxTcGVjdWxhcipzcGVjdWxhcjtcXG4gICAgICAgIH1cXG4gICAgICAgIFxcbiAgICAgICAgZmluYWxDb2xvcis9SWErSWQrSXM7XFxuICAgICAgICBcXG4gICAgICAgIH1cXG4gICAgICAgIGZpbmFsQ29sb3IuYT0xLjA7XFxuICAgIFxcbiAgICAgICAgZ2xfRnJhZ0NvbG9yID1maW5hbENvbG9yO1xcbiAgICAgICAgXFxuICAgICAgICBcXG59XFxuXFxuXFxuXCI7XHJcbiAgICAgICAgICAgIEZyYWdtZW50LlBob25nX3Bvc2l0aW9uYWwgPSBcIiNpZmRlZiBHTF9FU1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbiNlbmRpZlxcblxcbnVuaWZvcm0gZmxvYXQgdVNoaW5pbmVzcztcXG5cXG51bmlmb3JtIHZlYzQgdUxpZ2h0QW1iaWVudDtcXG51bmlmb3JtIHZlYzQgdUxpZ2h0RGlmZnVzZTtcXG5cXG5cXG51bmlmb3JtIGJvb2wgdVdpcmVmcmFtZTtcXG5cXG51bmlmb3JtIGJvb2wgdU9mZnNjcmVlbjtcXG51bmlmb3JtIHZlYzQgdVNlbGVjdENvbG9yO1xcblxcblxcbnVuaWZvcm0gdmVjNCB1TWF0ZXJpYWxEaWZmdXNlO1xcblxcblxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbnZhcnlpbmcgdmVjMyB2RXllVmVjO1xcbnZhcnlpbmcgdmVjMyB2TGlnaHREaXI7XFxudmFyeWluZyB2ZWM0IHZDb2xvcjtcXG5cXG52b2lkIG1haW4oKXtcXG5cXG4gICAgICAgIGlmKHVXaXJlZnJhbWUpe1xcbiAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHZDb2xvcjtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgXFxuXFxuICAgICAgICBpZih1T2Zmc2NyZWVuKXtcXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3I9dVNlbGVjdENvbG9yO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgXFxuICAgICAgICB2ZWMzIEw9IG5vcm1hbGl6ZSh2TGlnaHREaXIpO1xcbiAgICAgICAgdmVjMyBOPSBub3JtYWxpemUodk5vcm1hbCk7XFxuICAgICAgICBmbG9hdCBsYW1iZXJ0VGVybT1kb3QoTiwgLUwpO1xcbiAgICAgICAgXFxuICAgICAgICB2ZWM0IElhPSB1TGlnaHRBbWJpZW50O1xcbiAgICAgICAgXFxuICAgICAgICB2ZWM0IElkPXZlYzQoMC4wLDAuMCwwLjAsMS4wKTtcXG4gICAgICAgIFxcbiAgICAgICAgdmVjNCBJcz12ZWM0KDAuMCwwLjAsMC4wLDEuMCk7XFxuICAgICAgICBcXG4gICAgICAgIGlmKGxhbWJlcnRUZXJtPjAuMClcXG4gICAgICAgIHtcXG4gICAgICAgICAgICBJZD11TWF0ZXJpYWxEaWZmdXNlKmxhbWJlcnRUZXJtO1xcbiAgICAgICAgICAgIFxcbiAgICAgICAgICAgIHZlYzMgRT0gbm9ybWFsaXplKHZFeWVWZWMpO1xcbiAgICAgICAgICAgIHZlYzMgUj0gcmVmbGVjdChMLCBOKTtcXG4gICAgICAgICAgICBmbG9hdCBzcGVjdWxhcj1wb3cobWF4KGRvdChSLEUpLDAuMCksIHVTaGluaW5lc3MpO1xcbiAgICAgICAgICAgIElzPXVMaWdodERpZmZ1c2Uqc3BlY3VsYXI7XFxuICAgICAgICB9XFxuICAgICAgICBcXG4gICAgICAgIHZlYzQgZmluYWxDb2xvcj1JYStJZCtJcztcXG4gICAgICAgIGZpbmFsQ29sb3IuYT0xLjA7XFxuICAgIFxcbiAgICAgICAgZ2xfRnJhZ0NvbG9yID1maW5hbENvbG9yO1xcbiAgICAgICAgXFxuICAgICAgICBcXG59XFxuXFxuXFxuXCI7XHJcbiAgICAgICAgICAgIEZyYWdtZW50LlRvb24gPSBcIiNpZmRlZiBHTF9FU1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbiNlbmRpZlxcblxcbnVuaWZvcm0gZmxvYXQgdVNoaW5pbmVzcztcXG51bmlmb3JtIHZlYzMgdUxpZ2h0RGlyZWN0aW9uO1xcblxcbnVuaWZvcm0gbWF0NCB1TVZNYXRyaXg7XFxuXFxudW5pZm9ybSB2ZWM0IHVMaWdodEFtYmllbnQ7XFxudW5pZm9ybSB2ZWM0IHVMaWdodERpZmZ1c2U7XFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbERpZmZ1c2U7XFxuXFxudW5pZm9ybSBib29sIHVXaXJlZnJhbWU7XFxuXFxudW5pZm9ybSBib29sIHVPZmZzY3JlZW47XFxudW5pZm9ybSB2ZWM0IHVTZWxlY3RDb2xvcjtcXG5cXG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xcblxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbnZhcnlpbmcgdmVjMyB2VmVydGV4O1xcblxcbnZvaWQgbWFpbigpe1xcblxcbiAgICAgICBpZih1V2lyZWZyYW1lKXtcXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3IgPSB2Q29sb3I7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcbiAgICAgIFxcblxcbiAgICAgICAgaWYodU9mZnNjcmVlbil7XFxuICAgICAgICAgICAgZ2xfRnJhZ0NvbG9yPXVTZWxlY3RDb2xvcjtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2ZWM0IGNvbG9yMD12ZWM0KHVNYXRlcmlhbERpZmZ1c2UucmdiLDEuMCk7XFxuICAgICAgICB2ZWM0IGNvbG9yMT12ZWM0KDAuMCwwLjAsMC4wLCAxLjApO1xcbiAgICAgICAgdmVjNCBjb2xvcjI9dmVjNCh1TWF0ZXJpYWxEaWZmdXNlLnJnYiwgMS4wKTtcXG4gICAgICAgIFxcbiAgICAgICAgdmVjMyBOPSB2Tm9ybWFsO1xcbiAgICAgICAgdmVjMyBMID0gbm9ybWFsaXplKHVMaWdodERpcmVjdGlvbik7XFxuICAgICAgICBcXG4gICAgICAgIHZlYzQgZXllUG9zPSB1TVZNYXRyaXgqdmVjNCgwLjAsMC4wLDAuMCwxLjApO1xcbiAgICAgICAgXFxuICAgICAgICB2ZWMzIEV5ZVZlcnQgPSBub3JtYWxpemUoLWV5ZVBvcy54eXopO1xcbiAgICAgICAgXFxuICAgICAgICB2ZWMzIEV5ZUxpZ2h0PW5vcm1hbGl6ZShMK0V5ZVZlcnQpO1xcbiAgICAgICAgXFxuICAgICAgICBmbG9hdCBzaWw9IG1heChkb3QoTiwgRXllVmVydCksIDAuMCk7XFxuICAgICAgICBcXG4gICAgICAgIGlmKCBzaWw8MC40KXtcXG4gICAgICAgICAgICBnbF9GcmFnQ29sb3I9Y29sb3IxO1xcbiAgICAgICAgfWVsc2V7XFxuICAgICAgICAgICAgIGdsX0ZyYWdDb2xvcj1jb2xvcjA7XFxuICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICBmbG9hdCBzcGVjPXBvdyhtYXgoZG90KE4sIEV5ZUxpZ2h0KSwgMC4wKSwgdVNoaW5pbmVzcyk7XFxuICAgICAgICAgICAgIFxcbiAgICAgICAgICAgICBpZihzcGVjPDAuMikgZ2xfRnJhZ0NvbG9yKj0wLjg7XFxuICAgICAgICAgICAgIGVsc2UgZ2xfRnJhZ0NvbG9yPWNvbG9yMjtcXG4gICAgICAgICAgICAgXFxuICAgICAgICAgICAgIGZsb2F0IGRpZmZ1c2U9bWF4KGRvdChOLCBMKSwgMC4wKTtcXG4gICAgICAgICAgICAgaWYoZGlmZnVzZTwwLjUpZ2xfRnJhZ0NvbG9yKj0wLjg7XFxuICAgICAgICB9XFxuXFxuXFxuXFxuXFxuXFxufVxcblxcblxcblxcblwiO1xyXG4gICAgICAgICAgICBGcmFnbWVudC5XYXZ5X2VmZmVjdCA9IFwiI2lmZGVmIEdMX0VTXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxuXFxuXFxudW5pZm9ybSBzYW1wbGVyMkQgdVNhbXBsZXI7XFxudW5pZm9ybSBmbG9hdCB1VGltZTtcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG5jb25zdCBmbG9hdCBzcGVlZCA9IDE1LjA7XFxuY29uc3QgZmxvYXQgbWFnbml0dWRlID0gMC4wMTU7XFxuXFxudm9pZCBtYWluKCl7XFxuICAgIFxcbiAgICB2ZWMyIHdhdnlDb29yZDtcXG4gICAgd2F2eUNvb3JkLnM9dlRleHR1cmVDb29yZC5zKyhzaW4odVRpbWUrdlRleHR1cmVDb29yZC50KnNwZWVkKSptYWduaXR1ZGUpO1xcbiAgICB3YXZ5Q29vcmQudD12VGV4dHVyZUNvb3JkLnQrKHNpbih1VGltZSt2VGV4dHVyZUNvb3JkLnMqc3BlZWQpKm1hZ25pdHVkZSk7XFxuICAgIFxcbiAgICB2ZWM0IGZyYW1lQ29sb3I9dGV4dHVyZTJEKHVTYW1wbGVyLCB3YXZ5Q29vcmQpO1xcbiAgICBnbF9GcmFnQ29sb3I9ZnJhbWVDb2xvcjtcXG5cXG5cXG59XCI7XHJcbiAgICAgICAgICAgIHJldHVybiBGcmFnbWVudDtcclxuICAgICAgICB9KCkpO1xyXG4gICAgICAgIFNoYWRlcnMuRnJhZ21lbnQgPSBGcmFnbWVudDtcclxuICAgICAgICB2YXIgVmVydGV4ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gVmVydGV4KCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFZlcnRleC5FZmZlY3QgPSBcIiNpZmRlZiBHTF9FU1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbiNlbmRpZlxcblxcbmF0dHJpYnV0ZSB2ZWMyIGFfcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzIgYV90ZXh0dXJlX2Nvb3JkcztcXG5cXG52YXJ5aW5nIHZlYzIgdlRleHR1cmVDb29yZDtcXG5cXG52b2lkIG1haW4oKXtcXG4gICAgdlRleHR1cmVDb29yZD1hX3RleHR1cmVfY29vcmRzO1xcblxcbiAgICBnbF9Qb3NpdGlvbj12ZWM0KGFfcG9zaXRpb24sIDAuMCwxLjApO1xcbiAgICBcXG59XCI7XHJcbiAgICAgICAgICAgIFZlcnRleC5QYXJ0aWNsZSA9IFwiI2lmZGVmIEdMX0VTXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxuYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjNCBhX2NvbG9yO1xcblxcbnVuaWZvcm0gbWF0NCB1TVZNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHVQTWF0cml4O1xcbnVuaWZvcm0gZmxvYXQgdVBvaW50U2l6ZTtcXG5cXG51bmlmb3JtIGJvb2wgdVdpcmVmcmFtZTtcXG51bmlmb3JtIGJvb2wgdVBlclZlcnRleENvbG9yO1xcbnVuaWZvcm0gdmVjNCB1TWF0ZXJpYWxEaWZmdXNlO1xcblxcblxcbnZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuXFxudm9pZCBtYWluKHZvaWQpIHtcXG5cXG4gaWYodVdpcmVmcmFtZSl7XFxuXFx0IFxcblxcdCBcXHRpZih1UGVyVmVydGV4Q29sb3Ipe1xcblxcdCBcXHRcXHQgdkNvbG9yPWFfY29sb3I7XFxuXFx0IFxcdH1lbHNle1xcblxcdCBcXHRcXHR2Q29sb3I9dU1hdGVyaWFsRGlmZnVzZTtcXG5cXHQgXFx0fVxcblxcdCBcXG5cXHRcXG5cXHQgfVxcbiAgICBcXG4gICAgZ2xfUG9zaXRpb24gPSB1UE1hdHJpeCAqIHVNVk1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbi54eXosIDEuMCk7XFxuICAgIGdsX1BvaW50U2l6ZSA9IHVQb2ludFNpemU7XFxufVwiO1xyXG4gICAgICAgICAgICBWZXJ0ZXguUGhvbmcgPSBcIiNpZmRlZiBHTF9FU1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbiNlbmRpZlxcblxcbmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzMgYV9ub3JtYWw7XFxuYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5cXG51bmlmb3JtIG1hdDQgdU1WTWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1UE1hdHJpeDtcXG51bmlmb3JtIG1hdDQgdU5NYXRyaXg7XFxuXFxudW5pZm9ybSBib29sIHVXaXJlZnJhbWU7XFxudW5pZm9ybSBib29sIHVQZXJWZXJ0ZXhDb2xvcjtcXG51bmlmb3JtIHZlYzQgdU1hdGVyaWFsRGlmZnVzZTtcXG5cXG52YXJ5aW5nIHZlYzMgdk5vcm1hbDtcXG52YXJ5aW5nIHZlYzMgdkV5ZVZlYztcXG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xcblxcbnZvaWQgbWFpbigpe1xcblxcbiAgICB2ZWM0IHZlcnRleCA9IHVNVk1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTtcXG5cXHRcXG5cXHRcXG5cXHQgaWYodVdpcmVmcmFtZSl7XFxuXFx0IFxcblxcdCBcXHRpZih1UGVyVmVydGV4Q29sb3Ipe1xcblxcdCBcXHRcXHQgdkNvbG9yPWFfY29sb3I7XFxuXFx0IFxcdH1lbHNle1xcblxcdCBcXHRcXHR2Q29sb3I9dU1hdGVyaWFsRGlmZnVzZTtcXG5cXHQgXFx0fVxcblxcdCBcXG5cXHRcXG5cXHQgfWVsc2V7XFxuXFx0XFxuXFx0dk5vcm1hbCA9IHZlYzModU5NYXRyaXggKiB2ZWM0KGFfbm9ybWFsLCAxLjApKTtcXG5cXHR2RXllVmVjPS12ZWMzKHZlcnRleC54eXopOyAgXFxuXFx0XFxuXFx0fVxcblxcdCBcXG5cXHRnbF9Qb3NpdGlvbiA9dVBNYXRyaXggKiB2ZXJ0ZXg7XFxuXFxufVxcblxcblxcblwiO1xyXG4gICAgICAgICAgICBWZXJ0ZXguUGhvbmdfbGlnaHRzID0gXCIjaWZkZWYgR0xfRVNcXG5wcmVjaXNpb24gbWVkaXVtcCBmbG9hdDtcXG4jZW5kaWZcXG5cXG5hdHRyaWJ1dGUgdmVjMyBhX3Bvc2l0aW9uO1xcbmF0dHJpYnV0ZSB2ZWMzIGFfbm9ybWFsO1xcbmF0dHJpYnV0ZSB2ZWM0IGFfY29sb3I7XFxuXFxudW5pZm9ybSBtYXQ0IHVNVk1hdHJpeDtcXG51bmlmb3JtIG1hdDQgdVBNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHVOTWF0cml4O1xcblxcbnVuaWZvcm0gYm9vbCB1V2lyZWZyYW1lO1xcbnVuaWZvcm0gYm9vbCB1UGVyVmVydGV4Q29sb3I7XFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbERpZmZ1c2U7XFxuXFxudmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxudmFyeWluZyB2ZWMzIHZFeWVWZWM7XFxudmFyeWluZyB2ZWM0IHZDb2xvcjtcXG5cXG52b2lkIG1haW4oKXtcXG5cXG4gICAgdmVjNCB2ZXJ0ZXggPSB1TVZNYXRyaXggKiB2ZWM0KGFfcG9zaXRpb24sIDEuMCk7XFxuXFx0XFxuXFx0XFxuXFx0IGlmKHVXaXJlZnJhbWUpe1xcblxcdCBcXG5cXHQgXFx0aWYodVBlclZlcnRleENvbG9yKXtcXG5cXHQgXFx0XFx0IHZDb2xvcj1hX2NvbG9yO1xcblxcdCBcXHR9ZWxzZXtcXG5cXHQgXFx0XFx0dkNvbG9yPXVNYXRlcmlhbERpZmZ1c2U7XFxuXFx0IFxcdH1cXG5cXHQgXFxuXFx0XFxuXFx0IH1lbHNle1xcblxcdFxcblxcdHZOb3JtYWwgPSB2ZWMzKHVOTWF0cml4ICogdmVjNChhX25vcm1hbCwgMS4wKSk7XFxuXFx0dkV5ZVZlYz0tdmVjMyh2ZXJ0ZXgueHl6KTsgIFxcblxcdFxcblxcdH1cXG5cXHQgXFxuXFx0Z2xfUG9zaXRpb24gPXVQTWF0cml4ICogdmVydGV4O1xcblxcbn1cXG5cXG5cXG5cIjtcclxuICAgICAgICAgICAgVmVydGV4LlBob25nX3Bvc2l0aW9uYWwgPSBcIiNpZmRlZiBHTF9FU1xcbnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcbiNlbmRpZlxcblxcbmF0dHJpYnV0ZSB2ZWMzIGFfcG9zaXRpb247XFxuYXR0cmlidXRlIHZlYzMgYV9ub3JtYWw7XFxuYXR0cmlidXRlIHZlYzQgYV9jb2xvcjtcXG5cXG51bmlmb3JtIG1hdDQgdU1WTWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1UE1hdHJpeDtcXG51bmlmb3JtIG1hdDQgdU5NYXRyaXg7XFxuXFxudW5pZm9ybSB2ZWMzIHVMaWdodFBvc2l0aW9uO1xcblxcbnVuaWZvcm0gYm9vbCB1V2lyZWZyYW1lO1xcbnVuaWZvcm0gYm9vbCB1UGVyVmVydGV4Q29sb3I7XFxudW5pZm9ybSB2ZWM0IHVNYXRlcmlhbERpZmZ1c2U7XFxuXFxudmFyeWluZyB2ZWMzIHZOb3JtYWw7XFxudmFyeWluZyB2ZWMzIHZFeWVWZWM7XFxudmFyeWluZyB2ZWMzIHZMaWdodERpcjtcXG5cXG52YXJ5aW5nIHZlYzQgdkNvbG9yO1xcblxcbnZvaWQgbWFpbigpe1xcblxcbiAgICB2ZWM0IHZlcnRleCA9IHVNVk1hdHJpeCAqIHZlYzQoYV9wb3NpdGlvbiwgMS4wKTtcXG5cXHRcXG5cXHRcXG5cXHQgaWYodVdpcmVmcmFtZSl7XFxuXFx0IFxcblxcdCBcXHRpZih1UGVyVmVydGV4Q29sb3Ipe1xcblxcdCBcXHRcXHQgdkNvbG9yPWFfY29sb3I7XFxuXFx0IFxcdH1lbHNle1xcblxcdCBcXHRcXHR2Q29sb3I9dU1hdGVyaWFsRGlmZnVzZTtcXG5cXHQgXFx0fVxcblxcdCBcXG5cXHRcXG5cXHQgfWVsc2V7XFxuXFx0XFxuXFx0dk5vcm1hbCA9IHZlYzModU5NYXRyaXggKiB2ZWM0KGFfbm9ybWFsLCAxLjApKTtcXG4gICAgdkxpZ2h0RGlyPXZlcnRleC54eXotdUxpZ2h0UG9zaXRpb247ICBcXG5cXHR2RXllVmVjPS12ZWMzKHZlcnRleC54eXopOyAgXFxuXFx0XFxuXFx0fVxcblxcdCBcXG5cXHRnbF9Qb3NpdGlvbiA9dVBNYXRyaXggKiB2ZXJ0ZXg7XFxuXFxufVxcblxcblxcblwiO1xyXG4gICAgICAgICAgICBWZXJ0ZXguVG9vbiA9IFwiI2lmZGVmIEdMX0VTXFxucHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7XFxuI2VuZGlmXFxuXFxuYXR0cmlidXRlIHZlYzMgYV9wb3NpdGlvbjtcXG5hdHRyaWJ1dGUgdmVjMyBhX25vcm1hbDtcXG5hdHRyaWJ1dGUgdmVjNCBhX2NvbG9yO1xcblxcbnVuaWZvcm0gbWF0NCB1TVZNYXRyaXg7XFxudW5pZm9ybSBtYXQ0IHVQTWF0cml4O1xcbnVuaWZvcm0gbWF0NCB1Tk1hdHJpeDtcXG5cXG51bmlmb3JtIGJvb2wgdVdpcmVmcmFtZTtcXG51bmlmb3JtIGJvb2wgdVBlclZlcnRleENvbG9yO1xcbnVuaWZvcm0gdmVjNCB1TWF0ZXJpYWxEaWZmdXNlO1xcblxcbnZhcnlpbmcgdmVjMyB2Tm9ybWFsO1xcbnZhcnlpbmcgdmVjMyB2VmVydGV4O1xcbnZhcnlpbmcgdmVjNCB2Q29sb3I7XFxuXFxudm9pZCBtYWluKCl7XFxuICAgIFxcbiAgICB2ZWM0IG5vcm1hbD0gdU5NYXRyaXggKiB2ZWM0KGFfbm9ybWFsLDEuMCk7XFxuICAgIFxcbiAgICAgaWYodVdpcmVmcmFtZSl7XFxuXFx0IFxcblxcdCBcXHRpZih1UGVyVmVydGV4Q29sb3Ipe1xcblxcdCBcXHRcXHQgdkNvbG9yPWFfY29sb3I7XFxuXFx0IFxcdH1lbHNle1xcblxcdCBcXHRcXHR2Q29sb3I9dU1hdGVyaWFsRGlmZnVzZTtcXG5cXHQgXFx0fVxcblxcdCBcXG5cXHRcXG5cXHQgfWVsc2V7XFxuICAgIFxcbiAgICB2Tm9ybWFsPW5vcm1hbC54eXo7XFxuICAgIHZWZXJ0ZXg9YV9wb3NpdGlvbjtcXG4gICAgfVxcbiAgICBcXG4gICAgZ2xfUG9zaXRpb249dVBNYXRyaXgqdU1WTWF0cml4KnZlYzQoYV9wb3NpdGlvbiwgMS4wKTtcXG4gICAgXFxuICAgIFxcbiAgICBcXG4gICAgXFxuXFxufVwiO1xyXG4gICAgICAgICAgICByZXR1cm4gVmVydGV4O1xyXG4gICAgICAgIH0oKSk7XHJcbiAgICAgICAgU2hhZGVycy5WZXJ0ZXggPSBWZXJ0ZXg7XHJcbiAgICB9KShTaGFkZXJzID0gQmxhemUuU2hhZGVycyB8fCAoQmxhemUuU2hhZGVycyA9IHt9KSk7XHJcbiAgICB2YXIgQW5pbWF0aW9uRW50aXR5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoQW5pbWF0aW9uRW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEFuaW1hdGlvbkVudGl0eShncmFwaF9pZCwgZnJlcXVlbmN5LCB0aW1lcywgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmVxdWVuY3kgPSBmcmVxdWVuY3k7XHJcbiAgICAgICAgICAgIHRoaXMuX2ludGVydmFsX2lkID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB9XHJcbiAgICAgICAgQW5pbWF0aW9uRW50aXR5LnByb3RvdHlwZS5vbkZyYW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBBbmltYXRpb25FbnRpdHkuRWxhcHNlVGltZSA9IHV0aWxzLm5vd0luTWlsbGlzZWNvbmRzKCk7XHJcbiAgICAgICAgICAgIGlmIChBbmltYXRpb25FbnRpdHkuRWxhcHNlVGltZSA8IDUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHZhciBzdGVwcyA9IE1hdGguZmxvb3IoQW5pbWF0aW9uRW50aXR5LkVsYXBzZVRpbWUgLyB0aGlzLl9mcmVxdWVuY3kpO1xyXG4gICAgICAgICAgICB3aGlsZSAoKHN0ZXBzID4gMCkgJiYgKEFuaW1hdGlvbkVudGl0eS5Db3VudCAhPSB0aGlzLl90aW1lcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICBzdGVwcy0tO1xyXG4gICAgICAgICAgICAgICAgQW5pbWF0aW9uRW50aXR5LkNvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKEFuaW1hdGlvbkVudGl0eS5Db3VudCA9PT0gdGhpcy5fdGltZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRpbWUgPSB1dGlscy5ub3dJbk1pbGxpc2Vjb25kcygpO1xyXG4gICAgICAgICAgICB0aGlzLl9pbnRlcnZhbF9pZCA9IHNldEludGVydmFsKHRoaXMub25GcmFtZSwgdGhpcy5fZnJlcXVlbmN5IC8gMTAwMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pbnRlcnZhbF9pZClcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWxfaWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQW5pbWF0aW9uRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkucHJvdG90eXBlLmVuZERyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBbmltYXRpb25FbnRpdHkuQ291bnQgPSAwO1xyXG4gICAgICAgIHJldHVybiBBbmltYXRpb25FbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuQW5pbWF0aW9uRW50aXR5ID0gQW5pbWF0aW9uRW50aXR5O1xyXG4gICAgdmFyIE1lc2hFbnRpdHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhNZXNoRW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIE1lc2hFbnRpdHkoZ3JhcGhfaWQsIG1lc2hmaWxlLCBtYXRlcmlhbGZpbGUsIHRleHR1cmVmaWxlKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX21lc2hmaWxlID0gbWVzaGZpbGUgfHwgbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWxmaWxlID0gbWF0ZXJpYWxmaWxlIHx8IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmVmaWxlID0gdGV4dHVyZWZpbGUgfHwgbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUubG9hZEJ1ZmZlcnMgPSBmdW5jdGlvbiAoZmlsZW5hbWUsIGNiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnMgPSBuZXcgUmVzb3VyY2VzLk1lc2hCdWZmZXJzKHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnMub25sb2FkID0gY2I7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlcnMuc3JjID0gZmlsZW5hbWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5sb2FkVGV4dHVyZSA9IGZ1bmN0aW9uIChmaWxlbmFtZSwgY2IpIHtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IG5ldyBSZXNvdXJjZXMuTWVzaFRleHR1cmUodGhpcy5ncmFwaElEKTtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZS5vbmxvYWQgPSBjYjtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZS5zcmMgPSBmaWxlbmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNZXNoRW50aXR5LnByb3RvdHlwZSwgXCJtYXRlcmlhbFwiLCB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsID0gdjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUubG9hZE1hdGVyaWFsID0gZnVuY3Rpb24gKGZpbGVuYW1lLCBjYikge1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbCA9IG5ldyBSZXNvdXJjZXMuTWVzaE1hdGVyaWFsKHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsLm9ubG9hZCA9IGNiO1xyXG4gICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5zcmMgPSBmaWxlbmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE1lc2hFbnRpdHkucHJvdG90eXBlLmxvYWRNZXNoID0gZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgYXN5bmMud2F0ZXJmYWxsKFtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9tZXNoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRpbmcgQnVmZmVyc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLmxvYWRCdWZmZXJzKHNlbGYuX21lc2hmaWxlLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGVkIEJ1ZmZlcnNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAobmV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuX3RleHR1cmVmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTG9hZGluZyBUZXh0dXJlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZFRleHR1cmUoc2VsZi5fdGV4dHVyZWZpbGUsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2FkZWQgVGV4dHVyZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChuZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZWxmLl9tYXRlcmlhbGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJMb2FkaW5nIE1hdGVyaWFsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYubG9hZE1hdGVyaWFsKHNlbGYuX21hdGVyaWFsZmlsZSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkxvYWRlZCBNYXRlcmlhbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdLCBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNiKVxyXG4gICAgICAgICAgICAgICAgICAgIGNiKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUubG9hZE1lc2hCeU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycyA9IG5ldyBSZXNvdXJjZXMuTWVzaEJ1ZmZlcnModGhpcy5ncmFwaElEKTtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVycy5jcmVhdGVCdWZmZXJzKG9iaik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5sb2FkTWF0ZXJpYWxCeU9iamVjdCA9IGZ1bmN0aW9uIChvYmopIHtcclxuICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwgPSBuZXcgUmVzb3VyY2VzLk1lc2hNYXRlcmlhbCh0aGlzLmdyYXBoSUQpO1xyXG4gICAgICAgICAgICBpZiAob2JqLmFtYmllbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsLmFtYmllbnQgPSBvYmouYW1iaWVudDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqLnNwZWN1bGFyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbC5zcGVjdWxhciA9IG9iai5zcGVjdWxhcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqLmRpZmZ1c2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hdGVyaWFsLmRpZmZ1c2UgPSBvYmouZGlmZnVzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob2JqLnNoaW5pbmVzcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWwuc2hpbmluZXNzID0gb2JqLnNoaW5pbmVzcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTWVzaEVudGl0eS5wcm90b3R5cGUuc2V0TWF0ZXJpYWxVbmlmb3JtcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsLmFtYmllbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdU1hdGVyaWFsQW1iaWVudCA9IHRoaXMuZ2V0VW5pZm9ybShcInVNYXRlcmlhbEFtYmllbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVNYXRlcmlhbEFtYmllbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00ZnYodU1hdGVyaWFsQW1iaWVudCwgdGhpcy5fbWF0ZXJpYWwuYW1iaWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbWF0ZXJpYWwuZGlmZnVzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1TWF0ZXJpYWxEaWZmdXNlID0gdGhpcy5nZXRVbmlmb3JtKFwidU1hdGVyaWFsRGlmZnVzZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodU1hdGVyaWFsRGlmZnVzZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TWF0ZXJpYWxEaWZmdXNlLCB0aGlzLl9tYXRlcmlhbC5kaWZmdXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tYXRlcmlhbC5zcGVjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1TWF0ZXJpYWxTcGVjdWxhciA9IHRoaXMuZ2V0VW5pZm9ybShcInVNYXRlcmlhbFNwZWN1bGFyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1TWF0ZXJpYWxTcGVjdWxhcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TWF0ZXJpYWxTcGVjdWxhciwgdGhpcy5fbWF0ZXJpYWwuc3BlY3VsYXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21hdGVyaWFsLnNoaW5pbmVzcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1U2hpbmluZXNzID0gdGhpcy5nZXRVbmlmb3JtKFwidVNoaW5pbmVzc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodVNoaW5pbmVzcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHVTaGluaW5lc3MsIHRoaXMuX21hdGVyaWFsLnNoaW5pbmVzcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIE1lc2hFbnRpdHkucHJvdG90eXBlLmJlZ2luRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdGhpcy5zZXRNYXRlcmlhbFVuaWZvcm1zKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl9idWZmZXJzLnZibyk7XHJcbiAgICAgICAgICAgIEtldGNoLmVuYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2J1ZmZlcnMubmJvKTtcclxuICAgICAgICAgICAgS2V0Y2guZW5hYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX25vcm1hbFwiKTtcclxuICAgICAgICAgICAgdmFyIGl2Ym8gPSB0aGlzLl9idWZmZXJzLml2Ym87XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIGl2Ym8pO1xyXG4gICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2wuVFJJQU5HTEVTLCBpdmJvLm51bUl0ZW1zLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBNZXNoRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBLZXRjaC5kaXNhYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICBLZXRjaC5kaXNhYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX25vcm1hbFwiKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBNZXNoRW50aXR5O1xyXG4gICAgfShFbnRpdHkpKTtcclxuICAgIEJsYXplLk1lc2hFbnRpdHkgPSBNZXNoRW50aXR5O1xyXG4gICAgdmFyIFRyYW5zZm9ybUVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFRyYW5zZm9ybUVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBUcmFuc2Zvcm1FbnRpdHkoZ3JhcGhfaWQsIHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbikge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gcG9zaXRpb24gfHwgdmVjMy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemUgfHwgdmVjMy5jcmVhdGUoWzEsIDEsIDFdKTtcclxuICAgICAgICAgICAgdGhpcy5fcm90YXRpb24gPSByb3RhdGlvbiB8fCB7IGFuZ2xlOiAwLCBheGlzOiB2ZWMzLmNyZWF0ZSgpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuaWRlbnRpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1hdDQuaWRlbnRpdHkodGhpcy5fbWF0cml4KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2V0TWF0cml4ID0gZnVuY3Rpb24gKG5ld19tYXRyaXgpIHtcclxuICAgICAgICAgICAgdGhpcy5fbWF0cml4ID0gbmV3X21hdHJpeDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUudHJhbnNwb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBtYXQ0LnRyYW5zcG9zZSh0aGlzLl9tYXRyaXgsIHRoaXMuX21hdHJpeCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZSwgXCJwb3NpdGlvblwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2l0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChwb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zZXRBYnNvbHV0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKHgsIHksIHopIHtcclxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBbeCwgeSwgel07XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uICh4LCB5LCB6KSB7XHJcbiAgICAgICAgICAgIGlmICh4ID09PSB2b2lkIDApIHsgeCA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKHkgPT09IHZvaWQgMCkgeyB5ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAoeiA9PT0gdm9pZCAwKSB7IHogPSAwOyB9XHJcbiAgICAgICAgICAgIHZhciBvcGVyYW5kMSA9IHRoaXMuX3Bvc2l0aW9uO1xyXG4gICAgICAgICAgICB2YXIgb3BlcmFuZDIgPSB2ZWMzLmNyZWF0ZShbeCwgeSwgel0pO1xyXG4gICAgICAgICAgICB2ZWMzLmFkZChvcGVyYW5kMSwgb3BlcmFuZDIsIHRoaXMuX3Bvc2l0aW9uKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLCBcInNpemVcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zaXplO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzaXplKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaXplID0gc2l6ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5zZXRTaXplID0gZnVuY3Rpb24gKHgsIHksIHopIHtcclxuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IFt4LCB5LCB6XTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2NhbGUgPSBmdW5jdGlvbiAoeCwgeSwgeikge1xyXG4gICAgICAgICAgICBpZiAoeCA9PT0gdm9pZCAwKSB7IHggPSAwOyB9XHJcbiAgICAgICAgICAgIGlmICh5ID09PSB2b2lkIDApIHsgeSA9IDA7IH1cclxuICAgICAgICAgICAgaWYgKHogPT09IHZvaWQgMCkgeyB6ID0gMDsgfVxyXG4gICAgICAgICAgICB2YXIgb3BlcmFuZDEgPSB0aGlzLl9zaXplO1xyXG4gICAgICAgICAgICB2YXIgb3BlcmFuZDIgPSB2ZWMzLmNyZWF0ZShbeCwgeSwgel0pO1xyXG4gICAgICAgICAgICB2ZWMzLmFkZChvcGVyYW5kMSwgb3BlcmFuZDIsIHRoaXMuX3NpemUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUsIFwicm90YXRpb25cIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yb3RhdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAocm90YXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uID0gcm90YXRpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2V0Um90YXRpb24gPSBmdW5jdGlvbiAoYW5nbGUsIGF4aXMpIHtcclxuICAgICAgICAgICAgaWYgKGFuZ2xlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcm90YXRpb24uYW5nbGUgPSBhbmdsZTtcclxuICAgICAgICAgICAgaWYgKGF4aXMpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb3RhdGlvbi5heGlzID0gYXhpcztcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2V0QW5nbGUgPSBmdW5jdGlvbiAoYW5nbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5fcm90YXRpb24uYW5nbGUgPSBhbmdsZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuc2V0QXhpcyA9IGZ1bmN0aW9uIChheGlzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JvdGF0aW9uLmF4aXMgPSBheGlzO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5yb3RhdGVBbmdsZSA9IGZ1bmN0aW9uIChhbmdsZSkge1xyXG4gICAgICAgICAgICBpZiAoYW5nbGUgPT09IHZvaWQgMCkgeyBhbmdsZSA9IDA7IH1cclxuICAgICAgICAgICAgdGhpcy5fcm90YXRpb24uYW5nbGUgKz0gYW5nbGU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBUcmFuc2Zvcm1FbnRpdHkucHJvdG90eXBlLm1vdmVBeGlzID0gZnVuY3Rpb24gKHgsIHksIHopIHtcclxuICAgICAgICAgICAgaWYgKHggPT09IHZvaWQgMCkgeyB4ID0gMDsgfVxyXG4gICAgICAgICAgICBpZiAoeSA9PT0gdm9pZCAwKSB7IHkgPSAwOyB9XHJcbiAgICAgICAgICAgIGlmICh6ID09PSB2b2lkIDApIHsgeiA9IDA7IH1cclxuICAgICAgICAgICAgdmFyIG9wZXJhbmQxID0gdGhpcy5fcm90YXRpb24uYXhpcztcclxuICAgICAgICAgICAgdmFyIG9wZXJhbmQyID0gdmVjMy5jcmVhdGUoW3gsIHksIHpdKTtcclxuICAgICAgICAgICAgdmVjMy5hZGQob3BlcmFuZDEsIG9wZXJhbmQyLCB0aGlzLl9yb3RhdGlvbi5heGlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFRyYW5zZm9ybUVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKG1hdHJpeFN0YWNrKSB7XHJcbiAgICAgICAgICAgIG1hdHJpeFN0YWNrLnB1c2goKTtcclxuICAgICAgICAgICAgbWF0cml4U3RhY2suTW9kZWxWaWV3KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeCA9IG1hdHJpeFN0YWNrLm12TWF0cml4O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcG9zaXRpb24gIT0gdm9pZCAwKVxyXG4gICAgICAgICAgICAgICAgbWF0NC50cmFuc2xhdGUodGhpcy5fbWF0cml4LCB0aGlzLl9wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zaXplICE9IHZvaWQgMClcclxuICAgICAgICAgICAgICAgIG1hdDQuc2NhbGUodGhpcy5fbWF0cml4LCB0aGlzLl9zaXplKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3JvdGF0aW9uICE9IHZvaWQgMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJhZCA9IHRoaXMuX3JvdGF0aW9uLmFuZ2xlICogTWF0aC5QSSAvIDE4MDtcclxuICAgICAgICAgICAgICAgIG1hdDQucm90YXRlKHRoaXMuX21hdHJpeCwgcmFkLCB0aGlzLl9yb3RhdGlvbi5heGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBtYXRyaXhTdGFjay5zZXRVcCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgVHJhbnNmb3JtRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKG1hdHJpeFN0YWNrKSB7XHJcbiAgICAgICAgICAgIG1hdHJpeFN0YWNrLnBvcCgpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFRyYW5zZm9ybUVudGl0eTtcclxuICAgIH0oRW50aXR5KSk7XHJcbiAgICBCbGF6ZS5UcmFuc2Zvcm1FbnRpdHkgPSBUcmFuc2Zvcm1FbnRpdHk7XHJcbiAgICB2YXIgTGlnaHRFbnRpdHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhMaWdodEVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBMaWdodEVudGl0eShncmFwaF9pZCwgYW1iaWVudCwgZGlmZnVzZSwgcG9zaXRpb24sIHNwZWN1bGFyLCBkaXJlY3Rpb24sIGN1dG9mZikge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FtYmllbnQgPSBhbWJpZW50ID8gdmVjNC5jcmVhdGUoYW1iaWVudCkgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9kaWZmdXNlID0gZGlmZnVzZSA/IHZlYzQuY3JlYXRlKGRpZmZ1c2UpIDogbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBwb3NpdGlvbiA/IHZlYzMuY3JlYXRlKHBvc2l0aW9uKSA6IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3NwZWN1bGFyID0gc3BlY3VsYXIgPyB2ZWM0LmNyZWF0ZShzcGVjdWxhcikgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9kaXJlY3Rpb24gPSBkaXJlY3Rpb24gPyB2ZWMzLmNyZWF0ZShkaXJlY3Rpb24pIDogbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fY3V0b2ZmID0gY3V0b2ZmIHx8IDAuMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExpZ2h0RW50aXR5LnByb3RvdHlwZSwgXCJhbWJpZW50XCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYW1iaWVudDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYW1iaWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYW1iaWVudCA9IHV0aWxzLm5vcm1hbGl6ZU5hTih2ZWM0LmNyZWF0ZShhbWJpZW50KSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaWdodEVudGl0eS5wcm90b3R5cGUsIFwiZGlmZnVzZVwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RpZmZ1c2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGRpZmZ1c2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RpZmZ1c2UgPSB1dGlscy5ub3JtYWxpemVOYU4odmVjNC5jcmVhdGUoZGlmZnVzZSkpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGlnaHRFbnRpdHkucHJvdG90eXBlLCBcInNwZWN1bGFyXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc3BlY3VsYXI7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHNwZWN1bGFyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGVjdWxhciA9IHV0aWxzLm5vcm1hbGl6ZU5hTih2ZWM0LmNyZWF0ZShzcGVjdWxhcikpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTGlnaHRFbnRpdHkucHJvdG90eXBlLCBcInBvc2l0aW9uXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlmZnVzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAocG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc2l0aW9uID0gdXRpbHMubm9ybWFsaXplTmFOKHZlYzMuY3JlYXRlKHBvc2l0aW9uKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShMaWdodEVudGl0eS5wcm90b3R5cGUsIFwiZGlyZWN0aW9uXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGlyZWN0aW9uO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RpcmVjdGlvbiA9IHV0aWxzLm5vcm1hbGl6ZU5hTih2ZWMzLmNyZWF0ZShkaXJlY3Rpb24pKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExpZ2h0RW50aXR5LnByb3RvdHlwZSwgXCJjdXRPZmZcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXRvZmY7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGN1dG9mZikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3V0b2ZmID0gY3V0b2ZmO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBMaWdodEVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYW1iaWVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVMaWdodEFtYmllbnQgPSB0aGlzLmdldFVuaWZvcm0oXCJ1TGlnaHRBbWJpZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVMaWdodEFtYmllbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TGlnaHRBbWJpZW50LCB0aGlzLl9hbWJpZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGlmZnVzZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVMaWdodERpZmZ1c2UgPSB0aGlzLmdldFVuaWZvcm0oXCJ1TGlnaHREaWZmdXNlXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVMaWdodERpZmZ1c2UpXHJcbiAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TGlnaHREaWZmdXNlLCB0aGlzLl9kaWZmdXNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fc3BlY3VsYXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB1TGlnaHRTcGVjdWxhciA9IHRoaXMuZ2V0VW5pZm9ybShcInVMaWdodFNwZWN1bGFyXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVMaWdodFNwZWN1bGFyKVxyXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00ZnYodUxpZ2h0U3BlY3VsYXIsIHRoaXMuX3NwZWN1bGFyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fcG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciB1TGlnaHRQb3NpdGlvbiA9IHRoaXMuZ2V0VW5pZm9ybShcInVMaWdodFBvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVMaWdodFBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodUxpZ2h0UG9zaXRpb24sIHRoaXMuX3Bvc2l0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdURpcmVjdGlvbiA9IHRoaXMuZ2V0VW5pZm9ybShcInVMaWdodERpcmVjdGlvblwiKTtcclxuICAgICAgICAgICAgICAgIGlmICh1RGlyZWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0zZnYodURpcmVjdGlvbiwgdGhpcy5fZGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY3V0b2ZmKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdUN1dE9mZiA9IHRoaXMuZ2V0VW5pZm9ybShcInVDdXRPZmZcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodUN1dE9mZilcclxuICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodUN1dE9mZiwgdGhpcy5fY3V0b2ZmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRFbnRpdHkucHJvdG90eXBlLmVuZERyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTGlnaHRFbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuTGlnaHRFbnRpdHkgPSBMaWdodEVudGl0eTtcclxuICAgIHZhciBEaWZmdXNlRW50aXR5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoRGlmZnVzZUVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBEaWZmdXNlRW50aXR5KGdyYXBoX2lkLCB2KSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB2O1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGlmZnVzZUVudGl0eS5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB2O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBEaWZmdXNlRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHZhciB1TWF0ZXJpYWxEaWZmdXNlID0gdGhpcy5nZXRVbmlmb3JtKFwidU1hdGVyaWFsRGlmZnVzZVwiKTtcclxuICAgICAgICAgICAgaWYgKHVNYXRlcmlhbERpZmZ1c2UpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVNYXRlcmlhbERpZmZ1c2UsIHRoaXMuX3ZhbHVlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIERpZmZ1c2VFbnRpdHkucHJvdG90eXBlLmVuZERyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gRGlmZnVzZUVudGl0eTtcclxuICAgIH0oRW50aXR5KSk7XHJcbiAgICBCbGF6ZS5EaWZmdXNlRW50aXR5ID0gRGlmZnVzZUVudGl0eTtcclxuICAgIHZhciBQYXJ0aWNsZUVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFBhcnRpY2xlRW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIFBhcnRpY2xlRW50aXR5KGdyYXBoX2lkLCBwb2ludFNpemUpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9wb2ludFNpemUgPSBwb2ludFNpemUgfHwgMTtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZV9pZCA9IFwiXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFBhcnRpY2xlRW50aXR5LnByb3RvdHlwZS5jb25maWd1cmUgPSBmdW5jdGlvbiAoZGF0YV9tZXNoLCBkYXRhX3RleHR1cmUpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl9idWZmZXIpO1xyXG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheShkYXRhX21lc2gpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5fbnVtSXRlbXMgPSBkYXRhX21lc2gubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlX2lkID0gdXRpbHMudXVpZChcIlRleHR1cmVcIik7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmUgPSBXZWJHTFV0aWxzLmNyZWF0ZVRleHR1cmUoZ2wsIGRhdGFfdGV4dHVyZSk7XHJcbiAgICAgICAgICAgIEtldGNoLmFkZFRleHR1cmUodGhpcy5ncmFwaElELCB0aGlzLl90ZXh0dXJlX2lkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFBhcnRpY2xlRW50aXR5LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fYnVmZmVyKTtcclxuICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoZGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICB0aGlzLl9udW1JdGVtcyA9IGRhdGEubGVuZ3RoO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFBhcnRpY2xlRW50aXR5LnByb3RvdHlwZSwgXCJ0ZXh0dXJlSURcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0dXJlX2lkO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUGFydGljbGVFbnRpdHkucHJvdG90eXBlLCBcInBvaW50U2l6ZVwiLCB7XHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BvaW50U2l6ZSA9IHY7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFBhcnRpY2xlRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHZhciB1UG9pbnRTaXplID0gdGhpcy5nZXRVbmlmb3JtKFwidVBvaW50U2l6ZVwiKTtcclxuICAgICAgICAgICAgaWYgKHVQb2ludFNpemUpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodVBvaW50U2l6ZSwgdGhpcy5fcG9pbnRTaXplKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2J1ZmZlcik7XHJcbiAgICAgICAgICAgIEtldGNoLmVuYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgS2V0Y2guYWN0aXZlVGV4dHVyZSh0aGlzLmdyYXBoSUQsIHRoaXMuX3RleHR1cmVfaWQsIHRoaXMuX3RleHR1cmUpO1xyXG4gICAgICAgICAgICBnbC5kcmF3QXJyYXlzKGdsLlBPSU5UUywgMCwgdGhpcy5fbnVtSXRlbXMgLyAzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFBhcnRpY2xlRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBLZXRjaC5kaXNhYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gUGFydGljbGVFbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuUGFydGljbGVFbnRpdHkgPSBQYXJ0aWNsZUVudGl0eTtcclxuICAgIHZhciBMaWdodEFycmF5RW50aXR5ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoTGlnaHRBcnJheUVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBMaWdodEFycmF5RW50aXR5KGdyYXBoX2lkKSB7XHJcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMsIGdyYXBoX2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fbGlnaHRzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIExpZ2h0QXJyYXlFbnRpdHkucHJvdG90eXBlLmFkZExpZ2h0ID0gZnVuY3Rpb24gKGxpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpZ2h0cy5wdXNoKGxpZ2h0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIExpZ2h0QXJyYXlFbnRpdHkucHJvdG90eXBlLmdldEFycmF5c09iamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpZ2h0cy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbWJpZW50ID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaXRlbS5hbWJpZW50KTtcclxuICAgICAgICAgICAgICAgIHZhciBkaWZmdXNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaXRlbS5kaWZmdXNlKTtcclxuICAgICAgICAgICAgICAgIHZhciBzcGVjdWxhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGl0ZW0uc3BlY3VsYXIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGl0ZW0uZGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIHByZXYuYW1iaWVudCA9IHByZXYuYW1iaWVudC5jb25jYXQoYW1iaWVudCk7XHJcbiAgICAgICAgICAgICAgICBwcmV2LmRpZmZ1c2UgPSBwcmV2LmRpZmZ1c2UuY29uY2F0KGRpZmZ1c2UpO1xyXG4gICAgICAgICAgICAgICAgcHJldi5zcGVjdWxhciA9IHByZXYuc3BlY3VsYXIuY29uY2F0KHNwZWN1bGFyKTtcclxuICAgICAgICAgICAgICAgIHByZXYuZGlyZWN0aW9uID0gcHJldi5kaXJlY3Rpb24uY29uY2F0KGRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBwcmV2LmN1dG9mZiA9IHByZXYuY3V0b2ZmLmNvbmNhdChpdGVtLmN1dG9mZik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJldjtcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgYW1iaWVudDogW10sXHJcbiAgICAgICAgICAgICAgICBkaWZmdXNlOiBbXSxcclxuICAgICAgICAgICAgICAgIHNwZWN1bGFyOiBbXSxcclxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogW10sXHJcbiAgICAgICAgICAgICAgICBjdXRvZmY6IFtdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTGlnaHRBcnJheUVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGlnaHRzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBsaWdodHMgPSB0aGlzLmdldEFycmF5c09iamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxpZ2h0cy5hbWJpZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVMaWdodEFtYmllbnQgPSB0aGlzLmdldFVuaWZvcm0oXCJ1TGlnaHRBbWJpZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1TGlnaHRBbWJpZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVMaWdodEFtYmllbnQsIGxpZ2h0cy5hbWJpZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaWdodHMuZGlmZnVzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1TGlnaHREaWZmdXNlID0gdGhpcy5nZXRVbmlmb3JtKFwidUxpZ2h0RGlmZnVzZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodUxpZ2h0RGlmZnVzZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TGlnaHREaWZmdXNlLCBsaWdodHMuZGlmZnVzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobGlnaHRzLnNwZWN1bGFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVMaWdodFNwZWN1bGFyID0gdGhpcy5nZXRVbmlmb3JtKFwidUxpZ2h0U3BlY3VsYXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVMaWdodFNwZWN1bGFyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtNGZ2KHVMaWdodFNwZWN1bGFyLCBsaWdodHMuc3BlY3VsYXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpZ2h0cy5kaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdURpcmVjdGlvbiA9IHRoaXMuZ2V0VW5pZm9ybShcInVMaWdodERpcmVjdGlvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodURpcmVjdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudW5pZm9ybTNmdih1RGlyZWN0aW9uLCBsaWdodHMuZGlyZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsaWdodHMuY3V0b2ZmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVDdXRPZmYgPSB0aGlzLmdldFVuaWZvcm0oXCJ1Q3V0T2ZmXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1Q3V0T2ZmKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWYodUN1dE9mZiwgbGlnaHRzLmN1dG9mZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBMaWdodEFycmF5RW50aXR5O1xyXG4gICAgfShFbnRpdHkpKTtcclxuICAgIEJsYXplLkxpZ2h0QXJyYXlFbnRpdHkgPSBMaWdodEFycmF5RW50aXR5O1xyXG4gICAgdmFyIENhbWVyYUVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKENhbWVyYUVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBDYW1lcmFFbnRpdHkoZ3JhcGhfaWQsIHR5cGUpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZSB8fCBDQU1FUkFfVFlQRS5PUkJJVElORztcclxuICAgICAgICAgICAgdGhpcy5fY21hdHJpeCA9IG1hdDQuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIG1hdDQuaWRlbnRpdHkodGhpcy5fY21hdHJpeCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3VwID0gdmVjMy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fcmlnaHQgPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9ub3JtYWwgPSB2ZWMzLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9wb3NpdGlvbiA9IHZlYzMuY3JlYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2F6aW11dGggPSAwLjA7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZXZhdGlvbiA9IDAuMDtcclxuICAgICAgICAgICAgdGhpcy5fc3RlcHMgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2FtZXJhRW50aXR5LnByb3RvdHlwZSwgXCJ0eXBlXCIsIHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW1lcmFFbnRpdHkucHJvdG90eXBlLCBcInBvc2l0aW9uXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcG9zaXRpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKHBvcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zaXRpb24gPSBwb3M7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW1lcmFFbnRpdHkucHJvdG90eXBlLCBcImF6aW11dGhcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hemltdXRoO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChheikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBfYXogPSBheiAtIHRoaXMuX2F6aW11dGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUF6aW11dGgodGVtcF9heik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIENhbWVyYUVudGl0eS5wcm90b3R5cGUuY2hhbmdlQXppbXV0aCA9IGZ1bmN0aW9uIChheikge1xyXG4gICAgICAgICAgICB0aGlzLl9hemltdXRoICs9IGF6O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYXppbXV0aCA+IDM2MCB8fCB0aGlzLl9hemltdXRoIDwgLTM2MCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXppbXV0aCA9IHRoaXMuX2F6aW11dGggJSAzNjA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW1lcmFFbnRpdHkucHJvdG90eXBlLCBcImVsZXZhdGlvblwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZXZhdGlvbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZW1wX2VsID0gZWwgLSB0aGlzLl9lbGV2YXRpb247XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZUVsZXZhdGlvbih0ZW1wX2VsKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgQ2FtZXJhRW50aXR5LnByb3RvdHlwZS5jaGFuZ2VFbGV2YXRpb24gPSBmdW5jdGlvbiAoZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5fZWxldmF0aW9uICs9IGVsO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZWxldmF0aW9uID4gMzYwIHx8IHRoaXMuX2VsZXZhdGlvbiA8IC0zNjApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZXZhdGlvbiA9IHRoaXMuX2VsZXZhdGlvbiAlIDM2MDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KENhbWVyYUVudGl0eS5wcm90b3R5cGUsIFwiem9vbVwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0ZXBzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChvZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwID0gdmVjMy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgICAgIHZhciBuID0gdmVjMy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgICAgIHAgPSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBvZmZzZXQgLSB0aGlzLl9zdGVwcztcclxuICAgICAgICAgICAgICAgIHZlYzMubm9ybWFsaXplKHRoaXMuX25vcm1hbCwgbik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3X3Bvc2l0aW9uID0gdmVjMy5jcmVhdGUoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90eXBlID09PSBDQU1FUkFfVFlQRS5UUkFDS0lORykge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld19wb3NpdGlvblswXSA9IHBbMF0gLSBzdGVwICogblswXTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdfcG9zaXRpb25bMV0gPSBwWzFdIC0gc3RlcCAqIG5bMV07XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3X3Bvc2l0aW9uWzJdID0gcFsyXSAtIHN0ZXAgKiBuWzJdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3X3Bvc2l0aW9uWzBdID0gcFswXTtcclxuICAgICAgICAgICAgICAgICAgICBuZXdfcG9zaXRpb25bMV0gPSBwWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld19wb3NpdGlvblsyXSA9IHBbMl0gLSBzdGVwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5ld19wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0ZXBzID0gb2Zmc2V0O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBDYW1lcmFFbnRpdHkucHJvdG90eXBlLmNhbGN1bGF0ZU9yaWVudGF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgbSA9IHRoaXMuX2NtYXRyaXg7XHJcbiAgICAgICAgICAgIG1hdDQubXVsdGlwbHlWZWM0KG0sIFsxLCAwLCAwLCAwXSwgdGhpcy5fcmlnaHQpO1xyXG4gICAgICAgICAgICBtYXQ0Lm11bHRpcGx5VmVjNChtLCBbMCwgMSwgMCwgMF0sIHRoaXMuX3VwKTtcclxuICAgICAgICAgICAgbWF0NC5tdWx0aXBseVZlYzQobSwgWzAsIDAsIDEsIDBdLCB0aGlzLl9ub3JtYWwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgQ2FtZXJhRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1hdDQuaWRlbnRpdHkodGhpcy5fY21hdHJpeCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsY3VsYXRlT3JpZW50YXRpb24oKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09IENBTUVSQV9UWVBFLlRSQUNLSU5HKSB7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LnRyYW5zbGF0ZSh0aGlzLl9jbWF0cml4LCB0aGlzLl9wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBtYXQ0LnJvdGF0ZVkodGhpcy5fY21hdHJpeCwgdGhpcy5fYXppbXV0aCAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICAgICAgICAgICAgbWF0NC5yb3RhdGVYKHRoaXMuX2NtYXRyaXgsIHRoaXMuX2VsZXZhdGlvbiAqIE1hdGguUEkgLyAxODApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbWF0NC5yb3RhdGVZKHRoaXMuX2NtYXRyaXgsIHRoaXMuX2F6aW11dGggKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgICAgICAgIG1hdDQucm90YXRlWCh0aGlzLl9jbWF0cml4LCB0aGlzLl9lbGV2YXRpb24gKiBNYXRoLlBJIC8gMTgwKTtcclxuICAgICAgICAgICAgICAgIG1hdDQudHJhbnNsYXRlKHRoaXMuX2NtYXRyaXgsIHRoaXMuX3Bvc2l0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZU9yaWVudGF0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl90eXBlID09PSBDQU1FUkFfVFlQRS5UUkFDS0lORykge1xyXG4gICAgICAgICAgICAgICAgbWF0NC5tdWx0aXBseVZlYzQodGhpcy5fY21hdHJpeCwgWzAsIDAsIDAsIDFdLCB0aGlzLl9wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDYW1lcmFFbnRpdHkucHJvdG90eXBlLCBcIm1vZGVsVmlld1wiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSBtYXQ0LmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgbWF0NC5pbnZlcnNlKHRoaXMuX2NtYXRyaXgsIG0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIENhbWVyYUVudGl0eS5wcm90b3R5cGUuZW5kRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBDYW1lcmFFbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuQ2FtZXJhRW50aXR5ID0gQ2FtZXJhRW50aXR5O1xyXG4gICAgdmFyIEF4aXNFbnRpdHkgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhBeGlzRW50aXR5LCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEF4aXNFbnRpdHkoZ3JhcGhfaWQsIGQpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICBkID0gZCB8fCAxMDA7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZlcnRpY2VzID0gWzAuMCwgMC4wLCAwLjAsIGQsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGQsIDAuMCwgMC4wLCAwLjAsIDAuMCwgMC4wLCAwLjAsIGRdO1xyXG4gICAgICAgICAgICB0aGlzLl9pbmRpY2VzID0gWzAsIDEsIDIsIDMsIDQsIDVdO1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xvcnMgPSBbMSwgMSwgMCwgMSwgMSwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMSwgMCwgMCwgMSwgMSwgMCwgMCwgMSwgMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEF4aXNFbnRpdHkucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZibyA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvKTtcclxuICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodGhpcy5fdmVydGljZXMpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2libyA9IGdsLmNyZWF0ZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9pYm8pO1xyXG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBuZXcgVWludDE2QXJyYXkodGhpcy5faW5kaWNlcyksIGdsLlNUQVRJQ19EUkFXKTtcclxuICAgICAgICAgICAgdGhpcy5fY2JvID0gZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl9jYm8pO1xyXG4gICAgICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh0aGlzLl9jb2xvcnMpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBBeGlzRW50aXR5LnByb3RvdHlwZS5iZWdpbkRyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHZhciB1V2lyZWZyYW1lID0gdGhpcy5nZXRVbmlmb3JtKFwidVdpcmVmcmFtZVwiKTtcclxuICAgICAgICAgICAgaWYgKHVXaXJlZnJhbWUpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkodVdpcmVmcmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHZhciB1UGVyVmVydGV4Q29sb3IgPSB0aGlzLmdldFVuaWZvcm0oXCJ1UGVyVmVydGV4Q29sb3JcIik7XHJcbiAgICAgICAgICAgIGlmICh1UGVyVmVydGV4Q29sb3IpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkodVBlclZlcnRleENvbG9yLCB0cnVlKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX3Zibyk7XHJcbiAgICAgICAgICAgIEtldGNoLmVuYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2Nibyk7XHJcbiAgICAgICAgICAgIEtldGNoLmVuYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9jb2xvclwiLCB7IHNpemU6IDQgfSk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIHRoaXMuX2libyk7XHJcbiAgICAgICAgICAgIGdsLmRyYXdFbGVtZW50cyhnbC5MSU5FUywgdGhpcy5faW5kaWNlcy5sZW5ndGgsIGdsLlVOU0lHTkVEX1NIT1JULCAwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEF4aXNFbnRpdHkucHJvdG90eXBlLmVuZERyYXcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHZhciB1V2lyZWZyYW1lID0gdGhpcy5nZXRVbmlmb3JtKFwidVdpcmVmcmFtZVwiKTtcclxuICAgICAgICAgICAgaWYgKHVXaXJlZnJhbWUpXHJcbiAgICAgICAgICAgICAgICBnbC51bmlmb3JtMWkodVdpcmVmcmFtZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB2YXIgdVBlclZlcnRleENvbG9yID0gdGhpcy5nZXRVbmlmb3JtKFwidVBlclZlcnRleENvbG9yXCIpO1xyXG4gICAgICAgICAgICBpZiAodVBlclZlcnRleENvbG9yKVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFpKHVQZXJWZXJ0ZXhDb2xvciwgZmFsc2UpO1xyXG4gICAgICAgICAgICBLZXRjaC5kaXNhYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICBLZXRjaC5kaXNhYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX2NvbG9yXCIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIEF4aXNFbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuQXhpc0VudGl0eSA9IEF4aXNFbnRpdHk7XHJcbiAgICB2YXIgR3JpZEVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKEdyaWRFbnRpdHksIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gR3JpZEVudGl0eShncmFwaF9pZCwgZCwgZSkge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2RpbWVzaW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIGRpbTogZCB8fCA1MCwgbGluZXM6IGUgfHwgNTBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgR3JpZEVudGl0eS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdGhpcy5idWlsZCgpO1xyXG4gICAgICAgICAgICB0aGlzLl92Ym8gPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX3Zibyk7XHJcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRoaXMuX3ZlcnRpY2VzKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICB0aGlzLl9pYm8gPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5faWJvKTtcclxuICAgICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbmV3IFVpbnQxNkFycmF5KHRoaXMuX2luZGljZXMpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBHcmlkRW50aXR5LnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGluYyA9IDIgKiB0aGlzLl9kaW1lc2lvbnMuZGltIC8gdGhpcy5fZGltZXNpb25zLmxpbmVzO1xyXG4gICAgICAgICAgICB2YXIgdiA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgaSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8PSB0aGlzLl9kaW1lc2lvbnMubGluZXM7IGwrKykge1xyXG4gICAgICAgICAgICAgICAgdls2ICogbF0gPSAtdGhpcy5fZGltZXNpb25zLmRpbTtcclxuICAgICAgICAgICAgICAgIHZbNiAqIGwgKyAxXSA9IC0wLjU7XHJcbiAgICAgICAgICAgICAgICB2WzYgKiBsICsgMl0gPSAtdGhpcy5fZGltZXNpb25zLmRpbSArIChsICogaW5jKTtcclxuICAgICAgICAgICAgICAgIHZbNiAqIGwgKyAzXSA9IHRoaXMuX2RpbWVzaW9ucy5kaW07XHJcbiAgICAgICAgICAgICAgICB2WzYgKiBsICsgNF0gPSAtMC41O1xyXG4gICAgICAgICAgICAgICAgdls2ICogbCArIDVdID0gLXRoaXMuX2RpbWVzaW9ucy5kaW0gKyAobCAqIGluYyk7XHJcbiAgICAgICAgICAgICAgICB2WzYgKiAodGhpcy5fZGltZXNpb25zLmxpbmVzICsgMSkgKyA2ICogbF0gPSAtdGhpcy5fZGltZXNpb25zLmRpbSArIChsICogaW5jKTtcclxuICAgICAgICAgICAgICAgIHZbNiAqICh0aGlzLl9kaW1lc2lvbnMubGluZXMgKyAxKSArIDYgKiBsICsgMV0gPSAtMC41O1xyXG4gICAgICAgICAgICAgICAgdls2ICogKHRoaXMuX2RpbWVzaW9ucy5saW5lcyArIDEpICsgNiAqIGwgKyAyXSA9IC10aGlzLl9kaW1lc2lvbnMuZGltO1xyXG4gICAgICAgICAgICAgICAgdls2ICogKHRoaXMuX2RpbWVzaW9ucy5saW5lcyArIDEpICsgNiAqIGwgKyAzXSA9IC10aGlzLl9kaW1lc2lvbnMuZGltICsgKGwgKiBpbmMpO1xyXG4gICAgICAgICAgICAgICAgdls2ICogKHRoaXMuX2RpbWVzaW9ucy5saW5lcyArIDEpICsgNiAqIGwgKyA0XSA9IC0wLjU7XHJcbiAgICAgICAgICAgICAgICB2WzYgKiAodGhpcy5fZGltZXNpb25zLmxpbmVzICsgMSkgKyA2ICogbCArIDVdID0gdGhpcy5fZGltZXNpb25zLmRpbTtcclxuICAgICAgICAgICAgICAgIGlbMiAqIGxdID0gMiAqIGw7XHJcbiAgICAgICAgICAgICAgICBpWzIgKiBsICsgMV0gPSAyICogbCArIDE7XHJcbiAgICAgICAgICAgICAgICBpWzIgKiAodGhpcy5fZGltZXNpb25zLmxpbmVzICsgMSkgKyAyICogbF0gPSAyICogKHRoaXMuX2RpbWVzaW9ucy5saW5lcyArIDEpICsgMiAqIGw7XHJcbiAgICAgICAgICAgICAgICBpWzIgKiAodGhpcy5fZGltZXNpb25zLmxpbmVzICsgMSkgKyAyICogbCArIDFdID0gMiAqICh0aGlzLl9kaW1lc2lvbnMubGluZXMgKyAxKSArIDIgKiBsICsgMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl92ZXJ0aWNlcyA9IHY7XHJcbiAgICAgICAgICAgIHRoaXMuX2luZGljZXMgPSBpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgR3JpZEVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB2YXIgdVdpcmVmcmFtZSA9IHRoaXMuZ2V0VW5pZm9ybShcInVXaXJlZnJhbWVcIik7XHJcbiAgICAgICAgICAgIGlmICh1V2lyZWZyYW1lKVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFpKHVXaXJlZnJhbWUsIHRydWUpO1xyXG4gICAgICAgICAgICB2YXIgdU1hdGVyaWFsRGlmZnVzZSA9IHRoaXMuZ2V0VW5pZm9ybShcInVNYXRlcmlhbERpZmZ1c2VcIik7XHJcbiAgICAgICAgICAgIGlmICh1TWF0ZXJpYWxEaWZmdXNlKVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTRmdih1TWF0ZXJpYWxEaWZmdXNlLCBbMC43LCAwLjcsIDAuNywgMV0pO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGhpcy5fdmJvKTtcclxuICAgICAgICAgICAgS2V0Y2guZW5hYmxlQXR0cmliKHRoaXMuZ3JhcGhJRCwgXCJhX3Bvc2l0aW9uXCIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9pYm8pO1xyXG4gICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoZ2wuTElORVMsIHRoaXMuX2luZGljZXMubGVuZ3RoLCBnbC5VTlNJR05FRF9TSE9SVCwgMCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBHcmlkRW50aXR5LnByb3RvdHlwZS5lbmREcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB2YXIgdVdpcmVmcmFtZSA9IHRoaXMuZ2V0VW5pZm9ybShcInVXaXJlZnJhbWVcIik7XHJcbiAgICAgICAgICAgIGlmICh1V2lyZWZyYW1lKVxyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFpKHVXaXJlZnJhbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgS2V0Y2guZGlzYWJsZUF0dHJpYih0aGlzLmdyYXBoSUQsIFwiYV9wb3NpdGlvblwiKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBHcmlkRW50aXR5O1xyXG4gICAgfShFbnRpdHkpKTtcclxuICAgIEJsYXplLkdyaWRFbnRpdHkgPSBHcmlkRW50aXR5O1xyXG4gICAgdmFyIFNlbGVjdEVudGl0eSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XHJcbiAgICAgICAgX19leHRlbmRzKFNlbGVjdEVudGl0eSwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBTZWxlY3RFbnRpdHkoZ3JhcGhfaWQsIGRhdGEpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9jb2xvciA9IHRoaXMuZ2VuZXJhdGVVbmlxdWVDb2xvcigpO1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNlbGVjdEVudGl0eS5wcm90b3R5cGUsIFwiZGF0YVwiLCB7XHJcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTZWxlY3RFbnRpdHkucHJvdG90eXBlLCBcImNvbG9yXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29sb3I7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFNlbGVjdEVudGl0eS5wcm90b3R5cGUuZ2VuZXJhdGVVbmlxdWVDb2xvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGNvbG9yO1xyXG4gICAgICAgICAgICB2YXIgY29udGFpbnMgPSAoZnVuY3Rpb24gKGNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gS2V0Y2guZ2V0U2VsZWN0QnlDb2xvcih0aGlzLmdyYXBoSUQsIGNvbG9yKSAhPSB2b2lkIDA7XHJcbiAgICAgICAgICAgIH0pLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIHZhciBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHdoaWxlIChmb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgY29sb3IgPSBbTnVtYmVyKE1hdGgucmFuZG9tKCkudG9GaXhlZCgyKSksIE51bWJlcihNYXRoLnJhbmRvbSgpLnRvRml4ZWQoMikpLCBOdW1iZXIoTWF0aC5yYW5kb20oKS50b0ZpeGVkKDIpKSwgMS4wXTtcclxuICAgICAgICAgICAgICAgIGZvdW5kID0gY29udGFpbnMoY29sb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNlbGVjdEVudGl0eS5wcm90b3R5cGUuYmVnaW5EcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAoS2V0Y2guaXNPZmZTY3JlZW4odGhpcy5ncmFwaElEKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgICAgIHZhciB1U2VsZWN0Q29sb3IgPSB0aGlzLmdldFVuaWZvcm0oXCJ1U2VsZWN0Q29sb3JcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodVNlbGVjdENvbG9yKVxyXG4gICAgICAgICAgICAgICAgICAgIGdsLnVuaWZvcm00ZnYodVNlbGVjdENvbG9yLCB0aGlzLl9jb2xvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFNlbGVjdEVudGl0eS5wcm90b3R5cGUuZW5kRHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBTZWxlY3RFbnRpdHk7XHJcbiAgICB9KEVudGl0eSkpO1xyXG4gICAgQmxhemUuU2VsZWN0RW50aXR5ID0gU2VsZWN0RW50aXR5O1xyXG4gICAgdmFyIFNlbGVjdG9yID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoU2VsZWN0b3IsIF9zdXBlcik7XHJcbiAgICAgICAgZnVuY3Rpb24gU2VsZWN0b3IoZ3JhcGhfaWQsIGRpbWVuc2lvbnMpIHtcclxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgZ3JhcGhfaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9kaW1lbnNpb25zID0gZGltZW5zaW9ucztcclxuICAgICAgICAgICAgdGhpcy5fZnJhbWVidWZmZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJidWZmZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5jb25maWd1cmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgU2VsZWN0b3IucHJvdG90eXBlLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdGhpcy5fdGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcclxuICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XHJcbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgdGhpcy5fZGltZW5zaW9ucy53aWR0aCwgdGhpcy5fZGltZW5zaW9ucy5oZWlnaHQsIDAsIGdsLlJHQkEsIGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJidWZmZXIgPSBnbC5jcmVhdGVSZW5kZXJidWZmZXIoKTtcclxuICAgICAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIHRoaXMuX3JlbmRlcmJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBnbC5ERVBUSF9DT01QT05FTlQxNiwgdGhpcy5fZGltZW5zaW9ucy53aWR0aCwgdGhpcy5fZGltZW5zaW9ucy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5fZnJhbWVidWZmZXIpO1xyXG4gICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHRoaXMuX3RleHR1cmUsIDApO1xyXG4gICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCB0aGlzLl9yZW5kZXJidWZmZXIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgICAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2VsZWN0b3IucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgIEtldGNoLmZpbGxTZWxlY3RvckJ1ZmZlcih0aGlzLmdyYXBoSUQsIG9iaik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTZWxlY3Rvci5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIEtldGNoLmNsZWFyU2VsZWN0b3JCdWZmZXIodGhpcy5ncmFwaElEKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNlbGVjdG9yLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gKHBvcykge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB2YXIgcmVhZG91dCA9IG5ldyBVaW50OEFycmF5KDEgKiAxICogNCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5fZnJhbWVidWZmZXIpO1xyXG4gICAgICAgICAgICBnbC5yZWFkUGl4ZWxzKHBvcy54LCBwb3MueSwgMSwgMSwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgcmVhZG91dCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgIHZhciBmaXhlZCA9IFtdLnNsaWNlLmNhbGwocmVhZG91dCkubWFwKGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCgoaXRlbSAvIDI1NSkudG9GaXhlZCgyKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB2YXIgb2JqID0gS2V0Y2guZ2V0U2VsZWN0QnlDb2xvcih0aGlzLmdyYXBoSUQsIGZpeGVkKTtcclxuICAgICAgICAgICAgcmV0dXJuIG9iaiA/IG9iai5kYXRhIDogdm9pZCAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2VsZWN0b3IucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChkcmF3KSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5fZnJhbWVidWZmZXIpO1xyXG4gICAgICAgICAgICB2YXIgdU9mZnNjcmVlbiA9IHRoaXMuZ2V0VW5pZm9ybShcInVPZmZzY3JlZW5cIik7XHJcbiAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh1T2Zmc2NyZWVuLCB0cnVlKTtcclxuICAgICAgICAgICAgS2V0Y2guZW5hYmxlT2ZmU2NyZWVuKHRoaXMuZ3JhcGhJRCk7XHJcbiAgICAgICAgICAgIGRyYXcoKTtcclxuICAgICAgICAgICAgZ2wudW5pZm9ybTFpKHVPZmZzY3JlZW4sIGZhbHNlKTtcclxuICAgICAgICAgICAgS2V0Y2guZGlzYWJsZU9mZlNjcmVlbih0aGlzLmdyYXBoSUQpO1xyXG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIFNlbGVjdG9yO1xyXG4gICAgfShSZW5kZXJhYmxlKSk7XHJcbiAgICBCbGF6ZS5TZWxlY3RvciA9IFNlbGVjdG9yO1xyXG4gICAgO1xyXG4gICAgdmFyIEVmZmVjdHMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xyXG4gICAgICAgIF9fZXh0ZW5kcyhFZmZlY3RzLCBfc3VwZXIpO1xyXG4gICAgICAgIGZ1bmN0aW9uIEVmZmVjdHMoZ3JhcGhfaWQsIGNhbnZhcywgdHlwZSkge1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBncmFwaF9pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmUgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZWJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmJ1ZmZlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3ZibyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3RibyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlciA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3VuaWZvcm1zID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5fYXR0cmlicyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX25vaXNldGV4dHVyZSA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgdGhpcy5fY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZSB8fCBcIm5vXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlndXJlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuR2VvbWV0cnkoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRFZmZlY3QoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgRWZmZWN0cy5wcm90b3R5cGUuY29uZmlndXJlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLl9jYW52YXMud2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLl9jYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICB0aGlzLl90ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLl90ZXh0dXJlKTtcclxuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpO1xyXG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTkVBUkVTVCk7XHJcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1MsIGdsLkNMQU1QX1RPX0VER0UpO1xyXG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9ULCBnbC5DTEFNUF9UT19FREdFKTtcclxuICAgICAgICAgICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCB3aWR0aCwgaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVuZGVyYnVmZmVyID0gZ2wuY3JlYXRlUmVuZGVyYnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCB0aGlzLl9yZW5kZXJidWZmZXIpO1xyXG4gICAgICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfQ09NUE9ORU5UMTYsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLl9mcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRGcmFtZWJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgdGhpcy5fZnJhbWVidWZmZXIpO1xyXG4gICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclRleHR1cmUyRChnbC5GUkFNRUJVRkZFUiwgZ2wuQ09MT1JfQVRUQUNITUVOVDAsIGdsLlRFWFRVUkVfMkQsIHRoaXMuX3RleHR1cmUsIDApO1xyXG4gICAgICAgICAgICBnbC5mcmFtZWJ1ZmZlclJlbmRlcmJ1ZmZlcihnbC5GUkFNRUJVRkZFUiwgZ2wuREVQVEhfQVRUQUNITUVOVCwgZ2wuUkVOREVSQlVGRkVSLCB0aGlzLl9yZW5kZXJidWZmZXIpO1xyXG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgICAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRWZmZWN0cy5wcm90b3R5cGUuR2VvbWV0cnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNlcyA9IFtcclxuICAgICAgICAgICAgICAgIC0xLjAsIC0xLjAsXHJcbiAgICAgICAgICAgICAgICAxLjAsIC0xLjAsXHJcbiAgICAgICAgICAgICAgICAtMS4wLCAxLjAsXHJcbiAgICAgICAgICAgICAgICAtMS4wLCAxLjAsXHJcbiAgICAgICAgICAgICAgICAxLjAsIC0xLjAsXHJcbiAgICAgICAgICAgICAgICAxLjAsIDEuMFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB2YXIgdGV4dHVyZUNvb3JkcyA9IFtcclxuICAgICAgICAgICAgICAgIDAuMCwgMC4wLFxyXG4gICAgICAgICAgICAgICAgMS4wLCAwLjAsXHJcbiAgICAgICAgICAgICAgICAwLjAsIDEuMCxcclxuICAgICAgICAgICAgICAgIDAuMCwgMS4wLFxyXG4gICAgICAgICAgICAgICAgMS4wLCAwLjAsXHJcbiAgICAgICAgICAgICAgICAxLjAsIDEuMFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICB0aGlzLl92Ym8gPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX3Zibyk7XHJcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHZlcnRpY2VzKSwgZ2wuU1RBVElDX0RSQVcpO1xyXG4gICAgICAgICAgICB0aGlzLl90Ym8gPSBnbC5jcmVhdGVCdWZmZXIoKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX3Ribyk7XHJcbiAgICAgICAgICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBuZXcgRmxvYXQzMkFycmF5KHRleHR1cmVDb29yZHMpLCBnbC5TVEFUSUNfRFJBVyk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBudWxsKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEVmZmVjdHMucHJvdG90eXBlLnNldEVmZmVjdCA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3R5cGUgPSB0eXBlIHx8IHRoaXMuX3R5cGU7XHJcbiAgICAgICAgICAgIHZhciBnbCA9IHRoaXMuZ2w7XHJcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSB7fTtcclxuICAgICAgICAgICAgc291cmNlLnZlcnRleCA9IFNoYWRlcnMuVmVydGV4W1wiRWZmZWN0XCJdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX3R5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJhbGxcIjpcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZnJhZ21lbnQgPSBTaGFkZXJzLkZyYWdtZW50W1wiQWxsX2VmZmVjdFwiXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJpbnZlcnRcIjpcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZnJhZ21lbnQgPSBTaGFkZXJzLkZyYWdtZW50W1wiSW52ZXJ0X2VmZmVjdFwiXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJncmV5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLmZyYWdtZW50ID0gU2hhZGVycy5GcmFnbWVudFtcIkdyZXlfZWZmZWN0XCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImJsdXJcIjpcclxuICAgICAgICAgICAgICAgICAgICBzb3VyY2UuZnJhZ21lbnQgPSBTaGFkZXJzLkZyYWdtZW50W1wiQmx1cl9lZmZlY3RcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZmlsbVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5mcmFnbWVudCA9IFNoYWRlcnMuRnJhZ21lbnRbXCJGaWxtX2VmZmVjdFwiXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ3YXZ5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLmZyYWdtZW50ID0gU2hhZGVycy5GcmFnbWVudFtcIldhdnlfZWZmZWN0XCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm5vXCI6XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5mcmFnbWVudCA9IFNoYWRlcnMuRnJhZ21lbnRbXCJOb19lZmZlY3RcIl07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NoYWRlcikge1xyXG4gICAgICAgICAgICAgICAgZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9zaGFkZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3NoYWRlciA9IFdlYkdMVXRpbHMuY3JlYXRlUHJvZ3JhbShnbCwgc291cmNlKTtcclxuICAgICAgICAgICAgdmFyIGNvdW50O1xyXG4gICAgICAgICAgICB0aGlzLl9hdHRyaWJzID0ge307XHJcbiAgICAgICAgICAgIGNvdW50ID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLl9zaGFkZXIsIGdsLkFDVElWRV9BVFRSSUJVVEVTKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXR0cmliID0gZ2wuZ2V0QWN0aXZlQXR0cmliKHRoaXMuX3NoYWRlciwgaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJzW2F0dHJpYi5uYW1lXSA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHRoaXMuX3NoYWRlciwgYXR0cmliLm5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX3VuaWZvcm1zID0ge307XHJcbiAgICAgICAgICAgIGNvdW50ID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLl9zaGFkZXIsIGdsLkFDVElWRV9VTklGT1JNUyk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHVuaWZvcm0gPSBnbC5nZXRBY3RpdmVVbmlmb3JtKHRoaXMuX3NoYWRlciwgaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91bmlmb3Jtc1t1bmlmb3JtLm5hbWVdID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMuX3NoYWRlciwgdW5pZm9ybS5uYW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRWZmZWN0cy5wcm90b3R5cGUuU2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5fY2FudmFzLndpZHRoO1xyXG4gICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5fY2FudmFzLmhlaWdodDtcclxuICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XHJcbiAgICAgICAgICAgIGdsLnRleEltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgZ2wuUkdCQSwgd2lkdGgsIGhlaWdodCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgbnVsbCk7XHJcbiAgICAgICAgICAgIGdsLmJpbmRSZW5kZXJidWZmZXIoZ2wuUkVOREVSQlVGRkVSLCB0aGlzLl9yZW5kZXJidWZmZXIpO1xyXG4gICAgICAgICAgICBnbC5yZW5kZXJidWZmZXJTdG9yYWdlKGdsLlJFTkRFUkJVRkZFUiwgZ2wuREVQVEhfQ09NUE9ORU5UMTYsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBudWxsKTtcclxuICAgICAgICAgICAgZ2wuYmluZFJlbmRlcmJ1ZmZlcihnbC5SRU5ERVJCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRWZmZWN0cy5wcm90b3R5cGUuc2V0Tm9pc2VUZXh0dXJlID0gZnVuY3Rpb24gKGRhdGFfdGV4dHVyZSkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB0aGlzLl9ub2lzZXRleHR1cmUgPSBXZWJHTFV0aWxzLmNyZWF0ZVRleHR1cmUoZ2wsIGRhdGFfdGV4dHVyZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBFZmZlY3RzLnByb3RvdHlwZS5CaW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICB2YXIgd2lkdGggPSB0aGlzLl9jYW52YXMud2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHQgPSB0aGlzLl9jYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgICAgICBnbC51c2VQcm9ncmFtKHRoaXMuX3NoYWRlcik7XHJcbiAgICAgICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHRoaXMuX2F0dHJpYnMuYV9wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl92Ym8pO1xyXG4gICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRoaXMuX2F0dHJpYnMuYV9wb3NpdGlvbiwgMiwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcclxuICAgICAgICAgICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fYXR0cmlicy5hX3RleHR1cmVfY29vcmRzKTtcclxuICAgICAgICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIHRoaXMuX3Ribyk7XHJcbiAgICAgICAgICAgIGdsLnZlcnRleEF0dHJpYlBvaW50ZXIodGhpcy5fYXR0cmlicy5hX3RleHR1cmVfY29vcmRzLCAyLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xyXG4gICAgICAgICAgICBnbC5hY3RpdmVUZXh0dXJlKGdsLlRFWFRVUkUwKTtcclxuICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fdGV4dHVyZSk7XHJcbiAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh0aGlzLl91bmlmb3Jtcy51U2FtcGxlciwgMCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl91bmlmb3Jtcy51VGltZSkge1xyXG4gICAgICAgICAgICAgICAgZ2wudW5pZm9ybTFmKHRoaXMuX3VuaWZvcm1zLnVUaW1lLCAoRGF0ZS5ub3coKSAtIHRoaXMuX3N0YXJ0KSAvIDEwMDAuMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3VuaWZvcm1zLnVJbnZlcnNlVGV4dHVyZVNpemUpIHtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0yZih0aGlzLl91bmlmb3Jtcy51SW52ZXJzZVRleHR1cmVTaXplLCAxLjAgLyB3aWR0aCwgMS4wIC8gaGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdW5pZm9ybXMudU5vaXNlU2FtcGxlciAmJiB0aGlzLl9ub2lzZXRleHR1cmUpIHtcclxuICAgICAgICAgICAgICAgIGdsLmFjdGl2ZVRleHR1cmUoZ2wuVEVYVFVSRTEpO1xyXG4gICAgICAgICAgICAgICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGhpcy5fbm9pc2V0ZXh0dXJlKTtcclxuICAgICAgICAgICAgICAgIGdsLnVuaWZvcm0xaSh0aGlzLl91bmlmb3Jtcy51Tm9pc2VTYW1wbGVyLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgRWZmZWN0cy5wcm90b3R5cGUuYmluZEZyYW1lQnVmZmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIHRoaXMuX2ZyYW1lYnVmZmVyKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIEVmZmVjdHMucHJvdG90eXBlLnVuYmluZEZyYW1lQnVmZmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgZ2wgPSB0aGlzLmdsO1xyXG4gICAgICAgICAgICBnbC5iaW5kRnJhbWVidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIG51bGwpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRWZmZWN0cy5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIDYpO1xyXG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgbnVsbCk7XHJcbiAgICAgICAgICAgIGdsLmRpc2FibGVWZXJ0ZXhBdHRyaWJBcnJheSh0aGlzLl9hdHRyaWJzLmFfcG9zaXRpb24pO1xyXG4gICAgICAgICAgICBnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkodGhpcy5fYXR0cmlicy5hX3RleHR1cmVfY29vcmRzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBFZmZlY3RzO1xyXG4gICAgfShSZW5kZXJhYmxlKSk7XHJcbiAgICBCbGF6ZS5FZmZlY3RzID0gRWZmZWN0cztcclxuICAgIHZhciBOb2RlRWxlbWVudCA9IChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gTm9kZUVsZW1lbnQocGFyZW50LCB0eXBlLCBlbnRpdHkpIHtcclxuICAgICAgICAgICAgdGhpcy5fcGFyZW50Tm9kZSA9IHBhcmVudDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3BhcmVudE5vZGUpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnROb2RlLmFkZENoaWxkTm9kZSh0aGlzKTtcclxuICAgICAgICAgICAgdGhpcy5fY2hpbGROb2RlcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gdHlwZTtcclxuICAgICAgICAgICAgdGhpcy5fb2lkID0gdXRpbHMudXVpZCh0aGlzLl90eXBlIHx8IHRoaXMuY29uc3RydWN0b3IubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VudGl0eSA9IGVudGl0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVFbGVtZW50LnByb3RvdHlwZSwgXCJvaWRcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vaWQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlRWxlbWVudC5wcm90b3R5cGUsIFwicGFyZW50XCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGVFbGVtZW50LnByb3RvdHlwZSwgXCJlbnRpdHlcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lbnRpdHk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGVudGl0eSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50aXR5ID0gZW50aXR5O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTm9kZUVsZW1lbnQucHJvdG90eXBlLCBcImNoaWxkTm9kZXNcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuYWRkQ2hpbGROb2RlID0gZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoaWxkTm9kZXMucHVzaChjaGlsZCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQ2hpbGROb2RlID0gZnVuY3Rpb24gKGNoaWxkKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjaGlsZCk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hpbGROb2Rlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmdldENoaWxkTm9kZUJ5SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkTm9kZXNbaW5kZXhdIHx8IHZvaWQgMDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5leGlzdHNDaGlsZE5vZGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkTm9kZXNbaW5kZXhdICE9PSB2b2lkIDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnROb2RlLnJlbW92ZUNoaWxkTm9kZSh0aGlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDaGlsZE5vZGUgPSBmdW5jdGlvbiAodHlwZSwgZW50aXR5KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTm9kZUVsZW1lbnQodGhpcywgdHlwZSwgZW50aXR5KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5pc1Jvb3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnROb2RlID09PSB2b2lkIDA7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIChjaGlsZCkge1xyXG4gICAgICAgICAgICB2YXIgb2lkID0gY2hpbGQub2lkO1xyXG4gICAgICAgICAgICByZXR1cm4gXy5maW5kSW5kZXgodGhpcy5fY2hpbGROb2RlcywgZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMub2lkID09PSBvaWQ7IH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmluZGV4SW5QYXJlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IC0xO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSb290KCkpXHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IHRoaXMuX3BhcmVudE5vZGUuaW5kZXhPZih0aGlzKTtcclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLmhhc1NpYmxpbmcgPSBmdW5jdGlvbiAocHJldikge1xyXG4gICAgICAgICAgICB2YXIgX2hhdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzUm9vdCgpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9wYXJlbnROb2RlLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcmV2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYXJlbnROb2RlLmdldENoaWxkTm9kZUJ5SW5kZXgoaW5kZXggLSAxKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oYXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wYXJlbnROb2RlLmdldENoaWxkTm9kZUJ5SW5kZXgoaW5kZXggKyAxKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oYXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIF9oYXZlO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLm5leHRTaWJsaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc2libGluZyA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1Jvb3QoKSAmJiB0aGlzLmhhc1NpYmxpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fcGFyZW50Tm9kZS5pbmRleE9mKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgc2libGluZyA9IHRoaXMuX3BhcmVudE5vZGUuZ2V0Q2hpbGROb2RlQnlJbmRleChpbmRleCArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzaWJsaW5nO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgTm9kZUVsZW1lbnQucHJvdG90eXBlLnByZXZpb3VzU2libGluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHNpYmxpbmcgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSb290KCkgJiYgdGhpcy5oYXNTaWJsaW5nKHRydWUpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9wYXJlbnROb2RlLmluZGV4T2YodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBzaWJsaW5nID0gdGhpcy5fcGFyZW50Tm9kZS5nZXRDaGlsZE5vZGVCeUluZGV4KGluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHNpYmxpbmc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuZmlyc3RDaGlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGROb2RlQnlJbmRleCgwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5sYXN0Q2hpbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENoaWxkTm9kZUJ5SW5kZXgodGhpcy5fY2hpbGROb2Rlcy5sZW5ndGggLSAxKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE5vZGVFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVDaGlsZE5vZGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGlsZE5vZGVzID0gW107XHJcbiAgICAgICAgfTtcclxuICAgICAgICBOb2RlRWxlbWVudC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uIChtYXRyaXhTdGFjaykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZW50aXR5KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50aXR5LmJlZ2luRHJhdyhtYXRyaXhTdGFjayk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gdGhpcy5fY2hpbGROb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIGNoaWxkLmRyYXcobWF0cml4U3RhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lbnRpdHkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbnRpdHkuZW5kRHJhdyhtYXRyaXhTdGFjayk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gTm9kZUVsZW1lbnQ7XHJcbiAgICB9KCkpO1xyXG4gICAgQmxhemUuTm9kZUVsZW1lbnQgPSBOb2RlRWxlbWVudDtcclxuICAgIHZhciBTY2VuZUdyYXBoID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcclxuICAgICAgICBfX2V4dGVuZHMoU2NlbmVHcmFwaCwgX3N1cGVyKTtcclxuICAgICAgICBmdW5jdGlvbiBTY2VuZUdyYXBoKCkge1xyXG4gICAgICAgICAgICB2YXIgb2lkID0gdXRpbHMudXVpZCgpO1xyXG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBvaWQpO1xyXG4gICAgICAgICAgICB0aGlzLl9vaWQgPSBvaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuX3NjZW5lID0gbmV3IE5vZGVFbGVtZW50KHZvaWQgMCwgXCJTY2VuZVwiKTtcclxuICAgICAgICAgICAgdGhpcy5fbWF0cml4U3RhY2sgPSBuZXcgTWF0cml4U3RhY2sodGhpcy5fb2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fbG9hZGVyQnVmZmVyID0gW107XHJcbiAgICAgICAgICAgIEtldGNoLmNyZWF0ZVZpZXcodGhpcy5fb2lkKTtcclxuICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3IgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RzID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFNjZW5lR3JhcGgucHJvdG90eXBlLCBcInNjZW5lXCIsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2NlbmU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLkVudmlyb25tZW50ID0gZnVuY3Rpb24gKGIpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgYiA9IGIgfHwgW107XHJcbiAgICAgICAgICAgIGdsLmVuYWJsZShnbC5ERVBUSF9URVNUKTtcclxuICAgICAgICAgICAgZ2wuZGVwdGhGdW5jKGdsLkxFUVVBTCk7XHJcbiAgICAgICAgICAgIGdsLmVuYWJsZShnbC5CTEVORCk7XHJcbiAgICAgICAgICAgIGdsLmJsZW5kRnVuYyhnbC5TUkNfQUxQSEEsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpO1xyXG4gICAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfRkxJUF9ZX1dFQkdMLCB0cnVlKTtcclxuICAgICAgICAgICAgZ2wuY2xlYXJDb2xvcihiWzBdIHx8IDAsIGJbMV0gfHwgMCwgYlsyXSB8fCAwLCAxKTtcclxuICAgICAgICAgICAgZ2wuY2xlYXJEZXB0aCgxLjApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZWZmZWN0cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3V2l0aEVmZmVjdHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1NjZW5lKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmRyYXdTY2VuZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGdsID0gdGhpcy5nbDtcclxuICAgICAgICAgICAgdGhpcy51c2VQcm9ncmFtKCk7XHJcbiAgICAgICAgICAgIHZhciBkcmF3ID0gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLnZpZXdwb3J0V2lkdGgsIGdsLnZpZXdwb3J0SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NjZW5lLmRyYXcodGhpcy5fbWF0cml4U3RhY2spO1xyXG4gICAgICAgICAgICB9KS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yLnJlbmRlcihkcmF3KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkcmF3KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5kcmF3V2l0aEVmZmVjdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VmZmVjdHMuU2l6ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RzLmJpbmRGcmFtZUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTY2VuZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RzLnVuYmluZEZyYW1lQnVmZmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2VmZmVjdHMuQmluZCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RzLmRyYXcoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLnVzZVByb2dyYW0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIEtldGNoLnVzZVByb2dyYW0odGhpcy5vaWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlTWFpbkNoaWxkTm9kZSA9IGZ1bmN0aW9uICh0eXBlLCBlbnRpdHkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NjZW5lLmNyZWF0ZUNoaWxkTm9kZSh0eXBlLCBlbnRpdHkpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUucmVtb3ZlTWFpbkNoaWxkTm9kZSA9IGZ1bmN0aW9uIChub2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NjZW5lLnJlbW92ZUNoaWxkTm9kZShub2RlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2VuZUdyYXBoLnByb3RvdHlwZSwgXCJvaWRcIiwge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vaWQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLnNldENvbnRleHQgPSBmdW5jdGlvbiAoY2FudmFzKSB7XHJcbiAgICAgICAgICAgIEtldGNoLnNldENhbnZhc1RvQ29udGV4dCh0aGlzLm9pZCwgY2FudmFzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLlByb2dyYW0gPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICB0eXBlID0gdHlwZSB8fCBcIlBob25nXCI7XHJcbiAgICAgICAgICAgIEtldGNoLmNyZWF0ZVByb2dyYW0odGhpcy5fb2lkLCB7XHJcbiAgICAgICAgICAgICAgICBmcmFnbWVudDogU2hhZGVycy5GcmFnbWVudFt0eXBlXSB8fCBTaGFkZXJzLkZyYWdtZW50W1wiUGhvbmdcIl0sXHJcbiAgICAgICAgICAgICAgICB2ZXJ0ZXg6IFNoYWRlcnMuVmVydGV4W3R5cGVdIHx8IFNoYWRlcnMuVmVydGV4W1wiUGhvbmdcIl1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVNZXNoID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgICAgICB2YXIgbWVzaEVudGl0eSA9IG5ldyBNZXNoRW50aXR5KHRoaXMub2lkKTtcclxuICAgICAgICAgICAgaWYgKGNvbmZpZy5tZXNoKSB7XHJcbiAgICAgICAgICAgICAgICBtZXNoRW50aXR5LmxvYWRNZXNoQnlPYmplY3QoY29uZmlnLm1lc2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjb25maWcubWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgICAgIG1lc2hFbnRpdHkubG9hZE1hdGVyaWFsQnlPYmplY3QoY29uZmlnLm1hdGVyaWFsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbWVzaEVudGl0eTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZURpZmZ1c2UgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERpZmZ1c2VFbnRpdHkodGhpcy5vaWQsIHYpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlTWVzaEJ5TG9hZGVyID0gZnVuY3Rpb24gKGNvbmZpZykge1xyXG4gICAgICAgICAgICB2YXIgbWVzaCA9IG5ldyBNZXNoRW50aXR5KHRoaXMub2lkLCBjb25maWcubWVzaCwgY29uZmlnLm1hdGVyaWFsLCBjb25maWcudGV4dHVyZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlckJ1ZmZlci5wdXNoKG1lc2gpO1xyXG4gICAgICAgICAgICByZXR1cm4gbWVzaDtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIChwb3NpdGlvbiwgc2l6ZSwgcm90YXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1FbnRpdHkodGhpcy5vaWQsIHBvc2l0aW9uLCBzaXplLCByb3RhdGlvbik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVMaWdodCA9IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaWdodEVudGl0eSh0aGlzLm9pZCwgY29uZmlnLmFtYmllbnQsIGNvbmZpZy5kaWZmdXNlLCBjb25maWcucG9zaXRpb24sIGNvbmZpZy5zcGVjdWxhciwgY29uZmlnLmRpcmVjdGlvbiwgY29uZmlnLmN1dG9mZik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVDYW1lcmEgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IENhbWVyYUVudGl0eSh0aGlzLm9pZCwgdHlwZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVQYXJ0aWNsZSA9IGZ1bmN0aW9uIChwb2ludFNpemUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQYXJ0aWNsZUVudGl0eSh0aGlzLm9pZCwgcG9pbnRTaXplKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZUF4aXMgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXhpc0VudGl0eSh0aGlzLm9pZCwgbGVuZ3RoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNyZWF0ZUdyaWQgPSBmdW5jdGlvbiAoZGltLCBsaW5lcykge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEdyaWRFbnRpdHkodGhpcy5vaWQsIGRpbSwgbGluZXMpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlU2VsZWN0ID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTZWxlY3RFbnRpdHkodGhpcy5vaWQsIGRhdGEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlU2VsZWN0b3IgPSBmdW5jdGlvbiAoZGltZW5zaW9ucykge1xyXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RvciA9IG5ldyBTZWxlY3Rvcih0aGlzLm9pZCwgZGltZW5zaW9ucyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5maWxsU2VsZWN0b3IgPSBmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0b3IuZmlsbChvYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jbGVhclNlbGVjdG9yID0gZnVuY3Rpb24gKG9iaikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdG9yLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChwb3MpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3NlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0b3IuZmluZChwb3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5jcmVhdGVFZmZlY3RzID0gZnVuY3Rpb24gKGNhbnZhcywgdHlwZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9lZmZlY3RzID0gbmV3IEVmZmVjdHModGhpcy5vaWQsIGNhbnZhcywgdHlwZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5zZXROb2lzZUVmZmVjdCA9IGZ1bmN0aW9uICh0ZXh0dXJlKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9lZmZlY3RzKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0cy5zZXROb2lzZVRleHR1cmUodGV4dHVyZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5zZXRFZmZlY3QgPSBmdW5jdGlvbiAodHlwZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZWZmZWN0cylcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VmZmVjdHMuc2V0RWZmZWN0KHR5cGUpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgU2NlbmVHcmFwaC5wcm90b3R5cGUuY3JlYXRlTGlnaHRBcnJheSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBMaWdodEFycmF5RW50aXR5KHRoaXMub2lkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTY2VuZUdyYXBoLnByb3RvdHlwZSwgXCJNYWluQ2FtZXJhXCIsIHtcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoY2FtZXJhKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRyaXhTdGFjay5NYWluQ2FtZXJhID0gY2FtZXJhO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgICAgICBTY2VuZUdyYXBoLnByb3RvdHlwZS5yZW1vdmVUZXh0dXJlID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgICAgIEtldGNoLnJlbW92ZVRleHR1cmUodGhpcy5vaWQsIGlkKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLnN0YXJ0TG9hZGVyID0gZnVuY3Rpb24gKGNiKSB7XHJcbiAgICAgICAgICAgIGFzeW5jLmVhY2hTZXJpZXModGhpcy5fbG9hZGVyQnVmZmVyLCBmdW5jdGlvbiAoaXRlbSwgbmV4dCkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5sb2FkTWVzaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sIGNiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNvbmZpZ3VyZSA9IGZ1bmN0aW9uIChjb25maWcpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcgfHwge307XHJcbiAgICAgICAgICAgIHNlbGYuRW52aXJvbm1lbnQoY29uZmlnLmJhY2tncm91bmQpO1xyXG4gICAgICAgICAgICBzZWxmLlByb2dyYW0oY29uZmlnLnR5cGVTaGFkZXIpO1xyXG4gICAgICAgICAgICBLZXRjaC5zZXRBdHRyaWJ1dGVMb2NhdGlvbnMoc2VsZi5fb2lkLCBTY2VuZUdyYXBoLkFUVFJJQlVURVMpO1xyXG4gICAgICAgICAgICBLZXRjaC5zZXRVbmlmb3JtTG9jYXRpb25zKHNlbGYuX29pZCwgU2NlbmVHcmFwaC5VTklGT1JNUyk7XHJcbiAgICAgICAgICAgIHRoaXMuX21hdHJpeFN0YWNrLmluaXQoKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGgucHJvdG90eXBlLmNvbmZpZ3VyZVdpdGhMb2FkZXIgPSBmdW5jdGlvbiAoY2IpIHtcclxuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICBzZWxmLmNvbmZpZ3VyZSgpO1xyXG4gICAgICAgICAgICBzZWxmLnN0YXJ0TG9hZGVyKGNiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIFNjZW5lR3JhcGguVU5JRk9STVMgPSBbXHJcbiAgICAgICAgICAgICd1UE1hdHJpeCcsXHJcbiAgICAgICAgICAgICd1TVZNYXRyaXgnLFxyXG4gICAgICAgICAgICAndU5NYXRyaXgnLFxyXG4gICAgICAgICAgICBcInVMaWdodFBvc2l0aW9uXCIsXHJcbiAgICAgICAgICAgICd1TGlnaHREaXJlY3Rpb24nLFxyXG4gICAgICAgICAgICBcInVDdXRPZmZcIixcclxuICAgICAgICAgICAgJ3VMaWdodEFtYmllbnQnLFxyXG4gICAgICAgICAgICAndU1hdGVyaWFsQW1iaWVudCcsXHJcbiAgICAgICAgICAgICd1TGlnaHREaWZmdXNlJyxcclxuICAgICAgICAgICAgJ3VNYXRlcmlhbERpZmZ1c2UnLFxyXG4gICAgICAgICAgICAndUxpZ2h0U3BlY3VsYXInLFxyXG4gICAgICAgICAgICAndU1hdGVyaWFsU3BlY3VsYXInLFxyXG4gICAgICAgICAgICAndVNoaW5pbmVzcycsXHJcbiAgICAgICAgICAgICd1UG9pbnRTaXplJyxcclxuICAgICAgICAgICAgXCJ1U2FtcGxlclwiLFxyXG4gICAgICAgICAgICBcInVXaXJlZnJhbWVcIixcclxuICAgICAgICAgICAgXCJ1UGVyVmVydGV4Q29sb3JcIixcclxuICAgICAgICAgICAgXCJ1U2VsZWN0Q29sb3JcIixcclxuICAgICAgICAgICAgXCJ1T2Zmc2NyZWVuXCIsXHJcbiAgICAgICAgICAgIFwidUludmVyc2VUZXh0dXJlU2l6ZVwiLFxyXG4gICAgICAgICAgICBcInVOb2lzZVNhbXBsZXJcIixcclxuICAgICAgICAgICAgXCJ1VGltZVwiXHJcbiAgICAgICAgXTtcclxuICAgICAgICBTY2VuZUdyYXBoLkFUVFJJQlVURVMgPSBbJ2FfcG9zaXRpb24nLCAnYV9ub3JtYWwnLCBcImFfY29sb3JcIiwgXCJhX3RleHR1cmVfY29vcmRzXCJdO1xyXG4gICAgICAgIHJldHVybiBTY2VuZUdyYXBoO1xyXG4gICAgfShSZW5kZXJhYmxlKSk7XHJcbiAgICBCbGF6ZS5TY2VuZUdyYXBoID0gU2NlbmVHcmFwaDtcclxufSkoQmxhemUgfHwgKEJsYXplID0ge30pKTtcclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
