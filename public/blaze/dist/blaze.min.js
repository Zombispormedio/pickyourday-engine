var __extends=this&&this.__extends||function(t,e){function i(){this.constructor=t}for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)},Blaze;!function(t){var e;!function(t){function e(t){for(var e=null,i=["webgl","experimental-webgl","webkit-3d","moz-webgl"],n=0;n<i.length;++n){try{e=t.getContext(i[n])}catch(r){}if(e)break}return null===e?(alert("Could not initialise WebGL"),null):(e.viewportWidth=t.width,e.viewportHeight=t.height,e)}function i(e,i,n,r){var o=e.createBuffer();switch(e.bindBuffer(e.ARRAY_BUFFER,o),r){case t.BUFFER_DRAW.STATIC:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STATIC_DRAW);break;case t.BUFFER_DRAW.DYNAMIC:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.DYNAMIC_DRAW);break;case t.BUFFER_DRAW.STREAM:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STREAM_DRAW);break;default:e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STATIC_DRAW)}return e.bindBuffer(e.ARRAY_BUFFER,null),n?(o.itemSize=2,o.numItems=i.length/2):(o.itemSize=3,o.numItems=i.length/3),o}function n(e,i,n){var r=e.createBuffer(e.ELEMENT_ARRAY_BUFFER);switch(e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,r),n){case t.BUFFER_DRAW.STATIC:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STATIC_DRAW);break;case t.BUFFER_DRAW.DYNAMIC:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.DYNAMIC_DRAW);break;case t.BUFFER_DRAW.STREAM:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STREAM_DRAW);break;default:e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),e.STATIC_DRAW)}return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),r.itemSize=1,r.numItems=i.length,r}function r(t,e){var i=t.createTexture();return t.bindTexture(t.TEXTURE_2D,i),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,e),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_NEAREST),t.generateMipmap(t.TEXTURE_2D),t.bindTexture(t.TEXTURE_2D,null),i}function o(t,e,i){var n=t.createShader(e);return t.shaderSource(n,i),t.compileShader(n),t.getShaderParameter(n,t.COMPILE_STATUS)?n:(console.log(t.getShaderInfoLog(n)),null)}function a(t,e){var i=o(t,t.FRAGMENT_SHADER,e.fragment),n=o(t,t.VERTEX_SHADER,e.vertex),r=t.createProgram();return t.attachShader(r,n),t.attachShader(r,i),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)||console.log(t.getProgramInfoLog(r)),t.useProgram(r),r}t.getGLContext=e,function(t){t[t.STATIC=0]="STATIC",t[t.STREAM=1]="STREAM",t[t.DYNAMIC=2]="DYNAMIC"}(t.BUFFER_DRAW||(t.BUFFER_DRAW={}));t.BUFFER_DRAW;t.createBuffer=i,t.createIndexBuffer=n,t.createTexture=r,t.createShader=o,t.createProgram=a}(e=t.WebGLUtils||(t.WebGLUtils={}));var i;!function(t){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}function i(t){var i=e()+e();return t?t+i:i}function n(t){return t.map(function(t){return Number.isNaN(t)&&(t=0),t})}function r(t,e){var i=new XMLHttpRequest;i.open("GET",t,!0),i.addEventListener("load",function(){e(i.responseText)}),i.send()}function o(t){var e=t.split(".");return e[e.length-1]}function a(){return(new Date).getTime()}function s(t){return t*Math.PI/180}function u(t,e){for(var i=0,n=1,r=2,o=[],a=0;a<t.length;a++)o[a]=0;for(var a=0;a<e.length;a+=3){var s=[],u=[],c=[];s[i]=t[3*e[a+1]+i]-t[3*e[a]+i],s[n]=t[3*e[a+1]+n]-t[3*e[a]+n],s[r]=t[3*e[a+1]+r]-t[3*e[a]+r],u[i]=t[3*e[a+2]+i]-t[3*e[a+1]+i],u[n]=t[3*e[a+2]+n]-t[3*e[a+1]+n],u[r]=t[3*e[a+2]+r]-t[3*e[a+1]+r],c[i]=s[n]*u[r]-s[r]*u[n],c[n]=s[r]*u[i]-s[i]*u[r],c[r]=s[i]*u[n]-s[n]*u[i];for(var f=0;3>f;f++)o[3*e[a+f]+i]=o[3*e[a+f]+i]+c[i],o[3*e[a+f]+n]=o[3*e[a+f]+n]+c[n],o[3*e[a+f]+r]=o[3*e[a+f]+r]+c[r]}for(var a=0;a<t.length;a+=3){var h=[];h[i]=o[a+i],h[n]=o[a+n],h[r]=o[a+r];var l=Math.sqrt(h[i]*h[i]+h[n]*h[n]+h[r]*h[r]);0==l&&(l=1e-5),h[i]=h[i]/l,h[n]=h[n]/l,h[r]=h[r]/l,o[a+i]=h[i],o[a+n]=h[n],o[a+r]=h[r]}return o}t.s4=e,t.uuid=i,t.normalizeNaN=n,t.load=r,t.getExtension=o,t.nowInMilliseconds=a,t.degToRad=s,t.calculateNormals=u}(i=t.utils||(t.utils={})),function(t){t[t.ORBITING=0]="ORBITING",t[t.TRACKING=1]="TRACKING"}(t.CAMERA_TYPE||(t.CAMERA_TYPE={}));var n=t.CAMERA_TYPE,r=function(){function t(){}return t.setCanvasToContext=function(i,n){var r=e.getGLContext(n);t.setContext(i,r)},t.setContext=function(e,i){t._views[e].context=i},t.getContext=function(e){return t._views[e].context},t.createProgram=function(i,n){var r=t.getContext(i),o=e.createProgram(r,n);t.setProgram(i,o)},t.setProgram=function(e,i){t._views[e].program=i},t.getProgram=function(e){return t._views[e].program},t.createView=function(e){t._views[e]={}},t.setAttributeLocations=function(e,i){var n=t._views[e],r=n.context,o=n.program;n.attribs=i.reduce(function(t,e){return t[e]=r.getAttribLocation(o,e),t},{})},t.getAttrib=function(e,i){return t._views[e].attribs[i]},t.getUniform=function(e,i){return t._views[e].uniforms[i]},t.setUniformLocations=function(e,i){var n=t._views[e],r=n.context,o=n.program;n.uniforms=i.reduce(function(t,e){return t[e]=r.getUniformLocation(o,e),t},{})},t.enableAttrib=function(e,i,n){var r=t.getAttrib(e,i),o=t.getContext(e);o.enableVertexAttribArray(r),n?o.vertexAttribPointer(r,n.size||3,o.FLOAT,n.normalized||!1,n.stride||0,n.offset||0):o.vertexAttribPointer(r,3,o.FLOAT,!1,0,0)},t.disableAttrib=function(e,i){var n=t.getAttrib(e,i),r=t.getContext(e);r.disableVertexAttribArray(n)},t.renderLoop=function(t){setInterval(t,30)},t.addTexture=function(e,i){var n=t._views[e];n.textures=n.textures||[],n.textures.push(i)},t.activeTexture=function(e,i,n){var r=t._views[e],o=r.context,a=(r.program,r.textures.indexOf(i));if(a>-1){o.activeTexture(0===a?o.TEXTURE0:o.TEXTURE0+a),o.bindTexture(o.TEXTURE_2D,n);var s=t.getUniform(e,"uSampler");o.uniform1i(s,a)}},t._views={},t}();t.Ketch=r;var o=function(){function t(t){this._graph_id=t}return Object.defineProperty(t.prototype,"graphID",{get:function(){return this._graph_id},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"gl",{get:function(){return r.getContext(this.graphID)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"program",{get:function(){return r.getProgram(this.graphID)},enumerable:!0,configurable:!0}),t.prototype.getUniform=function(t){return r.getUniform(this.graphID,t)},t}();t.Renderable=o;var a=function(t){function e(e){t.call(this,e)}return __extends(e,t),e.prototype.beginDraw=function(t){},e.prototype.endDraw=function(t){},e}(o);t.Entity=a;var s=function(t){function e(e){t.call(this,e),this._stack=[],this._mvMatrix=mat4.create(),this._pMatrix=mat4.create(),this._nMatrix=mat4.create()}return __extends(e,t),e.prototype.push=function(){var t=mat4.create();mat4.set(this._mvMatrix,t),this._stack.push(t)},e.prototype.pop=function(){if(0==this._stack.length)throw"invalid popMatrix";this._mvMatrix=this._stack.pop()},e.prototype.ModelView=function(){this._camera?this._mvMatrix=this._camera.modelView:mat4.identity(this._mvMatrix)},Object.defineProperty(e.prototype,"mvMatrix",{get:function(){return this._mvMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"pMatrix",{get:function(){return this._pMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"nMatrix",{get:function(){return this._nMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"MainCamera",{set:function(t){this._camera=t},enumerable:!0,configurable:!0}),e.prototype.Perspective=function(){var t=this.gl;mat4.identity(this._pMatrix),mat4.perspective(45,t.viewportWidth/t.viewportHeight,.1,1e3,this._pMatrix)},e.prototype.Normal=function(){mat4.identity(this._nMatrix),mat4.set(this._mvMatrix,this._nMatrix),mat4.inverse(this._nMatrix),mat4.transpose(this._nMatrix)},e.prototype.init=function(){this.ModelView(),this.Perspective(),this.Normal()},e.prototype.setUp=function(){var t=this.gl;this.Normal();var e=this.getUniform("uMVMatrix");e&&t.uniformMatrix4fv(e,!1,this._mvMatrix);var i=this.getUniform("uPMatrix");i&&t.uniformMatrix4fv(i,!1,this._pMatrix);var n=this.getUniform("uNMatrix");n&&t.uniformMatrix4fv(n,!1,this._nMatrix)},e}(o);t.MatrixStack=s;var u;!function(t){var n=function(t){function n(e){t.call(this,e)}return __extends(n,t),Object.defineProperty(n.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(t){var e=this,n=this,r=i.getExtension(t);i.load(t,function(t){var i;switch(r){case"obj":i=n.parseOBJ(t);break;case"json":i=n.parseJSON(t)}n.createBuffers(i),e._onload&&e._onload()})},enumerable:!0,configurable:!0}),n.prototype.parseJSON=function(t){var e={};try{e=JSON.parse(t)}catch(i){console.log(i)}return e},n.prototype.parseOBJ=function(t){var e={v:[],vn:[],vt:[],iv:[],"in":[],it:[]},i=t.split("\n"),n=i.filter(function(t){return"v"===t[0]}),r=i.filter(function(t){return"f"===t[0]});n.forEach(function(t){var i=t.replace("\r","").split(" "),n=i[0];e[n]=e[n].concat(i.slice(1).filter(function(t){return""!==t}))});var o=[];return r.forEach(function(t){var e=t.replace("\r","").replace("f","").split(" ");o=o.concat(e.slice(1).filter(function(t){return""!==t}))}),o.forEach(function(t){var i=t.split("/");e.iv.push(parseInt(i[0])-1),e["in"].push(parseInt(i[1])-1),e.it.push(parseInt(i[2])-1)}),e},n.prototype.createBuffers=function(t){function n(t){return e.createBuffer(o,t)}function r(t){return e.createIndexBuffer(o,t)}var o=this.gl;_.defaults(t,{v:[],vn:[],vt:[],iv:[],"in":[],it:[]}),t.v.length>0&&(this._vbo=n(t.v)),t.v.length>0&&t.iv.length>0&&(this._nbo=n(i.calculateNormals(t.v,t.iv))),t.vt.length>0&&(this._tbo=e.createBuffer(o,t.vt,!0)),t.iv.length>0&&(this._ivbo=r(t.iv)),t["in"].length>0&&(this._inbo=r(t["in"])),t.it.length>0&&(this._itbo=r(t.it))},Object.defineProperty(n.prototype,"vbo",{get:function(){return this._vbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"nbo",{get:function(){return this._nbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"tbo",{get:function(){return this._tbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"ivbo",{get:function(){return this._ivbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"inbo",{get:function(){return this._inbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"itbo",{get:function(){return this._itbo},enumerable:!0,configurable:!0}),n}(o);t.MeshBuffers=n;var a=function(t){function n(e){t.call(this,e),this._image=new Image,this._oid=i.uuid(this.constructor.name)}return __extends(n,t),Object.defineProperty(n.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(t){this._image.onload=this.loadTextureImage(this._onload),this._image.src=t},enumerable:!0,configurable:!0}),n.prototype.loadTextureImage=function(t){var i=this,n=this;return function(){i._texture=e.createTexture(n.gl,n._image),r.addTexture(n.graphID,n._oid),t&&t()}},Object.defineProperty(n.prototype,"content",{get:function(){return this._texture},enumerable:!0,configurable:!0}),n}(o);t.MeshTexture=a;var s=function(t){function e(e,i,n,r,o){t.call(this,e),this._ambient=i?vec4.create(i):vec4.create(),this._diffuse=n?vec4.create(n):void 0,this._specular=r?vec4.create(r):vec4.create(),this._shininess=o||200}return __extends(e,t),Object.defineProperty(e.prototype,"onload",{set:function(t){this._onload=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"src",{set:function(t){var e=this,n=this;i.load(t,function(t){var i=n.parse(t);e._ambient=i.Ka,e._diffuse=i.Kd,e._specular=i.Ks,e.shininess=i.Ns,e._onload&&e._onload()})},enumerable:!0,configurable:!0}),e.prototype.parse=function(t){var e={},i=["Ka","Kd","Ks","Ns"],n=t.split("\n");return n.forEach(function(t){var n=t.split(" "),r=n[0];if(i.indexOf(r)>-1)switch(r){case"Ns":e.Ns=Number(n[1]);break;default:var o=n.slice(1).map(function(t){return Number(t)});o.push(1),e[r]=o}}),e},Object.defineProperty(e.prototype,"ambient",{get:function(){return this._ambient},set:function(t){this._ambient=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"diffuse",{get:function(){return this._diffuse},set:function(t){this._diffuse=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"specular",{get:function(){return this._specular},set:function(t){this._specular=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"shininess",{get:function(){return this._shininess},set:function(t){this._shininess=t},enumerable:!0,configurable:!0}),e}(o);t.MeshMaterial=s}(u=t.Resources||(t.Resources={}));var c;!function(t){var e=function(){function t(){}return t.Particle="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n\nvoid main(void) { \n    gl_FragColor = vec4(0,1,0,1);\n}",t.Phong="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform float uShininess;\nuniform vec3 uLightDirection;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\nuniform vec4 uLightSpecular;\n\nuniform vec4 uMaterialAmbient;\nuniform vec4 uMaterialDiffuse;\nuniform vec4 uMaterialSpecular;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\n\nvoid main(){\n\n		\n        vec3 L= normalize(uLightDirection);\n        vec3 N= normalize(vNormal);\n        float lambertTerm=dot(N, -L);\n        \n        vec4 Ia= uLightAmbient*uMaterialAmbient;\n        \n        vec4 Id=vec4(0.0,0.0,0.0,1.0);\n        \n        vec4 Is=vec4(0.0,0.0,0.0,1.0);\n        \n        if(lambertTerm>0.0)\n        {\n            Id=uLightDiffuse*uMaterialDiffuse*lambertTerm;\n            \n            vec3 E= normalize(vEyeVec);\n            vec3 R= reflect(L, N);\n            float specular=pow(max(dot(R,E),0.0), uShininess);\n            Is=uLightSpecular*uMaterialSpecular*specular;\n        }\n        \n        vec4 finalColor=Ia+Id+Is;\n        finalColor.a=1.0;\n    \n        gl_FragColor =finalColor;\n        \n}\n\n\n",t}();t.Fragment=e;var i=function(){function t(){}return t.Particle="attribute vec3 a_position;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform float uPointSize;\n\nvoid main(void) {\n    gl_Position = uPMatrix * uMVMatrix * vec4(a_position.xyz, 1.0);\n    gl_PointSize = uPointSize;\n}",t.Phong="attribute vec3 a_position;\nattribute vec3 a_normal;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\n\nvoid main(){\n\n    vec4 vertex = uMVMatrix * vec4(a_position, 1.0);\n	vNormal = vec3(uNMatrix * vec4(a_normal, 1.0));\n	vEyeVec=-vec3(vertex.xyz);   \n	gl_Position =uPMatrix * vertex;\n\n}\n\n\n",t}();t.Vertex=i}(c=t.Shaders||(t.Shaders={}));var f=function(t){function e(e,i,n,r){t.call(this,e),this._frequency=i,this._interval_id=null,this._callback=r}return __extends(e,t),e.prototype.onFrame=function(){if(e.ElapseTime=i.nowInMilliseconds(),!(e.ElapseTime<5)){for(var t=Math.floor(e.ElapseTime/this._frequency);t>0&&e.Count!=this._times;)this._callback(),t--,e.Count++;e.Count===this._times&&this.stop()}},e.prototype.start=function(){this._intime=i.nowInMilliseconds(),this._interval_id=setInterval(this.onFrame,this._frequency/1e3)},e.prototype.stop=function(){this._interval_id&&clearInterval(this._interval_id)},e.prototype.beginDraw=function(){},e.prototype.endDraw=function(){},e.Count=0,e}(a);t.AnimationEntity=f;var h=function(t){function e(e,i,n,r){t.call(this,e),this._material=null,this._texture=null,this._buffers=null,this._meshfile=i||null,this._materialfile=n||null,this._texturefile=r||null}return __extends(e,t),e.prototype.loadBuffers=function(t,e){this._buffers=new u.MeshBuffers(this.graphID),this._buffers.onload=e,this._buffers.src=t},e.prototype.loadTexture=function(t,e){this._texture=new u.MeshTexture(this.graphID),this._texture.onload=e,this._texture.src=t},Object.defineProperty(e.prototype,"material",{set:function(t){this._material=t},enumerable:!0,configurable:!0}),e.prototype.loadMaterial=function(t,e){this._material=new u.MeshMaterial(this.graphID),this._material.onload=e,this._material.src=t},e.prototype.loadMesh=function(t){var e=this,i=this;async.waterfall([function(t){return i._meshfile?(console.log("Loading Buffers"),void i.loadBuffers(i._meshfile,function(){console.log("Loaded Buffers"),t()})):t()},function(t){return e._texturefile?(console.log("Loading Texture"),void i.loadTexture(i._texturefile,function(){console.log("Loaded Texture"),t()})):t()},function(t){return i._materialfile?(console.log("Loading Material"),void i.loadMaterial(i._materialfile,function(){console.log("Loaded Material"),t()})):t()}],function(e){return e?console.log(e):void(t&&t())})},e.prototype.loadMeshByObject=function(t){this._buffers=new u.MeshBuffers(this.graphID),this._buffers.createBuffers(t)},e.prototype.loadMaterialByObject=function(t){this._material=new u.MeshMaterial(this.graphID),t.ambient&&(this._material.ambient=t.ambient),t.specular&&(this._material.specular=t.specular),t.diffuse&&(this._material.diffuse=t.diffuse),t.shininess&&(this._material.shininess=t.shininess)},e.prototype.setMaterialUniforms=function(){if(this._material){var t=this.gl;if(this._material.ambient){var e=this.getUniform("uMaterialAmbient");e&&t.uniform4fv(e,this._material.ambient)}if(this._material.diffuse){var i=this.getUniform("uMaterialDiffuse");i&&t.uniform4fv(i,this._material.diffuse)}if(this._material.specular){var n=this.getUniform("uMaterialSpecular");n&&t.uniform4fv(n,this._material.specular)}if(this._material.shininess){var r=this.getUniform("uShininess");r&&t.uniform1f(r,this._material.shininess)}}},e.prototype.beginDraw=function(){var t=this.gl;this.setMaterialUniforms(),t.bindBuffer(t.ARRAY_BUFFER,this._buffers.vbo),r.enableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,this._buffers.nbo),r.enableAttrib(this.graphID,"a_normal");var e=this._buffers.ivbo;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e),t.drawElements(t.TRIANGLES,e.numItems,t.UNSIGNED_SHORT,0)},e.prototype.endDraw=function(){var t=this.gl;r.disableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},e}(a);t.MeshEntity=h;var l=function(t){function e(e,i,n,r){t.call(this,e),this._matrix=mat4.create(),this._position=i||vec3.create(),this._size=n||vec3.create([1,1,1]),this._rotation=r||{angle:0,axis:vec3.create()}}return __extends(e,t),e.prototype.identity=function(){mat4.identity(this._matrix)},e.prototype.setMatrix=function(t){this._matrix=t},e.prototype.transpose=function(){mat4.transpose(this._matrix,this._matrix)},Object.defineProperty(e.prototype,"position",{get:function(){return this._position},set:function(t){this._position=t},enumerable:!0,configurable:!0}),e.prototype.setAbsolutePosition=function(t,e,i){this._position=[t,e,i]},e.prototype.translate=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._position,r=vec3.create([t,e,i]);vec3.add(n,r,this._position)},Object.defineProperty(e.prototype,"size",{get:function(){return this._size},set:function(t){this._size=t},enumerable:!0,configurable:!0}),e.prototype.setSize=function(t,e,i){this._size=[t,e,i]},e.prototype.scale=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._size,r=vec3.create([t,e,i]);vec3.add(n,r,this._size)},Object.defineProperty(e.prototype,"rotation",{get:function(){return this._rotation},set:function(t){this._rotation=t},enumerable:!0,configurable:!0}),e.prototype.setRotation=function(t,e){t&&(this._rotation.angle=t),e&&(this._rotation.axis=e)},e.prototype.setAngle=function(t){this._rotation.angle=t},e.prototype.setAxis=function(t){this._rotation.axis=t},e.prototype.rotateAngle=function(t){void 0===t&&(t=0),this._rotation.angle+=t},e.prototype.moveAxis=function(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0);var n=this._rotation.axis,r=vec3.create([t,e,i]);vec3.add(n,r,this._rotation.axis)},e.prototype.beginDraw=function(t){if(t.push(),t.ModelView(),this._matrix=t.mvMatrix,void 0!=this._position&&mat4.translate(this._matrix,this._position),void 0!=this._size&&mat4.scale(this._matrix,this._size),void 0!=this._rotation){var e=this._rotation.angle*Math.PI/180;mat4.rotate(this._matrix,e,this._rotation.axis)}t.setUp()},e.prototype.endDraw=function(t){t.pop()},e}(a);t.TransformEntity=l;var p=function(t){function e(e,i,n,r,o,a,s){t.call(this,e),this._ambient=i?vec4.create(i):null,this._diffuse=n?vec4.create(n):null,this._position=r?vec4.create(r):null,this._specular=o?vec4.create(o):null,this._direction=a?vec3.create(a):null,this._cutoff=s}return __extends(e,t),Object.defineProperty(e.prototype,"ambient",{get:function(){return this._ambient},set:function(t){this._ambient=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"diffuse",{get:function(){return this._diffuse},set:function(t){this._diffuse=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"specular",{get:function(){return this._specular},set:function(t){this._specular=i.normalizeNaN(vec4.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._diffuse},set:function(t){this._position=i.normalizeNaN(vec3.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"direction",{get:function(){return this._direction},set:function(t){this._direction=i.normalizeNaN(vec3.create(t))},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"cutOff",{get:function(){return this._cutoff},set:function(t){this._cutoff=t},enumerable:!0,configurable:!0}),e.prototype.beginDraw=function(){var t=this.gl;if(this._ambient){var e=this.getUniform("uLightAmbient");e&&t.uniform4fv(e,this._ambient)}if(this._diffuse){var i=this.getUniform("uLightDiffuse");i&&t.uniform4fv(i,this._diffuse)}if(this._specular){var n=this.getUniform("uLightSpecular");n&&t.uniform4fv(n,this._specular)}if(this._position){var r=this.getUniform("uLightPosition");r&&t.uniform3fv(r,this._position)}if(this._direction){var o=this.getUniform("uLightDirection");o&&t.uniform3fv(o,this._direction)}},e.prototype.endDraw=function(){},e}(a);t.LightEntity=p;var d=function(t){function e(e,i){t.call(this,e),this._value=i}return __extends(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this._value},set:function(t){this._value=t},enumerable:!0,configurable:!0}),e.prototype.beginDraw=function(){var t=this.gl,e=this.getUniform("uMaterialDiffuse");e&&t.uniform4fv(e,this._value)},e.prototype.endDraw=function(){},e}(a);t.DiffuseEntity=d;var v=function(t){function e(e,i){t.call(this,e),this._pointSize=i||1,this._buffer=null}return __extends(e,t),e.prototype.configure=function(t){var e=this.gl;this._buffer=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._buffer),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this._numItems=t.length},e.prototype.update=function(t){var e=this.gl;e.bindBuffer(e.ARRAY_BUFFER,this._buffer),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),this._numItems=t.length},Object.defineProperty(e.prototype,"pointSize",{set:function(t){this._pointSize=t},enumerable:!0,configurable:!0}),e.prototype.beginDraw=function(){var t=this.gl,e=this.getUniform("uPointSize");e&&t.uniform1f(e,this._pointSize),t.bindBuffer(t.ARRAY_BUFFER,this._buffer),r.enableAttrib(this.graphID,"a_position"),t.drawArrays(t.POINTS,0,this._numItems/3)},e.prototype.endDraw=function(){var t=this.gl;r.disableAttrib(this.graphID,"a_position"),t.bindBuffer(t.ARRAY_BUFFER,null)},e}(a);t.ParticleEntity=v;var b=function(t){function e(e,i){t.call(this,e),this._type=i||n.ORBITING,this._cmatrix=mat4.create(),mat4.identity(this._cmatrix),this._up=vec3.create(),this._right=vec3.create(),this._normal=vec3.create(),this._position=vec3.create(),this._azimuth=0,this._elevation=0,this._steps=0}return __extends(e,t),Object.defineProperty(e.prototype,"type",{set:function(t){this._type=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"position",{get:function(){return this._position},set:function(t){this._position=t},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"azimuth",{get:function(){return this._azimuth},set:function(t){var e=t-this._azimuth;this.changeAzimuth(e)},enumerable:!0,configurable:!0}),e.prototype.changeAzimuth=function(t){this._azimuth+=t,(this._azimuth>360||this._azimuth<-360)&&(this._azimuth=this._azimuth%360)},Object.defineProperty(e.prototype,"elevation",{get:function(){return this._elevation},set:function(t){var e=t-this._elevation;this.changeElevation(e)},enumerable:!0,configurable:!0}),e.prototype.changeElevation=function(t){this._elevation+=t,(this._elevation>360||this._elevation<-360)&&(this._elevation=this._elevation%360)},Object.defineProperty(e.prototype,"zoom",{get:function(){return this._steps},set:function(t){var e=vec3.create(),i=vec3.create();e=this.position;var r=t-this._steps;vec3.normalize(this._normal,i);var o=vec3.create();this._type===n.TRACKING?(o[0]=e[0]-r*i[0],o[1]=e[1]-r*i[1],o[2]=e[2]-r*i[2]):(o[0]=e[0],o[1]=e[1],o[2]=e[2]-r),this.position=o,this._steps=t},enumerable:!0,configurable:!0}),e.prototype.calculateOrientation=function(){var t=this._cmatrix;mat4.multiplyVec4(t,[1,0,0,0],this._right),mat4.multiplyVec4(t,[0,1,0,0],this._up),mat4.multiplyVec4(t,[0,0,1,0],this._normal)},e.prototype.beginDraw=function(){mat4.identity(this._cmatrix),this.calculateOrientation(),this._type===n.TRACKING?(mat4.translate(this._cmatrix,this._position),mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180)):(mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180),mat4.translate(this._cmatrix,this._position)),this.calculateOrientation(),this._type===n.TRACKING&&mat4.multiplyVec4(m,[0,0,0,1],this._position)},Object.defineProperty(e.prototype,"modelView",{get:function(){var t=mat4.create();return mat4.inverse(this._cmatrix,t),t},enumerable:!0,configurable:!0}),e.prototype.endDraw=function(){},e}(a);t.CameraEntity=b;var g=function(){function t(t,e,n){this._parentNode=t,this._parentNode&&this._parentNode.addChildNode(this),this._childNodes=[],this._type=e,this._oid=i.uuid(this._type||this.constructor.name),this._entity=n}return Object.defineProperty(t.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return this._parentNode},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"entity",{get:function(){return this._entity},set:function(t){this._entity=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"childNodes",{get:function(){return this._childNodes},enumerable:!0,configurable:!0}),t.prototype.addChildNode=function(t){this._childNodes.push(t)},t.prototype.removeChildNode=function(t){var e=this.indexOf(t);e>-1&&this._childNodes.splice(e,1)},t.prototype.getChildNodeByIndex=function(t){return this._childNodes[t]||void 0},t.prototype.existsChildNode=function(t){return void 0!==this._childNodes[t]},t.prototype["delete"]=function(){this._parentNode.removeChildNode(this)},t.prototype.createChildNode=function(e,i){return new t(this,e,i)},t.prototype.isRoot=function(){return void 0===this._parentNode},t.prototype.indexOf=function(t){var e=t.oid;return _.findIndex(this._childNodes,function(t){return t.oid===e})},t.prototype.indexInParent=function(){var t=-1;return this.isRoot()||(t=this._parentNode.indexOf(this)),t},t.prototype.hasSibling=function(t){var e=!1;if(!this.isRoot()){var i=this._parentNode.indexOf(this);i>-1&&(t?this._parentNode.getChildNodeByIndex(i-1)&&(e=!0):this._parentNode.getChildNodeByIndex(i+1)&&(e=!0))}return e},t.prototype.nextSibling=function(){var t=null;if(!this.isRoot()&&this.hasSibling()){var e=this._parentNode.indexOf(this);t=this._parentNode.getChildNodeByIndex(e+1)}return t},t.prototype.previousSibling=function(){var t=null;if(!this.isRoot()&&this.hasSibling(!0)){var e=this._parentNode.indexOf(this);t=this._parentNode.getChildNodeByIndex(e-1)}return t},t.prototype.firstChild=function(){return this.getChildNodeByIndex(0)},t.prototype.lastChild=function(){return this.getChildNodeByIndex(this._childNodes.length-1)},t.prototype.removeChildNodes=function(){this._childNodes=[]},t.prototype.draw=function(t){this._entity&&this._entity.beginDraw(t);for(var e=0;e<this._childNodes.length;e++){var i=this._childNodes[e];i.draw(t)}this._entity&&this._entity.endDraw(t)},t}();t.NodeElement=g;var y=function(t){function e(){var e=i.uuid();t.call(this,e),this._oid=e,this._scene=new g(void 0,"Scene"),this._matrixStack=new s(this._oid),this._loaderBuffer=[],this._isDrawing=!1,r.createView(this._oid)}return __extends(e,t),Object.defineProperty(e.prototype,"scene",{get:function(){return this._scene},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"isDrawing",{get:function(){return this._isDrawing},enumerable:!0,configurable:!0}),e.prototype.Environment=function(){var t=this.gl;t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.clearColor(0,0,0,1),t.clearDepth(1)},e.prototype.draw=function(){var t=this.gl;this._isDrawing=!0,t.viewport(0,0,t.viewportWidth,t.viewportHeight),t.clear(t.COLOR_BUFFER_BIT|t.DEPTH_BUFFER_BIT),this._scene.draw(this._matrixStack),this._isDrawing=!1},e.prototype.createMainChildNode=function(t,e){return this._scene.createChildNode(t,e)},e.prototype.removeMainChildNode=function(t){this._scene.removeChildNode(t)},Object.defineProperty(e.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),e.prototype.setContext=function(t){r.setCanvasToContext(this.oid,t)},e.prototype.Program=function(t){t=t||"Phong",r.createProgram(this._oid,{fragment:c.Fragment[t],vertex:c.Vertex[t]})},e.prototype.createMesh=function(t){var e=new h(this.oid);return t.mesh&&e.loadMeshByObject(t.mesh),t.material&&e.loadMaterialByObject(t.material),e},e.prototype.createDiffuse=function(t){return new d(this.oid,t)},e.prototype.createMeshByLoader=function(t){var e=new h(this.oid,t.mesh,t.material,t.texture);return this._loaderBuffer.push(e),e},e.prototype.createTransform=function(t,e,i){return new l(this.oid,t,e,i)},e.prototype.createLight=function(t){return new p(this.oid,t.ambient,t.diffuse,t.position,t.specular,t.direction,t.cutoff)},e.prototype.createCamera=function(t){return new b(this.oid,t)},e.prototype.createParticle=function(t){return new v(this.oid,t)},Object.defineProperty(e.prototype,"MainCamera",{set:function(t){this._matrixStack.MainCamera=t},enumerable:!0,configurable:!0}),e.prototype.startLoader=function(t){async.eachSeries(this._loaderBuffer,function(t,e){t.loadMesh(function(){console.log(t),e()})},t)},e.prototype.configure=function(t){var i=this;t=t||{},i.Environment(),i.Program(t.typeShader),r.setAttributeLocations(i._oid,e.ATTRIBUTES),r.setUniformLocations(i._oid,e.UNIFORMS),this._matrixStack.init()},e.prototype.configureWithLoader=function(t){var e=this;e.configure(),e.startLoader(t)},e.UNIFORMS=["uPMatrix","uMVMatrix","uNMatrix","uLightDirection","uLightAmbient","uMaterialAmbient","uLightDiffuse","uMaterialDiffuse","uLightSpecular","uMaterialSpecular","uShininess","uPointSize"],e.ATTRIBUTES=["a_position","a_normal"],e}(o);t.SceneGraph=y}(Blaze||(Blaze={}));
//# sourceMappingURL=data:application/json;base64,
