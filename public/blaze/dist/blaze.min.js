var __extends=this&&this.__extends||function(e,t){function i(){this.constructor=e}for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);e.prototype=null===t?Object.create(t):(i.prototype=t.prototype,new i)},Blaze;!function(e){var t;!function(e){function t(e){for(var t=null,i=["webgl","experimental-webgl","webkit-3d","moz-webgl"],n=0;n<i.length;++n){try{t=e.getContext(i[n])}catch(r){}if(t)break}return null===t?(alert("Could not initialise WebGL"),null):(t.viewportWidth=e.width,t.viewportHeight=e.height,t)}function i(t,i,n,r){var o=t.createBuffer();switch(t.bindBuffer(t.ARRAY_BUFFER,o),r){case e.BUFFER_DRAW.STATIC:t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STATIC_DRAW);break;case e.BUFFER_DRAW.DYNAMIC:t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.DYNAMIC_DRAW);break;case e.BUFFER_DRAW.STREAM:t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STREAM_DRAW);break;default:t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STATIC_DRAW)}return t.bindBuffer(t.ARRAY_BUFFER,null),n?(o.itemSize=2,o.numItems=i.length/2):(o.itemSize=3,o.numItems=i.length/3),o}function n(t,i,n){var r=t.createBuffer(t.ELEMENT_ARRAY_BUFFER);switch(t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r),n){case e.BUFFER_DRAW.STATIC:t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),t.STATIC_DRAW);break;case e.BUFFER_DRAW.DYNAMIC:t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),t.DYNAMIC_DRAW);break;case e.BUFFER_DRAW.STREAM:t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),t.STREAM_DRAW);break;default:t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(i),t.STATIC_DRAW)}return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),r.itemSize=1,r.numItems=i.length,r}function r(e,t){var i=e.createTexture();return e.bindTexture(e.TEXTURE_2D,i),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,t),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.bindTexture(e.TEXTURE_2D,null),i}function o(e,t,i){var n=e.createShader(t);return e.shaderSource(n,i),e.compileShader(n),e.getShaderParameter(n,e.COMPILE_STATUS)?n:(console.log(e.getShaderInfoLog(n)),null)}function a(e,t){return o(e,e.FRAGMENT_SHADER,t)}function s(e,t){return o(e,e.VERTEX_SHADER,t)}function u(e,t){var i=a(e,t.fragment),n=s(e,t.vertex),r=e.createProgram();return e.attachShader(r,n),e.attachShader(r,i),e.linkProgram(r),e.getProgramParameter(r,e.LINK_STATUS)||console.log(e.getProgramInfoLog(r)),r}e.getGLContext=t,function(e){e[e.STATIC=0]="STATIC",e[e.STREAM=1]="STREAM",e[e.DYNAMIC=2]="DYNAMIC"}(e.BUFFER_DRAW||(e.BUFFER_DRAW={}));e.BUFFER_DRAW;e.createBuffer=i,e.createIndexBuffer=n,e.createTexture=r,e.createShader=o,e.createFragmentShader=a,e.createVertexShader=s,e.createProgram=u}(t=e.WebGLUtils||(e.WebGLUtils={}));var i;!function(e){function t(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}function i(e){var i=t()+t();return e?e+i:i}function n(e){return e.map(function(e){return Number.isNaN(e)&&(e=0),e})}function r(e,t){var i=new XMLHttpRequest;i.open("GET",e,!0),i.addEventListener("load",function(){t(i.responseText)}),i.send()}function o(e){var t=e.split(".");return t[t.length-1]}function a(){return(new Date).getTime()}function s(e){return e*Math.PI/180}function u(e,t){for(var i=0,n=1,r=2,o=[],a=0;a<e.length;a++)o[a]=0;for(var a=0;a<t.length;a+=3){var s=[],u=[],f=[];s[i]=e[3*t[a+1]+i]-e[3*t[a]+i],s[n]=e[3*t[a+1]+n]-e[3*t[a]+n],s[r]=e[3*t[a+1]+r]-e[3*t[a]+r],u[i]=e[3*t[a+2]+i]-e[3*t[a+1]+i],u[n]=e[3*t[a+2]+n]-e[3*t[a+1]+n],u[r]=e[3*t[a+2]+r]-e[3*t[a+1]+r],f[i]=s[n]*u[r]-s[r]*u[n],f[n]=s[r]*u[i]-s[i]*u[r],f[r]=s[i]*u[n]-s[n]*u[i];for(var c=0;3>c;c++)o[3*t[a+c]+i]=o[3*t[a+c]+i]+f[i],o[3*t[a+c]+n]=o[3*t[a+c]+n]+f[n],o[3*t[a+c]+r]=o[3*t[a+c]+r]+f[r]}for(var a=0;a<e.length;a+=3){var l=[];l[i]=o[a+i],l[n]=o[a+n],l[r]=o[a+r];var h=Math.sqrt(l[i]*l[i]+l[n]*l[n]+l[r]*l[r]);0==h&&(h=1e-5),l[i]=l[i]/h,l[n]=l[n]/h,l[r]=l[r]/h,o[a+i]=l[i],o[a+n]=l[n],o[a+r]=l[r]}return o}e.s4=t,e.uuid=i,e.normalizeNaN=n,e.load=r,e.getExtension=o,e.nowInMilliseconds=a,e.degToRad=s,e.calculateNormals=u}(i=e.utils||(e.utils={})),function(e){e[e.ORBITING=0]="ORBITING",e[e.TRACKING=1]="TRACKING"}(e.CAMERA_TYPE||(e.CAMERA_TYPE={}));var n=e.CAMERA_TYPE,r=function(){function e(){}return e.setCanvasToContext=function(i,n){var r=t.getGLContext(n);e.setContext(i,r)},e.setContext=function(t,i){e._views[t].context=i},e.getContext=function(t){return e._views[t].context},e.createProgram=function(i,n){var r=e.getContext(i),o=t.createProgram(r,n);e.setProgram(i,o)},e.setProgram=function(t,i){e._views[t].program=i},e.getProgram=function(t){return e._views[t].program},e.useProgram=function(t){var i=e._views[t],n=i.context,r=i.program;n.useProgram(r)},e.createView=function(t){e._views[t]={}},e.setAttributeLocations=function(t,i){var n=e._views[t],r=n.context,o=n.program;n.attribs=i.reduce(function(e,t){return e[t]=r.getAttribLocation(o,t),e},{})},e.getAttrib=function(t,i){return e._views[t].attribs[i]},e.getUniform=function(t,i){return e._views[t].uniforms[i]},e.setUniformLocations=function(t,i){var n=e._views[t],r=n.context,o=n.program;n.uniforms=i.reduce(function(e,t){return e[t]=r.getUniformLocation(o,t),e},{})},e.enableAttrib=function(t,i,n){var r=e.getAttrib(t,i),o=e.getContext(t);o.enableVertexAttribArray(r),n?o.vertexAttribPointer(r,n.size||3,o.FLOAT,n.normalized||!1,n.stride||0,n.offset||0):o.vertexAttribPointer(r,3,o.FLOAT,!1,0,0)},e.disableAttrib=function(t,i){var n=e.getAttrib(t,i),r=e.getContext(t);r.disableVertexAttribArray(n)},e.renderLoop=function(e){setInterval(e,30)},e.addTexture=function(t,i){var n=e._views[t];n.textures=n.textures||[],n.textures.push(i)},e.removeTexture=function(t,i){var n=e._views[t];n.textures=n.textures||[];var r=n.textures.indexOf(i);n.textures.splice(r,1)},e.activeTexture=function(t,i,n){var r=e._views[t],o=r.context,a=(r.program,r.textures.indexOf(i));if(a>-1){o.activeTexture(0===a?o.TEXTURE0:o.TEXTURE0+a),o.bindTexture(o.TEXTURE_2D,n);var s=e.getUniform(t,"uSampler");o.uniform1i(s,a)}},e.isOffScreen=function(t){return e._views[t].offscreen},e.enableOffScreen=function(t){e._views[t].offscreen=!0},e.disableOffScreen=function(t){e._views[t].offscreen=!0},e.fillSelectorBuffer=function(t,i){var n=e._views[t];n.selectObjects=n.selectObjects||[],n.selectObjects.push(i)},e.clearSelectorBuffer=function(t){var i=e._views[t];i.selectObjects=[]},e.getSelectByColor=function(t,i){var n=e._views[t];return n.selectObjects=n.selectObjects||[],_.find(n.selectObjects,function(e){return _.isEqual(e.color,i)})},e._views={},e}();e.Ketch=r;var o=function(){function e(e){this._graph_id=e}return Object.defineProperty(e.prototype,"graphID",{get:function(){return this._graph_id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"gl",{get:function(){return r.getContext(this.graphID)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"program",{get:function(){return r.getProgram(this.graphID)},enumerable:!0,configurable:!0}),e.prototype.getUniform=function(e){return r.getUniform(this.graphID,e)},e}();e.Renderable=o;var a=function(e){function t(t){e.call(this,t)}return __extends(t,e),t.prototype.beginDraw=function(e){},t.prototype.endDraw=function(e){},t}(o);e.Entity=a;var s=function(e){function t(t){e.call(this,t),this._stack=[],this._mvMatrix=mat4.create(),this._pMatrix=mat4.create(),this._nMatrix=mat4.create()}return __extends(t,e),t.prototype.push=function(){var e=mat4.create();mat4.set(this._mvMatrix,e),this._stack.push(e)},t.prototype.pop=function(){if(0==this._stack.length)throw"invalid popMatrix";this._mvMatrix=this._stack.pop()},t.prototype.ModelView=function(){this._camera?this._mvMatrix=this._camera.modelView:mat4.identity(this._mvMatrix)},Object.defineProperty(t.prototype,"mvMatrix",{get:function(){return this._mvMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"pMatrix",{get:function(){return this._pMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"nMatrix",{get:function(){return this._nMatrix},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"MainCamera",{set:function(e){this._camera=e},enumerable:!0,configurable:!0}),t.prototype.Perspective=function(){var e=this.gl;mat4.identity(this._pMatrix),mat4.perspective(45,e.viewportWidth/e.viewportHeight,.1,1e3,this._pMatrix)},t.prototype.Normal=function(){mat4.identity(this._nMatrix),mat4.set(this._mvMatrix,this._nMatrix),mat4.inverse(this._nMatrix),mat4.transpose(this._nMatrix)},t.prototype.init=function(){this.ModelView(),this.Perspective(),this.Normal()},t.prototype.setUp=function(){var e=this.gl;this.Normal();var t=this.getUniform("uMVMatrix");t&&e.uniformMatrix4fv(t,!1,this._mvMatrix);var i=this.getUniform("uPMatrix");i&&e.uniformMatrix4fv(i,!1,this._pMatrix);var n=this.getUniform("uNMatrix");n&&e.uniformMatrix4fv(n,!1,this._nMatrix)},t}(o);e.MatrixStack=s;var u;!function(e){var n=function(e){function n(t){e.call(this,t)}return __extends(n,e),Object.defineProperty(n.prototype,"onload",{set:function(e){this._onload=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(e){var t=this,n=this,r=i.getExtension(e);i.load(e,function(e){var i;switch(r){case"obj":i=n.parseOBJ(e);break;case"json":i=n.parseJSON(e)}n.createBuffers(i),t._onload&&t._onload()})},enumerable:!0,configurable:!0}),n.prototype.parseJSON=function(e){var t={};try{t=JSON.parse(e)}catch(i){console.log(i)}return t},n.prototype.parseOBJ=function(e){var t={v:[],vn:[],vt:[],iv:[],"in":[],it:[]},i=e.split("\n"),n=i.filter(function(e){return"v"===e[0]}),r=i.filter(function(e){return"f"===e[0]});n.forEach(function(e){var i=e.replace("\r","").split(" "),n=i[0];t[n]=t[n].concat(i.slice(1).filter(function(e){return""!==e}))});var o=[];return r.forEach(function(e){var t=e.replace("\r","").replace("f","").split(" ");o=o.concat(t.slice(1).filter(function(e){return""!==e}))}),o.forEach(function(e){var i=e.split("/");t.iv.push(parseInt(i[0])-1),t["in"].push(parseInt(i[1])-1),t.it.push(parseInt(i[2])-1)}),t},n.prototype.createBuffers=function(e){function n(e){return t.createBuffer(o,e)}function r(e){return t.createIndexBuffer(o,e)}var o=this.gl;_.defaults(e,{v:[],vn:[],vt:[],iv:[],"in":[],it:[]}),e.v.length>0&&(this._vbo=n(e.v)),e.v.length>0&&e.iv.length>0&&(this._nbo=n(i.calculateNormals(e.v,e.iv))),e.vt.length>0&&(this._tbo=t.createBuffer(o,e.vt,!0)),e.iv.length>0&&(this._ivbo=r(e.iv)),e["in"].length>0&&(this._inbo=r(e["in"])),e.it.length>0&&(this._itbo=r(e.it))},Object.defineProperty(n.prototype,"vbo",{get:function(){return this._vbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"nbo",{get:function(){return this._nbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"tbo",{get:function(){return this._tbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"ivbo",{get:function(){return this._ivbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"inbo",{get:function(){return this._inbo},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"itbo",{get:function(){return this._itbo},enumerable:!0,configurable:!0}),n}(o);e.MeshBuffers=n;var a=function(e){function n(t){e.call(this,t),this._image=new Image,this._oid=i.uuid(this.constructor.name)}return __extends(n,e),Object.defineProperty(n.prototype,"onload",{set:function(e){this._onload=e},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"src",{set:function(e){this._image.onload=this.loadTextureImage(this._onload),this._image.src=e},enumerable:!0,configurable:!0}),n.prototype.loadTextureImage=function(e){var i=this,n=this;return function(){i._texture=t.createTexture(n.gl,n._image),r.addTexture(n.graphID,n._oid),e&&e()}},Object.defineProperty(n.prototype,"content",{get:function(){return this._texture},enumerable:!0,configurable:!0}),n}(o);e.MeshTexture=a;var s=function(e){function t(t,i,n,r,o){e.call(this,t),this._ambient=i?vec4.create(i):vec4.create(),this._diffuse=n?vec4.create(n):void 0,this._specular=r?vec4.create(r):vec4.create(),this._shininess=o||200}return __extends(t,e),Object.defineProperty(t.prototype,"onload",{set:function(e){this._onload=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"src",{set:function(e){var t=this,n=this;i.load(e,function(e){var i=n.parse(e);t._ambient=i.Ka,t._diffuse=i.Kd,t._specular=i.Ks,t.shininess=i.Ns,t._onload&&t._onload()})},enumerable:!0,configurable:!0}),t.prototype.parse=function(e){var t={},i=["Ka","Kd","Ks","Ns"],n=e.split("\n");return n.forEach(function(e){var n=e.split(" "),r=n[0];if(i.indexOf(r)>-1)switch(r){case"Ns":t.Ns=Number(n[1]);break;default:var o=n.slice(1).map(function(e){return Number(e)});o.push(1),t[r]=o}}),t},Object.defineProperty(t.prototype,"ambient",{get:function(){return this._ambient},set:function(e){this._ambient=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"diffuse",{get:function(){return this._diffuse},set:function(e){this._diffuse=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"specular",{get:function(){return this._specular},set:function(e){this._specular=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"shininess",{get:function(){return this._shininess},set:function(e){this._shininess=e},enumerable:!0,configurable:!0}),t}(o);e.MeshMaterial=s}(u=e.Resources||(e.Resources={}));var f;!function(e){var t=function(){function e(){}return e.Blur_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D uSampler;\nuniform vec2 uInverseTextureSize;\n\nvarying vec2 vTextureCoord;\n\nvec4 offsetLookup(float xOff, float yOff){\n\n    float x=vTextureCoord.x+xOff*uInverseTextureSize.x;\n    float y=vTextureCoord.y+yOff*uInverseTextureSize.y;\n    return texture2D(uSampler, vec2(x, y));\n\n}\n\nvoid main(){\n\n    vec4 frameColor = offsetLookup(-4.0, 0.0) * 0.05;\n    frameColor += offsetLookup(-3.0, 0.0) * 0.09;\n    frameColor += offsetLookup(-2.0, 0.0) * 0.12;\n    frameColor += offsetLookup(-1.0, 0.0) * 0.15;\n    frameColor += offsetLookup(0.0, 0.0) * 0.16;\n    frameColor += offsetLookup(1.0, 0.0) * 0.15;\n    frameColor += offsetLookup(2.0, 0.0) * 0.12;\n    frameColor += offsetLookup(3.0, 0.0) * 0.09;\n    frameColor += offsetLookup(4.0, 0.0) * 0.05;\n\n    gl_FragColor = frameColor;\n\n\n    \n}",e.Film_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D uSampler;\nuniform sampler2D uNoiseSampler;\nuniform vec2 uInverseTextureSize;\nuniform float uTime;\n\nvarying vec2 vTextureCoord;\n\nconst float grainIntensity = 0.1;\nconst float scrollSpeed = 4000.0;\n\n\nvoid main()\n{\n    vec4 frameColor=texture2D(uSampler, vTextureCoord);\n    vec4 grain=texture2D(uNoiseSampler, vTextureCoord*2.0+uTime*scrollSpeed*uInverseTextureSize);\n    gl_FragColor=frameColor-(grain*grainIntensity);\n\n}",e.No_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform sampler2D uSampler;\nvarying vec2 vTextureCoord;\n\nvoid main(){\n    vec4 frameColor=texture2D(uSampler, vTextureCoord);\n    \n    gl_FragColor=frameColor;\n\n}\n",e.Particle="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform bool uWireframe;\n\nuniform sampler2D uSampler;\n\nvarying vec4 vColor;\n\n\nbool isBlack(vec4 color){\nreturn color.r==0.0 &&color.g==0.0&&color.b==0.0;\n}\nvoid main(void) { \n     if(uWireframe){\n         gl_FragColor = vColor;\n        }else{\n    gl_FragColor = texture2D(uSampler, gl_PointCoord);\n    if(gl_FragColor.a < 0.5 || isBlack(gl_FragColor)) discard;\n    }\n}",e.Phong="#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform float uShininess;\nuniform vec3 uLightDirection;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\nuniform vec4 uLightSpecular;\n\nuniform bool uWireframe;\n\nuniform bool uOffscreen;\nuniform vec4 uSelectColor;\n\nuniform vec4 uMaterialAmbient;\nuniform vec4 uMaterialDiffuse;\nuniform vec4 uMaterialSpecular;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec4 vColor;\n\nvoid main(){\n\n        if(uWireframe){\n            gl_FragColor = vColor;\n            return;\n        }\n      \n\n        if(uOffscreen){\n            gl_FragColor=uSelectColor;\n            return;\n        }\n\n       \n        vec3 L= normalize(uLightDirection);\n        vec3 N= normalize(vNormal);\n        float lambertTerm=dot(N, -L);\n        \n        vec4 Ia= uLightAmbient*uMaterialAmbient;\n        \n        vec4 Id=vec4(0.0,0.0,0.0,1.0);\n        \n        vec4 Is=vec4(0.0,0.0,0.0,1.0);\n        \n        if(lambertTerm>0.0)\n        {\n            Id=uLightDiffuse*uMaterialDiffuse*lambertTerm;\n            \n            vec3 E= normalize(vEyeVec);\n            vec3 R= reflect(L, N);\n            float specular=pow(max(dot(R,E),0.0), uShininess);\n            Is=uLightSpecular*uMaterialSpecular*specular;\n        }\n        \n        vec4 finalColor=Ia+Id+Is;\n        finalColor.a=1.0;\n    \n        gl_FragColor =finalColor;\n        \n        \n}\n\n\n",e.Phong_positional="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float uShininess;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\n\n\nuniform bool uWireframe;\n\nuniform bool uOffscreen;\nuniform vec4 uSelectColor;\n\n\nuniform vec4 uMaterialDiffuse;\n\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec3 vLightDir;\nvarying vec4 vColor;\n\nvoid main(){\n\n        if(uWireframe){\n            gl_FragColor = vColor;\n            return;\n        }\n      \n\n        if(uOffscreen){\n            gl_FragColor=uSelectColor;\n            return;\n        }\n\n       \n        vec3 L= normalize(vLightDir);\n        vec3 N= normalize(vNormal);\n        float lambertTerm=dot(N, -L);\n        \n        vec4 Ia= uLightAmbient;\n        \n        vec4 Id=vec4(0.0,0.0,0.0,1.0);\n        \n        vec4 Is=vec4(0.0,0.0,0.0,1.0);\n        \n        if(lambertTerm>0.0)\n        {\n            Id=uMaterialDiffuse*lambertTerm;\n            \n            vec3 E= normalize(vEyeVec);\n            vec3 R= reflect(L, N);\n            float specular=pow(max(dot(R,E),0.0), uShininess);\n            Is=uLightDiffuse*specular;\n        }\n        \n        vec4 finalColor=Ia+Id+Is;\n        finalColor.a=1.0;\n    \n        gl_FragColor =finalColor;\n        \n        \n}\n\n\n",e.Toon="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float uShininess;\nuniform vec3 uLightDirection;\n\nuniform mat4 uMVMatrix;\n\nuniform vec4 uLightAmbient;\nuniform vec4 uLightDiffuse;\nuniform vec4 uMaterialDiffuse;\n\nuniform bool uWireframe;\n\nuniform bool uOffscreen;\nuniform vec4 uSelectColor;\n\nvarying vec4 vColor;\n\nvarying vec3 vNormal;\nvarying vec3 vVertex;\n\nvoid main(){\n\n       if(uWireframe){\n            gl_FragColor = vColor;\n            return;\n        }\n      \n\n        if(uOffscreen){\n            gl_FragColor=uSelectColor;\n            return;\n        }\n\n        vec4 color0=vec4(uMaterialDiffuse.rgb,1.0);\n        vec4 color1=vec4(0.0,0.0,0.0, 1.0);\n        vec4 color2=vec4(uMaterialDiffuse.rgb, 1.0);\n        \n        vec3 N= vNormal;\n        vec3 L = normalize(uLightDirection);\n        \n        vec4 eyePos= uMVMatrix*vec4(0.0,0.0,0.0,1.0);\n        \n        vec3 EyeVert = normalize(-eyePos.xyz);\n        \n        vec3 EyeLight=normalize(L+EyeVert);\n        \n        float sil= max(dot(N, EyeVert), 0.0);\n        \n        if( sil<0.4){\n            gl_FragColor=color1;\n        }else{\n             gl_FragColor=color0;\n             \n             float spec=pow(max(dot(N, EyeLight), 0.0), uShininess);\n             \n             if(spec<0.2) gl_FragColor*=0.8;\n             else gl_FragColor=color2;\n             \n             float diffuse=max(dot(N, L), 0.0);\n             if(diffuse<0.5)gl_FragColor*=0.8;\n        }\n\n\n\n\n\n}\n\n\n\n",e.Wavy_effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\nuniform sampler2D uSampler;\nuniform float uTime;\n\nvarying vec2 vTextureCoord;\n\nconst float speed = 15.0;\nconst float magnitude = 0.015;\n\nvoid main(){\n    \n    vec2 wavyCoord;\n    wavyCoord.s=vTextureCoord.s+(sin(uTime+vTextureCoord.t*speed)*magnitude);\n    wavyCoord.t=vTextureCoord.t+(sin(uTime+vTextureCoord.s*speed)*magnitude);\n    \n    vec4 frameColor=texture2D(uSampler, wavyCoord);\n    gl_FragColor=frameColor;\n\n\n}",e}();e.Fragment=t;var i=function(){function e(){}return e.Effect="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec2 a_position;\nattribute vec2 a_texture_coords;\n\nvarying vec2 vTextureCoord;\n\nvoid main(){\n    vTextureCoord=a_texture_coords;\n\n    gl_Position=vec4(a_position, 0.0,1.0);\n    \n}",e.Particle="#ifdef GL_ES\nprecision mediump float;\n#endif\nattribute vec3 a_position;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform float uPointSize;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\n\nvarying vec4 vColor;\n\nvoid main(void) {\n\n if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }\n    \n    gl_Position = uPMatrix * uMVMatrix * vec4(a_position.xyz, 1.0);\n    gl_PointSize = uPointSize;\n}",e.Phong="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec4 vColor;\n\nvoid main(){\n\n    vec4 vertex = uMVMatrix * vec4(a_position, 1.0);\n	\n	\n	 if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }else{\n	\n	vNormal = vec3(uNMatrix * vec4(a_normal, 1.0));\n	vEyeVec=-vec3(vertex.xyz);  \n	\n	}\n	 \n	gl_Position =uPMatrix * vertex;\n\n}\n\n\n",e.Phong_positional="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nuniform vec3 uLightPosition;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\nvarying vec3 vNormal;\nvarying vec3 vEyeVec;\nvarying vec3 vLightDir;\n\nvarying vec4 vColor;\n\nvoid main(){\n\n    vec4 vertex = uMVMatrix * vec4(a_position, 1.0);\n	\n	\n	 if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }else{\n	\n	vNormal = vec3(uNMatrix * vec4(a_normal, 1.0));\n    vLightDir=vertex.xyz-uLightPosition;  \n	vEyeVec=-vec3(vertex.xyz);  \n	\n	}\n	 \n	gl_Position =uPMatrix * vertex;\n\n}\n\n\n",e.Toon="#ifdef GL_ES\nprecision mediump float;\n#endif\n\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec4 a_color;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\nuniform mat4 uNMatrix;\n\nuniform bool uWireframe;\nuniform bool uPerVertexColor;\nuniform vec4 uMaterialDiffuse;\n\nvarying vec3 vNormal;\nvarying vec3 vVertex;\nvarying vec4 vColor;\n\nvoid main(){\n    \n    vec4 normal= uNMatrix * vec4(a_normal,1.0);\n    \n     if(uWireframe){\n	 \n	 	if(uPerVertexColor){\n	 		 vColor=a_color;\n	 	}else{\n	 		vColor=uMaterialDiffuse;\n	 	}\n	 \n	\n	 }else{\n    \n    vNormal=normal.xyz;\n    vVertex=a_position;\n    }\n    \n    gl_Position=uPMatrix*uMVMatrix*vec4(a_position, 1.0);\n    \n    \n    \n    \n\n}",e}();e.Vertex=i}(f=e.Shaders||(e.Shaders={}));var c=function(e){function t(t,i,n,r){e.call(this,t),this._frequency=i,this._interval_id=null,this._callback=r}return __extends(t,e),t.prototype.onFrame=function(){if(t.ElapseTime=i.nowInMilliseconds(),!(t.ElapseTime<5)){for(var e=Math.floor(t.ElapseTime/this._frequency);e>0&&t.Count!=this._times;)this._callback(),e--,t.Count++;t.Count===this._times&&this.stop()}},t.prototype.start=function(){this._intime=i.nowInMilliseconds(),this._interval_id=setInterval(this.onFrame,this._frequency/1e3)},t.prototype.stop=function(){this._interval_id&&clearInterval(this._interval_id)},t.prototype.beginDraw=function(){},t.prototype.endDraw=function(){},t.Count=0,t}(a);e.AnimationEntity=c;var l=function(e){function t(t,i,n,r){e.call(this,t),this._material=null,this._texture=null,this._buffers=null,this._meshfile=i||null,this._materialfile=n||null,this._texturefile=r||null}return __extends(t,e),t.prototype.loadBuffers=function(e,t){this._buffers=new u.MeshBuffers(this.graphID),this._buffers.onload=t,this._buffers.src=e},t.prototype.loadTexture=function(e,t){this._texture=new u.MeshTexture(this.graphID),this._texture.onload=t,this._texture.src=e},Object.defineProperty(t.prototype,"material",{set:function(e){this._material=e},enumerable:!0,configurable:!0}),t.prototype.loadMaterial=function(e,t){this._material=new u.MeshMaterial(this.graphID),this._material.onload=t,this._material.src=e},t.prototype.loadMesh=function(e){var t=this,i=this;async.waterfall([function(e){return i._meshfile?(console.log("Loading Buffers"),void i.loadBuffers(i._meshfile,function(){console.log("Loaded Buffers"),e()})):e()},function(e){return t._texturefile?(console.log("Loading Texture"),void i.loadTexture(i._texturefile,function(){console.log("Loaded Texture"),e()})):e()},function(e){return i._materialfile?(console.log("Loading Material"),void i.loadMaterial(i._materialfile,function(){console.log("Loaded Material"),e()})):e()}],function(t){return t?console.log(t):void(e&&e())})},t.prototype.loadMeshByObject=function(e){this._buffers=new u.MeshBuffers(this.graphID),this._buffers.createBuffers(e)},t.prototype.loadMaterialByObject=function(e){this._material=new u.MeshMaterial(this.graphID),e.ambient&&(this._material.ambient=e.ambient),e.specular&&(this._material.specular=e.specular),e.diffuse&&(this._material.diffuse=e.diffuse),e.shininess&&(this._material.shininess=e.shininess)},t.prototype.setMaterialUniforms=function(){if(this._material){var e=this.gl;if(this._material.ambient){var t=this.getUniform("uMaterialAmbient");t&&e.uniform4fv(t,this._material.ambient)}if(this._material.diffuse){var i=this.getUniform("uMaterialDiffuse");i&&e.uniform4fv(i,this._material.diffuse)}if(this._material.specular){var n=this.getUniform("uMaterialSpecular");n&&e.uniform4fv(n,this._material.specular)}if(this._material.shininess){var r=this.getUniform("uShininess");r&&e.uniform1f(r,this._material.shininess)}}},t.prototype.beginDraw=function(){var e=this.gl;this.setMaterialUniforms(),e.bindBuffer(e.ARRAY_BUFFER,this._buffers.vbo),r.enableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ARRAY_BUFFER,this._buffers.nbo),r.enableAttrib(this.graphID,"a_normal");var t=this._buffers.ivbo;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t),e.drawElements(e.TRIANGLES,t.numItems,e.UNSIGNED_SHORT,0)},t.prototype.endDraw=function(){var e=this.gl;r.disableAttrib(this.graphID,"a_position"),r.disableAttrib(this.graphID,"a_normal"),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t}(a);e.MeshEntity=l;var h=function(e){function t(t,i,n,r){e.call(this,t),this._matrix=mat4.create(),this._position=i||vec3.create(),this._size=n||vec3.create([1,1,1]),this._rotation=r||{angle:0,axis:vec3.create()}}return __extends(t,e),t.prototype.identity=function(){mat4.identity(this._matrix)},t.prototype.setMatrix=function(e){this._matrix=e},t.prototype.transpose=function(){mat4.transpose(this._matrix,this._matrix)},Object.defineProperty(t.prototype,"position",{get:function(){return this._position},set:function(e){this._position=e},enumerable:!0,configurable:!0}),t.prototype.setAbsolutePosition=function(e,t,i){this._position=[e,t,i]},t.prototype.translate=function(e,t,i){void 0===e&&(e=0),void 0===t&&(t=0),void 0===i&&(i=0);var n=this._position,r=vec3.create([e,t,i]);vec3.add(n,r,this._position)},Object.defineProperty(t.prototype,"size",{get:function(){return this._size},set:function(e){this._size=e},enumerable:!0,configurable:!0}),t.prototype.setSize=function(e,t,i){this._size=[e,t,i]},t.prototype.scale=function(e,t,i){void 0===e&&(e=0),void 0===t&&(t=0),void 0===i&&(i=0);var n=this._size,r=vec3.create([e,t,i]);vec3.add(n,r,this._size)},Object.defineProperty(t.prototype,"rotation",{get:function(){return this._rotation},set:function(e){this._rotation=e},enumerable:!0,configurable:!0}),t.prototype.setRotation=function(e,t){e&&(this._rotation.angle=e),t&&(this._rotation.axis=t)},t.prototype.setAngle=function(e){this._rotation.angle=e},t.prototype.setAxis=function(e){this._rotation.axis=e},t.prototype.rotateAngle=function(e){void 0===e&&(e=0),this._rotation.angle+=e},t.prototype.moveAxis=function(e,t,i){void 0===e&&(e=0),void 0===t&&(t=0),void 0===i&&(i=0);var n=this._rotation.axis,r=vec3.create([e,t,i]);vec3.add(n,r,this._rotation.axis)},t.prototype.beginDraw=function(e){if(e.push(),e.ModelView(),this._matrix=e.mvMatrix,void 0!=this._position&&mat4.translate(this._matrix,this._position),void 0!=this._size&&mat4.scale(this._matrix,this._size),void 0!=this._rotation){var t=this._rotation.angle*Math.PI/180;mat4.rotate(this._matrix,t,this._rotation.axis)}e.setUp()},t.prototype.endDraw=function(e){e.pop()},t}(a);e.TransformEntity=h;var m=function(e){function t(t,i,n,r,o,a,s){e.call(this,t),this._ambient=i?vec4.create(i):null,this._diffuse=n?vec4.create(n):null,this._position=r?vec3.create(r):null,this._specular=o?vec4.create(o):null,this._direction=a?vec3.create(a):null,this._cutoff=s}return __extends(t,e),Object.defineProperty(t.prototype,"ambient",{get:function(){return this._ambient},set:function(e){this._ambient=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"diffuse",{get:function(){return this._diffuse},set:function(e){this._diffuse=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"specular",{get:function(){return this._specular},set:function(e){this._specular=i.normalizeNaN(vec4.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"position",{get:function(){return this._diffuse},set:function(e){this._position=i.normalizeNaN(vec3.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"direction",{get:function(){return this._direction},set:function(e){this._direction=i.normalizeNaN(vec3.create(e))},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"cutOff",{get:function(){return this._cutoff},set:function(e){this._cutoff=e},enumerable:!0,configurable:!0}),t.prototype.beginDraw=function(){var e=this.gl;if(this._ambient){var t=this.getUniform("uLightAmbient");t&&e.uniform4fv(t,this._ambient)}if(this._diffuse){var i=this.getUniform("uLightDiffuse");i&&e.uniform4fv(i,this._diffuse)}if(this._specular){var n=this.getUniform("uLightSpecular");n&&e.uniform4fv(n,this._specular)}if(this._position){var r=this.getUniform("uLightPosition");r&&e.uniform3fv(r,this._position)}if(this._direction){var o=this.getUniform("uLightDirection");o&&e.uniform3fv(o,this._direction)}if(this._cutoff){var a=this.getUniform("uCutOff");a&&e.uniform1f(a,this._cutoff)}},t.prototype.endDraw=function(){},t}(a);e.LightEntity=m;var p=function(e){function t(t,i){e.call(this,t),this._value=i}return __extends(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this._value},set:function(e){this._value=e},enumerable:!0,configurable:!0}),t.prototype.beginDraw=function(){var e=this.gl,t=this.getUniform("uMaterialDiffuse");t&&e.uniform4fv(t,this._value)},t.prototype.endDraw=function(){},t}(a);e.DiffuseEntity=p;var d=function(e){function n(t,i){e.call(this,t),this._pointSize=i||1,this._buffer=null,this._texture_id=""}return __extends(n,e),n.prototype.configure=function(e,n){var o=this.gl;this._buffer=o.createBuffer(),o.bindBuffer(o.ARRAY_BUFFER,this._buffer),o.bufferData(o.ARRAY_BUFFER,new Float32Array(e),o.STATIC_DRAW),o.bindBuffer(o.ARRAY_BUFFER,null),this._numItems=e.length,this._texture_id=i.uuid("Texture"),
this._texture=t.createTexture(o,n),r.addTexture(this.graphID,this._texture_id)},n.prototype.update=function(e){var t=this.gl;t.bindBuffer(t.ARRAY_BUFFER,this._buffer),t.bufferData(t.ARRAY_BUFFER,new Float32Array(e),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),this._numItems=e.length},Object.defineProperty(n.prototype,"textureID",{get:function(){return this._texture_id},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"pointSize",{set:function(e){this._pointSize=e},enumerable:!0,configurable:!0}),n.prototype.beginDraw=function(){var e=this.gl,t=this.getUniform("uPointSize");t&&e.uniform1f(t,this._pointSize),e.bindBuffer(e.ARRAY_BUFFER,this._buffer),r.enableAttrib(this.graphID,"a_position"),r.activeTexture(this.graphID,this._texture_id,this._texture),e.drawArrays(e.POINTS,0,this._numItems/3)},n.prototype.endDraw=function(){var e=this.gl;r.disableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ARRAY_BUFFER,null)},n}(a);e.ParticleEntity=d;var v=function(e){function t(t,i){e.call(this,t),this._type=i||n.ORBITING,this._cmatrix=mat4.create(),mat4.identity(this._cmatrix),this._up=vec3.create(),this._right=vec3.create(),this._normal=vec3.create(),this._position=vec3.create(),this._azimuth=0,this._elevation=0,this._steps=0}return __extends(t,e),Object.defineProperty(t.prototype,"type",{set:function(e){this._type=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"position",{get:function(){return this._position},set:function(e){this._position=e},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"azimuth",{get:function(){return this._azimuth},set:function(e){var t=e-this._azimuth;this.changeAzimuth(t)},enumerable:!0,configurable:!0}),t.prototype.changeAzimuth=function(e){this._azimuth+=e,(this._azimuth>360||this._azimuth<-360)&&(this._azimuth=this._azimuth%360)},Object.defineProperty(t.prototype,"elevation",{get:function(){return this._elevation},set:function(e){var t=e-this._elevation;this.changeElevation(t)},enumerable:!0,configurable:!0}),t.prototype.changeElevation=function(e){this._elevation+=e,(this._elevation>360||this._elevation<-360)&&(this._elevation=this._elevation%360)},Object.defineProperty(t.prototype,"zoom",{get:function(){return this._steps},set:function(e){var t=vec3.create(),i=vec3.create();t=this.position;var r=e-this._steps;vec3.normalize(this._normal,i);var o=vec3.create();this._type===n.TRACKING?(o[0]=t[0]-r*i[0],o[1]=t[1]-r*i[1],o[2]=t[2]-r*i[2]):(o[0]=t[0],o[1]=t[1],o[2]=t[2]-r),this.position=o,this._steps=e},enumerable:!0,configurable:!0}),t.prototype.calculateOrientation=function(){var e=this._cmatrix;mat4.multiplyVec4(e,[1,0,0,0],this._right),mat4.multiplyVec4(e,[0,1,0,0],this._up),mat4.multiplyVec4(e,[0,0,1,0],this._normal)},t.prototype.beginDraw=function(){mat4.identity(this._cmatrix),this.calculateOrientation(),this._type===n.TRACKING?(mat4.translate(this._cmatrix,this._position),mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180)):(mat4.rotateY(this._cmatrix,this._azimuth*Math.PI/180),mat4.rotateX(this._cmatrix,this._elevation*Math.PI/180),mat4.translate(this._cmatrix,this._position)),this.calculateOrientation(),this._type===n.TRACKING&&mat4.multiplyVec4(this._cmatrix,[0,0,0,1],this._position)},Object.defineProperty(t.prototype,"modelView",{get:function(){var e=mat4.create();return mat4.inverse(this._cmatrix,e),e},enumerable:!0,configurable:!0}),t.prototype.endDraw=function(){},t}(a);e.CameraEntity=v;var b=function(e){function t(t,i){e.call(this,t),i=i||100,this._vertices=[0,0,0,i,0,0,0,0,0,0,i,0,0,0,0,0,0,i],this._indices=[0,1,2,3,4,5],this._colors=[1,1,0,1,1,1,0,1,0,1,0,1,0,1,0,1,0,0,1,1,0,0,1,1]}return __extends(t,e),t.prototype.init=function(){var e=this.gl;this._vbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this._vertices),e.STATIC_DRAW),this._ibo=e.createBuffer(),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._ibo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),e.STATIC_DRAW),this._cbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._cbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this._colors),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t.prototype.beginDraw=function(){var e=this.gl,t=this.getUniform("uWireframe");t&&e.uniform1i(t,!0);var i=this.getUniform("uPerVertexColor");i&&e.uniform1i(i,!0),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),r.enableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ARRAY_BUFFER,this._cbo),r.enableAttrib(this.graphID,"a_color",{size:4}),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._ibo),e.drawElements(e.LINES,this._indices.length,e.UNSIGNED_SHORT,0)},t.prototype.endDraw=function(){var e=this.gl,t=this.getUniform("uWireframe");t&&e.uniform1i(t,!1);var i=this.getUniform("uPerVertexColor");i&&e.uniform1i(i,!1),r.disableAttrib(this.graphID,"a_position"),r.disableAttrib(this.graphID,"a_color"),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t}(a);e.AxisEntity=b;var g=function(e){function t(t,i,n){e.call(this,t),this._dimesions={dim:i||50,lines:n||50}}return __extends(t,e),t.prototype.init=function(){var e=this.gl;this.build(),this._vbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(this._vertices),e.STATIC_DRAW),this._ibo=e.createBuffer(),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._ibo),e.bufferData(e.ELEMENT_ARRAY_BUFFER,new Uint16Array(this._indices),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t.prototype.build=function(){for(var e=2*this._dimesions.dim/this._dimesions.lines,t=[],i=[],n=0;n<=this._dimesions.lines;n++)t[6*n]=-this._dimesions.dim,t[6*n+1]=-.5,t[6*n+2]=-this._dimesions.dim+n*e,t[6*n+3]=this._dimesions.dim,t[6*n+4]=-.5,t[6*n+5]=-this._dimesions.dim+n*e,t[6*(this._dimesions.lines+1)+6*n]=-this._dimesions.dim+n*e,t[6*(this._dimesions.lines+1)+6*n+1]=-.5,t[6*(this._dimesions.lines+1)+6*n+2]=-this._dimesions.dim,t[6*(this._dimesions.lines+1)+6*n+3]=-this._dimesions.dim+n*e,t[6*(this._dimesions.lines+1)+6*n+4]=-.5,t[6*(this._dimesions.lines+1)+6*n+5]=this._dimesions.dim,i[2*n]=2*n,i[2*n+1]=2*n+1,i[2*(this._dimesions.lines+1)+2*n]=2*(this._dimesions.lines+1)+2*n,i[2*(this._dimesions.lines+1)+2*n+1]=2*(this._dimesions.lines+1)+2*n+1;this._vertices=t,this._indices=i},t.prototype.beginDraw=function(){var e=this.gl,t=this.getUniform("uWireframe");t&&e.uniform1i(t,!0);var i=this.getUniform("uMaterialDiffuse");i&&e.uniform4fv(i,[.7,.7,.7,1]),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),r.enableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this._ibo),e.drawElements(e.LINES,this._indices.length,e.UNSIGNED_SHORT,0)},t.prototype.endDraw=function(){var e=this.gl,t=this.getUniform("uWireframe");t&&e.uniform1i(t,!1),r.disableAttrib(this.graphID,"a_position"),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)},t}(a);e.GridEntity=g;var E=function(e){function t(t,i){e.call(this,t),this._color=this.generateUniqueColor(),this._data=i}return __extends(t,e),Object.defineProperty(t.prototype,"data",{get:function(){return this._data},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},enumerable:!0,configurable:!0}),t.prototype.generateUniqueColor=function(){for(var e,t=function(e){return void 0!=r.getSelectByColor(this.graphID,e)}.bind(this),i=!0;i;)e=[Number(Math.random().toFixed(2)),Number(Math.random().toFixed(2)),Number(Math.random().toFixed(2)),1],i=t(e);return e},t.prototype.beginDraw=function(){if(r.isOffScreen(this.graphID)){var e=this.gl,t=this.getUniform("uSelectColor");t&&e.uniform4fv(t,this._color)}},t.prototype.endDraw=function(){},t}(a);e.SelectEntity=E;var y=function(e){function t(t,i){e.call(this,t),this._dimensions=i,this._framebuffer=null,this._renderbuffer=null,this._texture=null,this.configure()}return __extends(t,e),t.prototype.configure=function(){var e=this.gl;this._texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this._texture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this._dimensions.width,this._dimensions.height,0,e.RGBA,e.UNSIGNED_BYTE,null),this._renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,this._renderbuffer),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,this._dimensions.width,this._dimensions.height),this._framebuffer=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,this._framebuffer),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this._texture,0),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,this._renderbuffer),e.bindTexture(e.TEXTURE_2D,null),e.bindRenderbuffer(e.RENDERBUFFER,null),e.bindFramebuffer(e.FRAMEBUFFER,null)},t.prototype.fill=function(e){r.fillSelectorBuffer(this.graphID,e)},t.prototype.clear=function(){r.clearSelectorBuffer(this.graphID)},t.prototype.find=function(e){var t=this.gl,i=new Uint8Array(4);t.bindFramebuffer(t.FRAMEBUFFER,this._framebuffer),t.readPixels(e.x,e.y,1,1,t.RGBA,t.UNSIGNED_BYTE,i),t.bindFramebuffer(t.FRAMEBUFFER,null);var n=[].slice.call(i).map(function(e){return parseFloat((e/255).toFixed(2))}),o=r.getSelectByColor(this.graphID,n);return o?o.data:void 0},t.prototype.render=function(e){var t=this.gl;t.bindFramebuffer(t.FRAMEBUFFER,this._framebuffer);var i=this.getUniform("uOffscreen");t.uniform1i(i,!0),r.enableOffScreen(this.graphID),e(),t.uniform1i(i,!1),r.disableOffScreen(this.graphID),t.bindFramebuffer(t.FRAMEBUFFER,null)},t}(o);e.Selector=y;var R=function(e){function i(t,i,n){e.call(this,t),this._texture=null,this._framebuffer=null,this._renderbuffer=null,this._vbo=null,this._tbo=null,this._shader=null,this._uniforms=null,this._attribs=null,this._noisetexture=null,this._start=Date.now(),this._canvas=i,this._type=n||"no",this.configure(),this.Geometry(),this.setEffect()}return __extends(i,e),i.prototype.configure=function(){var e=this.gl,t=this._canvas.width,i=this._canvas.height;this._texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this._texture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,i,0,e.RGBA,e.UNSIGNED_BYTE,null),this._renderbuffer=e.createRenderbuffer(),e.bindRenderbuffer(e.RENDERBUFFER,this._renderbuffer),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,t,i),this._framebuffer=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,this._framebuffer),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,this._texture,0),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,this._renderbuffer),e.bindTexture(e.TEXTURE_2D,null),e.bindRenderbuffer(e.RENDERBUFFER,null),e.bindFramebuffer(e.FRAMEBUFFER,null)},i.prototype.Geometry=function(){var e=this.gl,t=[-1,-1,1,-1,-1,1,-1,1,1,-1,1,1],i=[0,0,1,0,0,1,0,1,1,0,1,1];this._vbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(t),e.STATIC_DRAW),this._tbo=e.createBuffer(),e.bindBuffer(e.ARRAY_BUFFER,this._tbo),e.bufferData(e.ARRAY_BUFFER,new Float32Array(i),e.STATIC_DRAW),e.bindBuffer(e.ARRAY_BUFFER,null)},i.prototype.setEffect=function(e){this._type=e||this._type;var i=this.gl,n={};switch(n.vertex=f.Vertex.Effect,this._type){case"blur":n.fragment=f.Fragment.Blur_effect;break;case"film":n.fragment=f.Fragment.Film_effect;break;case"wavy":n.fragment=f.Fragment.Wavy_effect;break;case"no":default:n.fragment=f.Fragment.No_effect}this._shader&&i.deleteProgram(this._shader),this._shader=t.createProgram(i,n);var r;this._attribs={},r=i.getProgramParameter(this._shader,i.ACTIVE_ATTRIBUTES);for(var o=0;r>o;o++){var a=i.getActiveAttrib(this._shader,o);this._attribs[a.name]=i.getAttribLocation(this._shader,a.name)}this._uniforms={},r=i.getProgramParameter(this._shader,i.ACTIVE_UNIFORMS);for(var o=0;r>o;o++){var s=i.getActiveUniform(this._shader,o);this._uniforms[a.name]=i.getUniformLocation(this._shader,s.name)}},i.prototype.Size=function(){var e=this.gl,t=this._canvas.width,i=this._canvas.height;e.bindTexture(e.TEXTURE_2D,this._texture),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,t,i,0,e.RGBA,e.UNSIGNED_BYTE,null),e.bindRenderbuffer(e.RENDERBUFFER,this._renderbuffer),e.renderbufferStorage(e.RENDERBUFFER,e.DEPTH_COMPONENT16,t,i),e.bindTexture(e.TEXTURE_2D,null),e.bindRenderbuffer(e.RENDERBUFFER,null)},i.prototype.setNoiseTexture=function(e){var i=this.gl;this._noisetexture=t.createTexture(i,e)},i.prototype.Bind=function(){var e=this.gl,t=this._canvas.width,i=this._canvas.height;e.useProgram(this._shader),e.enableVertexAttribArray(this._attribs.a_position),e.bindBuffer(e.ARRAY_BUFFER,this._vbo),e.vertexAttribPointer(this._attribs.a_position,2,e.FLOAT,!1,0,0),e.enableVertexAttribArray(this._attribs.a_texture_coords),e.bindBuffer(e.ARRAY_BUFFER,this._tbo),e.vertexAttribPointer(this._attribs.a_texture_coords,2,e.FLOAT,!1,0,0),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,this._texture),e.uniform1i(this._uniforms.uSampler,0),this._uniforms.uTime&&e.uniform1f(this._uniforms.uTime,(Date.now()-this._start)/1e3),this._uniforms.uInverseTextureSize&&e.uniform2f(this._uniforms.uInverseTextureSize,1/t,1/i),this._uniforms.uNoiseSampler&&this._noisetexture&&(e.activeTexture(e.TEXTURE1),e.bindTexture(e.TEXTURE_2D,this._noisetexture),e.uniform1i(this._uniforms.uNoiseSampler,1))},i.prototype.bindFrameBuffer=function(){var e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,this._framebuffer)},i.prototype.unbindFrameBuffer=function(){var e=this.gl;e.bindFramebuffer(e.FRAMEBUFFER,null)},i.prototype.draw=function(){var e=this.gl;e.drawArrays(e.TRIANGLES,0,6),e.bindBuffer(e.ARRAY_BUFFER,null),e.disableVertexAttribArray(this._attribs.a_position),e.disableVertexAttribArray(this._attribs.a_texture_coords)},i}(o);e.Effects=R;var x=function(){function e(e,t,n){this._parentNode=e,this._parentNode&&this._parentNode.addChildNode(this),this._childNodes=[],this._type=t,this._oid=i.uuid(this._type||this.constructor.name),this._entity=n}return Object.defineProperty(e.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"parent",{get:function(){return this._parentNode},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"entity",{get:function(){return this._entity},set:function(e){this._entity=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"childNodes",{get:function(){return this._childNodes},enumerable:!0,configurable:!0}),e.prototype.addChildNode=function(e){this._childNodes.push(e)},e.prototype.removeChildNode=function(e){var t=this.indexOf(e);t>-1&&this._childNodes.splice(t,1)},e.prototype.getChildNodeByIndex=function(e){return this._childNodes[e]||void 0},e.prototype.existsChildNode=function(e){return void 0!==this._childNodes[e]},e.prototype["delete"]=function(){this._parentNode.removeChildNode(this)},e.prototype.createChildNode=function(t,i){return new e(this,t,i)},e.prototype.isRoot=function(){return void 0===this._parentNode},e.prototype.indexOf=function(e){var t=e.oid;return _.findIndex(this._childNodes,function(e){return e.oid===t})},e.prototype.indexInParent=function(){var e=-1;return this.isRoot()||(e=this._parentNode.indexOf(this)),e},e.prototype.hasSibling=function(e){var t=!1;if(!this.isRoot()){var i=this._parentNode.indexOf(this);i>-1&&(e?this._parentNode.getChildNodeByIndex(i-1)&&(t=!0):this._parentNode.getChildNodeByIndex(i+1)&&(t=!0))}return t},e.prototype.nextSibling=function(){var e=null;if(!this.isRoot()&&this.hasSibling()){var t=this._parentNode.indexOf(this);e=this._parentNode.getChildNodeByIndex(t+1)}return e},e.prototype.previousSibling=function(){var e=null;if(!this.isRoot()&&this.hasSibling(!0)){var t=this._parentNode.indexOf(this);e=this._parentNode.getChildNodeByIndex(t-1)}return e},e.prototype.firstChild=function(){return this.getChildNodeByIndex(0)},e.prototype.lastChild=function(){return this.getChildNodeByIndex(this._childNodes.length-1)},e.prototype.removeChildNodes=function(){this._childNodes=[]},e.prototype.draw=function(e){this._entity&&this._entity.beginDraw(e);for(var t=0;t<this._childNodes.length;t++){var i=this._childNodes[t];i.draw(e)}this._entity&&this._entity.endDraw(e)},e}();e.NodeElement=x;var A=function(e){function t(){var t=i.uuid();e.call(this,t),this._oid=t,this._scene=new x(void 0,"Scene"),this._matrixStack=new s(this._oid),this._loaderBuffer=[],r.createView(this._oid),this._selector=null,this._effects=null}return __extends(t,e),Object.defineProperty(t.prototype,"scene",{get:function(){return this._scene},enumerable:!0,configurable:!0}),t.prototype.Environment=function(e){var t=this.gl;e=e||[],t.enable(t.DEPTH_TEST),t.depthFunc(t.LEQUAL),t.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,!0),t.clearColor(e[0]||0,e[1]||0,e[2]||0,1),t.clearDepth(1)},t.prototype.render=function(){this._effects?this.drawWithEffects():this.drawScene()},t.prototype.drawScene=function(){var e=this.gl;this.useProgram();var t=function(){e.viewport(0,0,e.viewportWidth,e.viewportHeight),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),this._scene.draw(this._matrixStack)}.bind(this);this._selector&&this._selector.render(t),t()},t.prototype.drawWithEffects=function(){this._effects.Size(),this._effects.bindFrameBuffer(),this.drawScene(),this._effects.unbindFrameBuffer(),this._effects.Bind(),this._effects.draw()},t.prototype.useProgram=function(){r.useProgram(this.oid)},t.prototype.createMainChildNode=function(e,t){return this._scene.createChildNode(e,t)},t.prototype.removeMainChildNode=function(e){this._scene.removeChildNode(e)},Object.defineProperty(t.prototype,"oid",{get:function(){return this._oid},enumerable:!0,configurable:!0}),t.prototype.setContext=function(e){r.setCanvasToContext(this.oid,e)},t.prototype.Program=function(e){e=e||"Phong",r.createProgram(this._oid,{fragment:f.Fragment[e]||f.Fragment.Phong,vertex:f.Vertex[e]||f.Vertex.Phong})},t.prototype.createMesh=function(e){var t=new l(this.oid);return e.mesh&&t.loadMeshByObject(e.mesh),e.material&&t.loadMaterialByObject(e.material),t},t.prototype.createDiffuse=function(e){return new p(this.oid,e)},t.prototype.createMeshByLoader=function(e){var t=new l(this.oid,e.mesh,e.material,e.texture);return this._loaderBuffer.push(t),t},t.prototype.createTransform=function(e,t,i){return new h(this.oid,e,t,i)},t.prototype.createLight=function(e){return new m(this.oid,e.ambient,e.diffuse,e.position,e.specular,e.direction,e.cutoff)},t.prototype.createCamera=function(e){return new v(this.oid,e)},t.prototype.createParticle=function(e){return new d(this.oid,e)},t.prototype.createAxis=function(e){return new b(this.oid,e)},t.prototype.createGrid=function(e,t){return new g(this.oid,e,t)},t.prototype.createSelect=function(e){return new E(this.oid,e)},t.prototype.createSelector=function(e){this._selector=new y(this.oid,e)},t.prototype.fillSelector=function(e){this._selector&&this._selector.fill(e)},t.prototype.clearSelector=function(e){this._selector&&this._selector.clear()},t.prototype.select=function(e){return this._selector?this._selector.find(e):void 0},t.prototype.createEffects=function(e,t){this._effects=new R(this.oid,e,t)},t.prototype.setNoiseEffect=function(e){this._effects&&this._effects.setNoiseTexture(e)},t.prototype.setEffect=function(e){this._effects&&this._effects.setEffect(e)},Object.defineProperty(t.prototype,"MainCamera",{set:function(e){this._matrixStack.MainCamera=e},enumerable:!0,configurable:!0}),t.prototype.removeTexture=function(e){r.removeTexture(this.oid,e)},t.prototype.startLoader=function(e){async.eachSeries(this._loaderBuffer,function(e,t){e.loadMesh(function(){console.log(e),t()})},e)},t.prototype.configure=function(e){var i=this;e=e||{},i.Environment(e.background),i.Program(e.typeShader),r.setAttributeLocations(i._oid,t.ATTRIBUTES),r.setUniformLocations(i._oid,t.UNIFORMS),this._matrixStack.init()},t.prototype.configureWithLoader=function(e){var t=this;t.configure(),t.startLoader(e)},t.UNIFORMS=["uPMatrix","uMVMatrix","uNMatrix","uLightPosition","uLightDirection","uCutOff","uLightAmbient","uMaterialAmbient","uLightDiffuse","uMaterialDiffuse","uLightSpecular","uMaterialSpecular","uShininess","uPointSize","uSampler","uWireframe","uPerVertexColor","uSelectColor","uOffscreen","uInverseTextureSize","uNoiseSampler","uTime"],t.ATTRIBUTES=["a_position","a_normal","a_color","a_texture_coords"],t}(o);e.SceneGraph=A}(Blaze||(Blaze={}));
//# sourceMappingURL=data:application/json;base64,
